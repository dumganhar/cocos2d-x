#include "scripting/js-bindings/auto/jsb_cocos2dx_auto.hpp"
#include "scripting/js-bindings/manual/jsb_conversions.hpp"
#include "cocos2d.h"
#include "audio/include/SimpleAudioEngine.h"
#include "2d/CCProtectedNode.h"
#include "base/CCAsyncTaskPool.h"

se::Object* __jsb_cocos2dx_Texture2D_proto = nullptr;
se::Class* __jsb_cocos2dx_Texture2D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getGLProgram : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgram* result = cobj->getGLProgram();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getMaxT, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getMaxT : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getMaxT();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setAlphaTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setAlphaTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_setAlphaTexture : Error processing arguments");
        cobj->setAlphaTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getStringForFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getStringForFormat : Invalid Native Object");
    if (argc == 0) {
        const char* result = cobj->getStringForFormat();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_initWithImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Texture2D_initWithImage : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Image* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D::PixelFormat arg1;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithImage(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Image* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithImage(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setGLProgram : Invalid Native Object");
    if (argc == 1) {
        cocos2d::GLProgram* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_setGLProgram : Error processing arguments");
        cobj->setGLProgram(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getMaxS, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getMaxS : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getMaxS();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_hasPremultipliedAlpha, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_hasPremultipliedAlpha : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasPremultipliedAlpha();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getPixelsHigh, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getPixelsHigh : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getPixelsHigh();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_initWithMipmaps, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_initWithMipmaps : Invalid Native Object");
    if (argc == 5) {
        cocos2d::_MipmapInfo* arg0 = nullptr;
        int arg1 = 0;
        cocos2d::Texture2D::PixelFormat arg2;
        int arg3 = 0;
        int arg4 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR _MipmapInfo*
		ok = false;
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_initWithMipmaps : Error processing arguments");
        bool result = cobj->initWithMipmaps(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getAlphaTextureName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getAlphaTextureName : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getAlphaTextureName();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getBitsPerPixelForFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Texture2D_getBitsPerPixelForFormat : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Texture2D::PixelFormat arg0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            unsigned int result = cobj->getBitsPerPixelForFormat(arg0);
            se::Value jsret;
            ok &= uint32_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            unsigned int result = cobj->getBitsPerPixelForFormat();
            se::Value jsret;
            ok &= uint32_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getName : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getName();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Texture2D_initWithString : Invalid Native Object");

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::FontDefinition arg1;
            ok &= seval_to_FontDefinition(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 6) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg5;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 7) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg5;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            bool arg6;
            ok &= seval_to_boolean(args[6], &arg6);
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 8) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg5;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            bool arg6;
            ok &= seval_to_boolean(args[6], &arg6);
            int arg7 = 0;
            ok &= seval_to_int32(args[7], (int32_t *)&arg7);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setMaxT, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setMaxT : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_setMaxT : Error processing arguments");
        cobj->setMaxT(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getPath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getPath : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getPath();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_drawInRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_drawInRect : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_drawInRect : Error processing arguments");
        cobj->drawInRect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getContentSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getContentSize : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Size result = cobj->getContentSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setAliasTexParameters, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAliasTexParameters();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setAntiAliasTexParameters, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setAntiAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAntiAliasTexParameters();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_generateMipmap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_generateMipmap : Invalid Native Object");
    if (argc == 0) {
        cobj->generateMipmap();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getAlphaTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getAlphaTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getAlphaTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getDescription, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getDescription : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getDescription();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getPixelFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getPixelFormat : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getPixelFormat();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getContentSizeInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getContentSizeInPixels : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getContentSizeInPixels();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_releaseGLTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_releaseGLTexture : Invalid Native Object");
    if (argc == 0) {
        cobj->releaseGLTexture();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getPixelsWide, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_getPixelsWide : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getPixelsWide();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_drawAtPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_drawAtPoint : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_drawAtPoint : Error processing arguments");
        cobj->drawAtPoint(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_hasMipmaps, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_hasMipmaps : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasMipmaps();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setMaxS, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Texture2D_setMaxS : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_setMaxS : Error processing arguments");
        cobj->setMaxS(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_setDefaultAlphaPixelFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Texture2D::PixelFormat arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Texture2D_setDefaultAlphaPixelFormat : Error processing arguments");
        cocos2d::Texture2D::setDefaultAlphaPixelFormat(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Texture2D_getDefaultAlphaPixelFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        int result = (int)cocos2d::Texture2D::getDefaultAlphaPixelFormat();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Texture2D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Texture2D_constructor, __jsb_cocos2dx_Texture2D_class, js_cocos2dx_Texture2D_finalize)
{
    cocos2d::Texture2D* cobj = new (std::nothrow) cocos2d::Texture2D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Texture2D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Texture2D)", nativeThisObject);
    cocos2d::Texture2D* cobj = (cocos2d::Texture2D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Texture2D(se::Object* obj)
{
    auto cls = se::Class::create("Texture2D", obj, nullptr, js_cocos2dx_Texture2D_constructor);

    cls->defineFunction("getShaderProgram", js_cocos2dx_Texture2D_getGLProgram);
    cls->defineFunction("getMaxT", js_cocos2dx_Texture2D_getMaxT);
    cls->defineFunction("setAlphaTexture", js_cocos2dx_Texture2D_setAlphaTexture);
    cls->defineFunction("getStringForFormat", js_cocos2dx_Texture2D_getStringForFormat);
    cls->defineFunction("initWithImage", js_cocos2dx_Texture2D_initWithImage);
    cls->defineFunction("setShaderProgram", js_cocos2dx_Texture2D_setGLProgram);
    cls->defineFunction("getMaxS", js_cocos2dx_Texture2D_getMaxS);
    cls->defineFunction("hasPremultipliedAlpha", js_cocos2dx_Texture2D_hasPremultipliedAlpha);
    cls->defineFunction("getPixelsHigh", js_cocos2dx_Texture2D_getPixelsHigh);
    cls->defineFunction("initWithMipmaps", js_cocos2dx_Texture2D_initWithMipmaps);
    cls->defineFunction("getAlphaTextureName", js_cocos2dx_Texture2D_getAlphaTextureName);
    cls->defineFunction("getBitsPerPixelForFormat", js_cocos2dx_Texture2D_getBitsPerPixelForFormat);
    cls->defineFunction("getName", js_cocos2dx_Texture2D_getName);
    cls->defineFunction("initWithString", js_cocos2dx_Texture2D_initWithString);
    cls->defineFunction("setMaxT", js_cocos2dx_Texture2D_setMaxT);
    cls->defineFunction("getPath", js_cocos2dx_Texture2D_getPath);
    cls->defineFunction("drawInRect", js_cocos2dx_Texture2D_drawInRect);
    cls->defineFunction("getContentSize", js_cocos2dx_Texture2D_getContentSize);
    cls->defineFunction("setAliasTexParameters", js_cocos2dx_Texture2D_setAliasTexParameters);
    cls->defineFunction("setAntiAliasTexParameters", js_cocos2dx_Texture2D_setAntiAliasTexParameters);
    cls->defineFunction("generateMipmap", js_cocos2dx_Texture2D_generateMipmap);
    cls->defineFunction("getAlphaTexture", js_cocos2dx_Texture2D_getAlphaTexture);
    cls->defineFunction("getDescription", js_cocos2dx_Texture2D_getDescription);
    cls->defineFunction("getPixelFormat", js_cocos2dx_Texture2D_getPixelFormat);
    cls->defineFunction("getContentSizeInPixels", js_cocos2dx_Texture2D_getContentSizeInPixels);
    cls->defineFunction("releaseTexture", js_cocos2dx_Texture2D_releaseGLTexture);
    cls->defineFunction("getPixelsWide", js_cocos2dx_Texture2D_getPixelsWide);
    cls->defineFunction("drawAtPoint", js_cocos2dx_Texture2D_drawAtPoint);
    cls->defineFunction("hasMipmaps", js_cocos2dx_Texture2D_hasMipmaps);
    cls->defineFunction("setMaxS", js_cocos2dx_Texture2D_setMaxS);
    cls->defineStaticFunction("setDefaultAlphaPixelFormat", js_cocos2dx_Texture2D_setDefaultAlphaPixelFormat);
    cls->defineStaticFunction("getDefaultAlphaPixelFormat", js_cocos2dx_Texture2D_getDefaultAlphaPixelFormat);
    cls->defineFinalizedFunction(js_cocos2dx_Texture2D_finalize);
    cls->install();

    __jsb_cocos2dx_Texture2D_proto = cls->getProto();
    __jsb_cocos2dx_Texture2D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Touch_proto = nullptr;
se::Class* __jsb_cocos2dx_Touch_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Touch_getPreviousLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getPreviousLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getPreviousLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getDelta, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getDelta : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getDelta();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getStartLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getStartLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getStartLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getCurrentForce, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getCurrentForce : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getCurrentForce();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getStartLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getStartLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getStartLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getID : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getID();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_setTouchInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Touch_setTouchInfo : Invalid Native Object");

    do {
        if (argc == 5) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cobj->setTouchInfo(arg0, arg1, arg2, arg3, arg4);
        }
    } while(0);

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->setTouchInfo(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getMaxForce, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getMaxForce : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getMaxForce();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Touch_getPreviousLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Touch_getPreviousLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getPreviousLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Touch_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Touch_constructor, __jsb_cocos2dx_Touch_class, js_cocos2dx_Touch_finalize)
{
    cocos2d::Touch* cobj = new (std::nothrow) cocos2d::Touch();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Touch_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Touch)", nativeThisObject);
    cocos2d::Touch* cobj = (cocos2d::Touch*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Touch(se::Object* obj)
{
    auto cls = se::Class::create("Touch", obj, nullptr, js_cocos2dx_Touch_constructor);

    cls->defineFunction("getPreviousLocationInView", js_cocos2dx_Touch_getPreviousLocationInView);
    cls->defineFunction("getLocation", js_cocos2dx_Touch_getLocation);
    cls->defineFunction("getDelta", js_cocos2dx_Touch_getDelta);
    cls->defineFunction("getStartLocationInView", js_cocos2dx_Touch_getStartLocationInView);
    cls->defineFunction("getCurrentForce", js_cocos2dx_Touch_getCurrentForce);
    cls->defineFunction("getStartLocation", js_cocos2dx_Touch_getStartLocation);
    cls->defineFunction("getID", js_cocos2dx_Touch_getID);
    cls->defineFunction("setTouchInfo", js_cocos2dx_Touch_setTouchInfo);
    cls->defineFunction("getMaxForce", js_cocos2dx_Touch_getMaxForce);
    cls->defineFunction("getLocationInView", js_cocos2dx_Touch_getLocationInView);
    cls->defineFunction("getPreviousLocation", js_cocos2dx_Touch_getPreviousLocation);
    cls->defineFinalizedFunction(js_cocos2dx_Touch_finalize);
    cls->install();

    __jsb_cocos2dx_Touch_proto = cls->getProto();
    __jsb_cocos2dx_Touch_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Event_proto = nullptr;
se::Class* __jsb_cocos2dx_Event_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Event_isStopped, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Event* cobj = (cocos2d::Event*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Event_isStopped : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isStopped();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Event_getType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Event* cobj = (cocos2d::Event*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Event_getType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Event_getCurrentTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Event* cobj = (cocos2d::Event*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Event_getCurrentTarget : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getCurrentTarget();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Event_stopPropagation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Event* cobj = (cocos2d::Event*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Event_stopPropagation : Invalid Native Object");
    if (argc == 0) {
        cobj->stopPropagation();
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Event_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Event_constructor, __jsb_cocos2dx_Event_class, js_cocos2dx_Event_finalize)
{
    bool ok = true;
    cocos2d::Event::Type arg0;
    ok &= seval_to_int32(args[0], (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, false, "js_cocos2dx_Event_constructor : Error processing arguments");
    cocos2d::Event* cobj = new (std::nothrow) cocos2d::Event(arg0);
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Event_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Event)", nativeThisObject);
    cocos2d::Event* cobj = (cocos2d::Event*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Event(se::Object* obj)
{
    auto cls = se::Class::create("Event", obj, nullptr, js_cocos2dx_Event_constructor);

    cls->defineFunction("isStopped", js_cocos2dx_Event_isStopped);
    cls->defineFunction("getType", js_cocos2dx_Event_getType);
    cls->defineFunction("getCurrentTarget", js_cocos2dx_Event_getCurrentTarget);
    cls->defineFunction("stopPropagation", js_cocos2dx_Event_stopPropagation);
    cls->defineFinalizedFunction(js_cocos2dx_Event_finalize);
    cls->install();

    __jsb_cocos2dx_Event_proto = cls->getProto();
    __jsb_cocos2dx_Event_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventTouch_proto = nullptr;
se::Class* __jsb_cocos2dx_EventTouch_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventTouch_getEventCode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventTouch* cobj = (cocos2d::EventTouch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventTouch_getEventCode : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getEventCode();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventTouch_setEventCode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventTouch* cobj = (cocos2d::EventTouch*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventTouch_setEventCode : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventTouch::EventCode arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventTouch_setEventCode : Error processing arguments");
        cobj->setEventCode(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventTouch_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventTouch_constructor, __jsb_cocos2dx_EventTouch_class, js_cocos2dx_EventTouch_finalize)
{
    cocos2d::EventTouch* cobj = new (std::nothrow) cocos2d::EventTouch();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventTouch_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventTouch)", nativeThisObject);
    cocos2d::EventTouch* cobj = (cocos2d::EventTouch*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventTouch(se::Object* obj)
{
    auto cls = se::Class::create("EventTouch", obj, __jsb_cocos2dx_Event_proto, js_cocos2dx_EventTouch_constructor);

    cls->defineFunction("getEventCode", js_cocos2dx_EventTouch_getEventCode);
    cls->defineFunction("setEventCode", js_cocos2dx_EventTouch_setEventCode);
    cls->defineFinalizedFunction(js_cocos2dx_EventTouch_finalize);
    cls->install();

    __jsb_cocos2dx_EventTouch_proto = cls->getProto();
    __jsb_cocos2dx_EventTouch_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ComponentContainer_proto = nullptr;
se::Class* __jsb_cocos2dx_ComponentContainer_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_visit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ComponentContainer_visit : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ComponentContainer_visit : Error processing arguments");
        cobj->visit(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_remove, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ComponentContainer_remove : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Component* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->remove(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->remove(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_removeAll, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ComponentContainer_removeAll : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAll();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_add, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ComponentContainer_add : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Component* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ComponentContainer_add : Error processing arguments");
        bool result = cobj->add(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_isEmpty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ComponentContainer_isEmpty : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEmpty();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ComponentContainer_get, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ComponentContainer* cobj = (cocos2d::ComponentContainer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ComponentContainer_get : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ComponentContainer_get : Error processing arguments");
        cocos2d::Component* result = cobj->get(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Component>((cocos2d::Component*)result, __jsb_cocos2dx_Component_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_ComponentContainer(se::Object* obj)
{
    auto cls = se::Class::create("ComponentContainer", obj, nullptr, nullptr);

    cls->defineFunction("visit", js_cocos2dx_ComponentContainer_visit);
    cls->defineFunction("remove", js_cocos2dx_ComponentContainer_remove);
    cls->defineFunction("removeAll", js_cocos2dx_ComponentContainer_removeAll);
    cls->defineFunction("add", js_cocos2dx_ComponentContainer_add);
    cls->defineFunction("isEmpty", js_cocos2dx_ComponentContainer_isEmpty);
    cls->defineFunction("getComponent", js_cocos2dx_ComponentContainer_get);
    cls->install();

    __jsb_cocos2dx_ComponentContainer_proto = cls->getProto();
    __jsb_cocos2dx_ComponentContainer_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Component_proto = nullptr;
se::Class* __jsb_cocos2dx_Component_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Component_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Component_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_setName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_setName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Component_setName : Error processing arguments");
        cobj->setName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_getOwner, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_getOwner : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getOwner();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_setOwner, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_setOwner : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Component_setOwner : Error processing arguments");
        cobj->setOwner(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Component_getName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Component_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Component::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Component_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Component_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Component_constructor, __jsb_cocos2dx_Component_class, js_cocos2dx_Component_finalize)
{
    cocos2d::Component* cobj = new (std::nothrow) cocos2d::Component();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Component_ctor, __jsb_cocos2dx_Component_class, js_cocos2dx_Component_finalize)
{
    cocos2d::Component* cobj = new (std::nothrow) cocos2d::Component();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Component_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Component)", nativeThisObject);
    cocos2d::Component* cobj = (cocos2d::Component*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Component(se::Object* obj)
{
    auto cls = se::Class::create("Component", obj, nullptr, js_cocos2dx_Component_constructor);

    cls->defineFunction("setEnabled", js_cocos2dx_Component_setEnabled);
    cls->defineFunction("setName", js_cocos2dx_Component_setName);
    cls->defineFunction("isEnabled", js_cocos2dx_Component_isEnabled);
    cls->defineFunction("getOwner", js_cocos2dx_Component_getOwner);
    cls->defineFunction("init", js_cocos2dx_Component_init);
    cls->defineFunction("setOwner", js_cocos2dx_Component_setOwner);
    cls->defineFunction("getName", js_cocos2dx_Component_getName);
    cls->defineFunction("ctor", js_cocos2dx_Component_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Component_create);
    cls->defineFinalizedFunction(js_cocos2dx_Component_finalize);
    cls->install();

    __jsb_cocos2dx_Component_proto = cls->getProto();
    __jsb_cocos2dx_Component_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Component.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Node_proto = nullptr;
se::Class* __jsb_cocos2dx_Node_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Node_addChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_addChild : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->addChild(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->addChild(arg0);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cobj->addChild(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->addChild(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeComponent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_removeComponent : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Component* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->removeComponent(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->removeComponent(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPhysicsBody, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPhysicsBody : Invalid Native Object");
    if (argc == 1) {
        cocos2d::PhysicsBody* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPhysicsBody : Error processing arguments");
        cobj->setPhysicsBody(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getGLProgram : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgram* result = cobj->getGLProgram();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getDescription, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getDescription : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getDescription();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setOpacityModifyRGB, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setOpacityModifyRGB : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setOpacityModifyRGB : Error processing arguments");
        cobj->setOpacityModifyRGB(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setCascadeOpacityEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setCascadeOpacityEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setCascadeOpacityEnabled : Error processing arguments");
        cobj->setCascadeOpacityEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getChildren, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getChildren : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::Vector<cocos2d::Node *>& result = cobj->getChildren();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::Vector<cocos2d::Node *>& result = cobj->getChildren();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setOnExitCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setOnExitCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=]() -> void {
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(se::EmptyValueArray, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setOnExitCallback : Error processing arguments");
        cobj->setOnExitCallback(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setActionManager, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setActionManager : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionManager* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setActionManager : Error processing arguments");
        cobj->setActionManager(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertToWorldSpaceAR, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertToWorldSpaceAR : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertToWorldSpaceAR : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToWorldSpaceAR(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isIgnoreAnchorPointForPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isIgnoreAnchorPointForPosition : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isIgnoreAnchorPointForPosition();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getChildByName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getChildByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_getChildByName : Error processing arguments");
        cocos2d::Node* result = cobj->getChildByName(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_updateDisplayedOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_updateDisplayedOpacity : Invalid Native Object");
    if (argc == 1) {
        uint8_t arg0;
        ok &= seval_to_uint8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_updateDisplayedOpacity : Error processing arguments");
        cobj->updateDisplayedOpacity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getCameraMask, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getCameraMask : Invalid Native Object");
    if (argc == 0) {
        unsigned short result = cobj->getCameraMask();
        se::Value jsret;
        ok &= int16_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setRotation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setRotation : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setRotation : Error processing arguments");
        cobj->setRotation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setScaleZ, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setScaleZ : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setScaleZ : Error processing arguments");
        cobj->setScaleZ(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setScaleY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setScaleY : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setScaleY : Error processing arguments");
        cobj->setScaleY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setScaleX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setScaleX : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setScaleX : Error processing arguments");
        cobj->setScaleX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color3B& result = cobj->getColor();
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setonEnterTransitionDidFinishCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setonEnterTransitionDidFinishCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=]() -> void {
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(se::EmptyValueArray, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setonEnterTransitionDidFinishCallback : Error processing arguments");
        cobj->setonEnterTransitionDidFinishCallback(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeAllComponents, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_removeAllComponents : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllComponents();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node__setLocalZOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node__setLocalZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node__setLocalZOrder : Error processing arguments");
        cobj->_setLocalZOrder(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setCameraMask, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setCameraMask : Invalid Native Object");
    if (argc == 1) {
        unsigned short arg0 = 0;
        ok &= seval_to_uint16(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setCameraMask : Error processing arguments");
        cobj->setCameraMask(arg0);
    }
    if (argc == 2) {
        unsigned short arg0 = 0;
        bool arg1;
        ok &= seval_to_uint16(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setCameraMask : Error processing arguments");
        cobj->setCameraMask(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getTag : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getTag();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getonEnterTransitionDidFinishCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getonEnterTransitionDidFinishCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& result = cobj->getonEnterTransitionDidFinishCallback();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNodeToWorldAffineTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getNodeToWorldAffineTransform : Invalid Native Object");
    if (argc == 0) {
        cocos2d::AffineTransform result = cobj->getNodeToWorldAffineTransform();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPosition3D, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getPosition3D : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getPosition3D();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_removeChild : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChild : Error processing arguments");
        cobj->removeChild(arg0);
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        bool arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChild : Error processing arguments");
        cobj->removeChild(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertToWorldSpace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertToWorldSpace : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertToWorldSpace : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToWorldSpace(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getScene : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Scene* result = cobj->getScene();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Scene>((cocos2d::Scene*)result, __jsb_cocos2dx_Scene_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getEventDispatcher, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getEventDispatcher : Invalid Native Object");
    if (argc == 0) {
        cocos2d::EventDispatcher* result = cobj->getEventDispatcher();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::EventDispatcher>((cocos2d::EventDispatcher*)result, __jsb_cocos2dx_EventDispatcher_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setSkewX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setSkewX : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setSkewX : Error processing arguments");
        cobj->setSkewX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setGLProgramState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setGLProgramState : Invalid Native Object");
    if (argc == 1) {
        cocos2d::GLProgramState* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setGLProgramState : Error processing arguments");
        cobj->setGLProgramState(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setOnEnterCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setOnEnterCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=]() -> void {
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(se::EmptyValueArray, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setOnEnterCallback : Error processing arguments");
        cobj->setOnEnterCallback(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_stopActionsByFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_stopActionsByFlags : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_stopActionsByFlags : Error processing arguments");
        cobj->stopActionsByFlags(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setNormalizedPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setNormalizedPosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setNormalizedPosition : Error processing arguments");
        cobj->setNormalizedPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setonExitTransitionDidStartCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setonExitTransitionDidStartCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=]() -> void {
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(se::EmptyValueArray, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setonExitTransitionDidStartCallback : Error processing arguments");
        cobj->setonExitTransitionDidStartCallback(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertTouchToNodeSpace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertTouchToNodeSpace : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Touch* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertTouchToNodeSpace : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertTouchToNodeSpace(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeAllChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_removeAllChildrenWithCleanup : Invalid Native Object");

    do {
        if (argc == 1) {
            bool arg0;
            ok &= seval_to_boolean(args[0], &arg0);
            cobj->removeAllChildrenWithCleanup(arg0);
        }
    } while(0);

    do {
        if (argc == 0) {
            cobj->removeAllChildren();
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getRotationSkewX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getRotationSkewX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRotationSkewX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getRotationSkewY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getRotationSkewY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRotationSkewY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNodeToWorldTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getNodeToWorldTransform : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Mat4 result = cobj->getNodeToWorldTransform();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isCascadeOpacityEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isCascadeOpacityEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isCascadeOpacityEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setParent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setParent : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setParent : Error processing arguments");
        cobj->setParent(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_resume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_resume : Invalid Native Object");
    if (argc == 0) {
        cobj->resume();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getRotation3D, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getRotation3D : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getRotation3D();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNodeToParentAffineTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getNodeToParentAffineTransform : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::AffineTransform result = cobj->getNodeToParentAffineTransform(arg0);
            se::Value jsret;
            #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::AffineTransform result = cobj->getNodeToParentAffineTransform();
            se::Value jsret;
            #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertTouchToNodeSpaceAR, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertTouchToNodeSpaceAR : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Touch* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertTouchToNodeSpaceAR : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertTouchToNodeSpaceAR(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getOnEnterCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getOnEnterCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& result = cobj->getOnEnterCallback();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPositionNormalized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPositionNormalized : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPositionNormalized : Error processing arguments");
        cobj->setPositionNormalized(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_pause, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isOpacityModifyRGB, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isOpacityModifyRGB : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isOpacityModifyRGB();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_stopActionByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_stopActionByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_stopActionByTag : Error processing arguments");
        cobj->stopActionByTag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_reorderChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_reorderChild : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_reorderChild : Error processing arguments");
        cobj->reorderChild(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setSkewY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setSkewY : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setSkewY : Error processing arguments");
        cobj->setSkewY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setColor : Error processing arguments");
        cobj->setColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setRotation3D, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setRotation3D : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setRotation3D : Error processing arguments");
        cobj->setRotation3D(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPositionX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPositionX : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPositionX : Error processing arguments");
        cobj->setPositionX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setNodeToParentTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setNodeToParentTransform : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Mat4 arg0;
        ok &= seval_to_Mat4(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setNodeToParentTransform : Error processing arguments");
        cobj->setNodeToParentTransform(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getAnchorPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getAnchorPoint();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNumberOfRunningActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getNumberOfRunningActions : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getNumberOfRunningActions();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_updateTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_updateTransform : Invalid Native Object");
    if (argc == 0) {
        cobj->updateTransform();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isVisible, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isVisible : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isVisible();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getChildrenCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getChildrenCount : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getChildrenCount();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNodeToParentTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getNodeToParentTransform : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 result = cobj->getNodeToParentTransform(arg0);
            se::Value jsret;
            ok &= Mat4_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Mat4& result = cobj->getNodeToParentTransform();
            se::Value jsret;
            ok &= Mat4_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertToNodeSpaceAR, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertToNodeSpaceAR : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertToNodeSpaceAR : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToNodeSpaceAR(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_addComponent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_addComponent : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Component* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_addComponent : Error processing arguments");
        bool result = cobj->addComponent(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_runAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_runAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Action* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_runAction : Error processing arguments");
        cocos2d::Action* result = cobj->runAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Action>((cocos2d::Action*)result, __jsb_cocos2dx_Action_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_visit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_visit : Invalid Native Object");

    do {
        if (argc == 0) {
            cobj->visit();
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Renderer* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            unsigned int arg2 = 0;
            ok &= seval_to_uint32(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->visit(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setGLProgram : Invalid Native Object");
    if (argc == 1) {
        cocos2d::GLProgram* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setGLProgram : Error processing arguments");
        cobj->setGLProgram(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getRotation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getRotation : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRotation();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getAnchorPointInPoints, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getAnchorPointInPoints : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getAnchorPointInPoints();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getRotationQuat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getRotationQuat : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Quaternion result = cobj->getRotationQuat();
        se::Value jsret;
        ok &= Quaternion_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeChildByName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_removeChildByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChildByName : Error processing arguments");
        cobj->removeChildByName(arg0);
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChildByName : Error processing arguments");
        cobj->removeChildByName(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPositionZ, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPositionZ : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPositionZ : Error processing arguments");
        cobj->setPositionZ(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getGLProgramState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getGLProgramState : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgramState* result = cobj->getGLProgramState();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setScheduler, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setScheduler : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scheduler* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setScheduler : Error processing arguments");
        cobj->setScheduler(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_stopAllActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_stopAllActions : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAllActions();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getSkewX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getSkewX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSkewX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getSkewY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getSkewY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSkewY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isScheduled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isScheduled : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_isScheduled : Error processing arguments");
        bool result = cobj->isScheduled(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getDisplayedColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getDisplayedColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color3B& result = cobj->getDisplayedColor();
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getActionByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getActionByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_getActionByTag : Error processing arguments");
        cocos2d::Action* result = cobj->getActionByTag(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Action>((cocos2d::Action*)result, __jsb_cocos2dx_Action_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setRotationSkewX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setRotationSkewX : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setRotationSkewX : Error processing arguments");
        cobj->setRotationSkewX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setRotationSkewY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setRotationSkewY : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setRotationSkewY : Error processing arguments");
        cobj->setRotationSkewY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setName : Error processing arguments");
        cobj->setName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_update, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_update : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_update : Error processing arguments");
        cobj->update(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getDisplayedOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getDisplayedOpacity : Invalid Native Object");
    if (argc == 0) {
        uint8_t result = cobj->getDisplayedOpacity();
        se::Value jsret;
        ok &= uint8_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getLocalZOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getLocalZOrder : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getLocalZOrder();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScheduler, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getScheduler : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::Scheduler* result = cobj->getScheduler();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Scheduler>((cocos2d::Scheduler*)result, __jsb_cocos2dx_Scheduler_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::Scheduler* result = cobj->getScheduler();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Scheduler>((cocos2d::Scheduler*)result, __jsb_cocos2dx_Scheduler_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPositionNormalized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getPositionNormalized : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPositionNormalized();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getPosition : Invalid Native Object");

    do {
        if (argc == 2) {
            float* arg0 = 0;
            #pragma warning NO CONVERSION TO NATIVE FOR float*
			ok = false;
            if (!ok) { ok = true; break; }
            float* arg1 = 0;
            #pragma warning NO CONVERSION TO NATIVE FOR float*
			ok = false;
            if (!ok) { ok = true; break; }
            cobj->getPosition(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Vec2& result = cobj->getPosition();
            se::Value jsret;
            ok &= Vec2_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isRunning, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isRunning : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isRunning();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getParent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getParent : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::Node* result = cobj->getParent();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::Node* result = cobj->getParent();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getWorldToNodeTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getWorldToNodeTransform : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Mat4 result = cobj->getWorldToNodeTransform();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPositionY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getPositionY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getPositionY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPositionX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getPositionX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getPositionX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeChildByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_removeChildByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChildByTag : Error processing arguments");
        cobj->removeChildByTag(arg0);
    }
    if (argc == 2) {
        int arg0 = 0;
        bool arg1;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_removeChildByTag : Error processing arguments");
        cobj->removeChildByTag(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPositionY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPositionY : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPositionY : Error processing arguments");
        cobj->setPositionY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_updateDisplayedColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_updateDisplayedColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_updateDisplayedColor : Error processing arguments");
        cobj->updateDisplayedColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setVisible, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setVisible : Error processing arguments");
        cobj->setVisible(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getParentToNodeAffineTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getParentToNodeAffineTransform : Invalid Native Object");
    if (argc == 0) {
        cocos2d::AffineTransform result = cobj->getParentToNodeAffineTransform();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getPositionZ, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getPositionZ : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getPositionZ();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setGlobalZOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setGlobalZOrder : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setGlobalZOrder : Error processing arguments");
        cobj->setGlobalZOrder(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setScale, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_setScale : Invalid Native Object");

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getOnExitCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getOnExitCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& result = cobj->getOnExitCallback();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getChildByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getChildByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_getChildByTag : Error processing arguments");
        cocos2d::Node* result = cobj->getChildByTag(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScaleZ, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getScaleZ : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScaleZ();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScaleY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getScaleY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScaleY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScaleX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getScaleX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScaleX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setLocalZOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setLocalZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setLocalZOrder : Error processing arguments");
        cobj->setLocalZOrder(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setCascadeColorEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setCascadeColorEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setCascadeColorEnabled : Error processing arguments");
        cobj->setCascadeColorEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setOpacity : Invalid Native Object");
    if (argc == 1) {
        uint8_t arg0;
        ok &= seval_to_uint8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setOpacity : Error processing arguments");
        cobj->setOpacity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getComponent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getComponent : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_getComponent : Error processing arguments");
        cocos2d::Component* result = cobj->getComponent(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Component>((cocos2d::Component*)result, __jsb_cocos2dx_Component_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getContentSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getContentSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getContentSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_stopAllActionsByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_stopAllActionsByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_stopAllActionsByTag : Error processing arguments");
        cobj->stopAllActionsByTag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getBoundingBox, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getBoundingBox : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getBoundingBox();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setIgnoreAnchorPointForPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setIgnoreAnchorPointForPosition : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setIgnoreAnchorPointForPosition : Error processing arguments");
        cobj->setIgnoreAnchorPointForPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setEventDispatcher, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setEventDispatcher : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventDispatcher* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setEventDispatcher : Error processing arguments");
        cobj->setEventDispatcher(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getGlobalZOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getGlobalZOrder : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getGlobalZOrder();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_draw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_draw : Invalid Native Object");

    do {
        if (argc == 0) {
            cobj->draw();
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Renderer* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            unsigned int arg2 = 0;
            ok &= seval_to_uint32(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->draw(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setUserObject, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setUserObject : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Ref* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setUserObject : Error processing arguments");
        cobj->setUserObject(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_enumerateChildren, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_enumerateChildren : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::function<bool (cocos2d::Node *)> arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        do {
		    if (args[1].isObject() && args[1].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[1]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Node* larg0) -> bool {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)larg0, __jsb_cocos2dx_Node_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		            bool result;
		            ok &= seval_to_boolean(rval, &result);
		            JSB_PRECONDITION2(ok, false, "lambda function : Error processing return value with type bool");
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_enumerateChildren : Error processing arguments");
        cobj->enumerateChildren(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getonExitTransitionDidStartCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getonExitTransitionDidStartCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& result = cobj->getonExitTransitionDidStartCallback();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_removeFromParentAndCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_removeFromParentAndCleanup : Invalid Native Object");

    do {
        if (argc == 1) {
            bool arg0;
            ok &= seval_to_boolean(args[0], &arg0);
            cobj->removeFromParentAndCleanup(arg0);
        }
    } while(0);

    do {
        if (argc == 0) {
            cobj->removeFromParent();
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setPosition3D, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setPosition3D : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setPosition3D : Error processing arguments");
        cobj->setPosition3D(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNumberOfRunningActionsByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getNumberOfRunningActionsByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_getNumberOfRunningActionsByTag : Error processing arguments");
        ssize_t result = cobj->getNumberOfRunningActionsByTag(arg0);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_sortAllChildren, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_sortAllChildren : Invalid Native Object");
    if (argc == 0) {
        cobj->sortAllChildren();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getWorldToNodeAffineTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getWorldToNodeAffineTransform : Invalid Native Object");
    if (argc == 0) {
        cocos2d::AffineTransform result = cobj->getWorldToNodeAffineTransform();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getScale, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getScale : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScale();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getOpacity : Invalid Native Object");
    if (argc == 0) {
        uint8_t result = cobj->getOpacity();
        se::Value jsret;
        ok &= uint8_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_updateOrderOfArrival, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_updateOrderOfArrival : Invalid Native Object");
    if (argc == 0) {
        cobj->updateOrderOfArrival();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getNormalizedPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getNormalizedPosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getNormalizedPosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getParentToNodeTransform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_getParentToNodeTransform : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Mat4& result = cobj->getParentToNodeTransform();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_convertToNodeSpace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_convertToNodeSpace : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_convertToNodeSpace : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToNodeSpace(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setTag : Error processing arguments");
        cobj->setTag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_isCascadeColorEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_isCascadeColorEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isCascadeColorEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_setRotationQuat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_setRotationQuat : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Quaternion arg0;
        ok &= seval_to_Quaternion(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_setRotationQuat : Error processing arguments");
        cobj->setRotationQuat(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_stopAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Node_stopAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Action* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Node_stopAction : Error processing arguments");
        cobj->stopAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_getActionManager, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Node* cobj = (cocos2d::Node*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Node_getActionManager : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::ActionManager* result = cobj->getActionManager();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ActionManager>((cocos2d::ActionManager*)result, __jsb_cocos2dx_ActionManager_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::ActionManager* result = cobj->getActionManager();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ActionManager>((cocos2d::ActionManager*)result, __jsb_cocos2dx_ActionManager_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Node_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Node::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Node_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Node_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Node_constructor, __jsb_cocos2dx_Node_class, js_cocos2dx_Node_finalize)
{
    cocos2d::Node* cobj = new (std::nothrow) cocos2d::Node();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Node_ctor, __jsb_cocos2dx_Node_class, js_cocos2dx_Node_finalize)
{
    cocos2d::Node* cobj = new (std::nothrow) cocos2d::Node();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Node_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Node)", nativeThisObject);
    cocos2d::Node* cobj = (cocos2d::Node*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Node(se::Object* obj)
{
    auto cls = se::Class::create("Node", obj, nullptr, js_cocos2dx_Node_constructor);

    cls->defineFunction("addChild", js_cocos2dx_Node_addChild);
    cls->defineFunction("removeComponent", js_cocos2dx_Node_removeComponent);
    cls->defineFunction("setPhysicsBody", js_cocos2dx_Node_setPhysicsBody);
    cls->defineFunction("getShaderProgram", js_cocos2dx_Node_getGLProgram);
    cls->defineFunction("getDescription", js_cocos2dx_Node_getDescription);
    cls->defineFunction("setOpacityModifyRGB", js_cocos2dx_Node_setOpacityModifyRGB);
    cls->defineFunction("setCascadeOpacityEnabled", js_cocos2dx_Node_setCascadeOpacityEnabled);
    cls->defineFunction("getChildren", js_cocos2dx_Node_getChildren);
    cls->defineFunction("setOnExitCallback", js_cocos2dx_Node_setOnExitCallback);
    cls->defineFunction("setActionManager", js_cocos2dx_Node_setActionManager);
    cls->defineFunction("convertToWorldSpaceAR", js_cocos2dx_Node_convertToWorldSpaceAR);
    cls->defineFunction("isIgnoreAnchorPointForPosition", js_cocos2dx_Node_isIgnoreAnchorPointForPosition);
    cls->defineFunction("getChildByName", js_cocos2dx_Node_getChildByName);
    cls->defineFunction("updateDisplayedOpacity", js_cocos2dx_Node_updateDisplayedOpacity);
    cls->defineFunction("init", js_cocos2dx_Node_init);
    cls->defineFunction("getCameraMask", js_cocos2dx_Node_getCameraMask);
    cls->defineFunction("setRotation", js_cocos2dx_Node_setRotation);
    cls->defineFunction("setScaleZ", js_cocos2dx_Node_setScaleZ);
    cls->defineFunction("setScaleY", js_cocos2dx_Node_setScaleY);
    cls->defineFunction("setScaleX", js_cocos2dx_Node_setScaleX);
    cls->defineFunction("getColor", js_cocos2dx_Node_getColor);
    cls->defineFunction("setonEnterTransitionDidFinishCallback", js_cocos2dx_Node_setonEnterTransitionDidFinishCallback);
    cls->defineFunction("removeAllComponents", js_cocos2dx_Node_removeAllComponents);
    cls->defineFunction("_setLocalZOrder", js_cocos2dx_Node__setLocalZOrder);
    cls->defineFunction("setCameraMask", js_cocos2dx_Node_setCameraMask);
    cls->defineFunction("getTag", js_cocos2dx_Node_getTag);
    cls->defineFunction("getonEnterTransitionDidFinishCallback", js_cocos2dx_Node_getonEnterTransitionDidFinishCallback);
    cls->defineFunction("getNodeToWorldTransform", js_cocos2dx_Node_getNodeToWorldAffineTransform);
    cls->defineFunction("getPosition3D", js_cocos2dx_Node_getPosition3D);
    cls->defineFunction("removeChild", js_cocos2dx_Node_removeChild);
    cls->defineFunction("convertToWorldSpace", js_cocos2dx_Node_convertToWorldSpace);
    cls->defineFunction("getScene", js_cocos2dx_Node_getScene);
    cls->defineFunction("getEventDispatcher", js_cocos2dx_Node_getEventDispatcher);
    cls->defineFunction("setSkewX", js_cocos2dx_Node_setSkewX);
    cls->defineFunction("setGLProgramState", js_cocos2dx_Node_setGLProgramState);
    cls->defineFunction("setOnEnterCallback", js_cocos2dx_Node_setOnEnterCallback);
    cls->defineFunction("stopActionsByFlags", js_cocos2dx_Node_stopActionsByFlags);
    cls->defineFunction("setNormalizedPosition", js_cocos2dx_Node_setNormalizedPosition);
    cls->defineFunction("setonExitTransitionDidStartCallback", js_cocos2dx_Node_setonExitTransitionDidStartCallback);
    cls->defineFunction("convertTouchToNodeSpace", js_cocos2dx_Node_convertTouchToNodeSpace);
    cls->defineFunction("removeAllChildren", js_cocos2dx_Node_removeAllChildrenWithCleanup);
    cls->defineFunction("getRotationX", js_cocos2dx_Node_getRotationSkewX);
    cls->defineFunction("getRotationY", js_cocos2dx_Node_getRotationSkewY);
    cls->defineFunction("getNodeToWorldTransform3D", js_cocos2dx_Node_getNodeToWorldTransform);
    cls->defineFunction("isCascadeOpacityEnabled", js_cocos2dx_Node_isCascadeOpacityEnabled);
    cls->defineFunction("setParent", js_cocos2dx_Node_setParent);
    cls->defineFunction("getName", js_cocos2dx_Node_getName);
    cls->defineFunction("resume", js_cocos2dx_Node_resume);
    cls->defineFunction("getRotation3D", js_cocos2dx_Node_getRotation3D);
    cls->defineFunction("getNodeToParentTransform", js_cocos2dx_Node_getNodeToParentAffineTransform);
    cls->defineFunction("convertTouchToNodeSpaceAR", js_cocos2dx_Node_convertTouchToNodeSpaceAR);
    cls->defineFunction("getOnEnterCallback", js_cocos2dx_Node_getOnEnterCallback);
    cls->defineFunction("setPositionNormalized", js_cocos2dx_Node_setPositionNormalized);
    cls->defineFunction("pause", js_cocos2dx_Node_pause);
    cls->defineFunction("isOpacityModifyRGB", js_cocos2dx_Node_isOpacityModifyRGB);
    cls->defineFunction("stopActionByTag", js_cocos2dx_Node_stopActionByTag);
    cls->defineFunction("reorderChild", js_cocos2dx_Node_reorderChild);
    cls->defineFunction("setSkewY", js_cocos2dx_Node_setSkewY);
    cls->defineFunction("setColor", js_cocos2dx_Node_setColor);
    cls->defineFunction("setRotation3D", js_cocos2dx_Node_setRotation3D);
    cls->defineFunction("setPositionX", js_cocos2dx_Node_setPositionX);
    cls->defineFunction("setNodeToParentTransform", js_cocos2dx_Node_setNodeToParentTransform);
    cls->defineFunction("getAnchorPoint", js_cocos2dx_Node_getAnchorPoint);
    cls->defineFunction("getNumberOfRunningActions", js_cocos2dx_Node_getNumberOfRunningActions);
    cls->defineFunction("updateTransform", js_cocos2dx_Node_updateTransform);
    cls->defineFunction("isVisible", js_cocos2dx_Node_isVisible);
    cls->defineFunction("getChildrenCount", js_cocos2dx_Node_getChildrenCount);
    cls->defineFunction("getNodeToParentTransform3D", js_cocos2dx_Node_getNodeToParentTransform);
    cls->defineFunction("convertToNodeSpaceAR", js_cocos2dx_Node_convertToNodeSpaceAR);
    cls->defineFunction("addComponent", js_cocos2dx_Node_addComponent);
    cls->defineFunction("runAction", js_cocos2dx_Node_runAction);
    cls->defineFunction("visit", js_cocos2dx_Node_visit);
    cls->defineFunction("setShaderProgram", js_cocos2dx_Node_setGLProgram);
    cls->defineFunction("getRotation", js_cocos2dx_Node_getRotation);
    cls->defineFunction("getAnchorPointInPoints", js_cocos2dx_Node_getAnchorPointInPoints);
    cls->defineFunction("getRotationQuat", js_cocos2dx_Node_getRotationQuat);
    cls->defineFunction("removeChildByName", js_cocos2dx_Node_removeChildByName);
    cls->defineFunction("setVertexZ", js_cocos2dx_Node_setPositionZ);
    cls->defineFunction("getGLProgramState", js_cocos2dx_Node_getGLProgramState);
    cls->defineFunction("setScheduler", js_cocos2dx_Node_setScheduler);
    cls->defineFunction("stopAllActions", js_cocos2dx_Node_stopAllActions);
    cls->defineFunction("getSkewX", js_cocos2dx_Node_getSkewX);
    cls->defineFunction("getSkewY", js_cocos2dx_Node_getSkewY);
    cls->defineFunction("isScheduled", js_cocos2dx_Node_isScheduled);
    cls->defineFunction("getDisplayedColor", js_cocos2dx_Node_getDisplayedColor);
    cls->defineFunction("getActionByTag", js_cocos2dx_Node_getActionByTag);
    cls->defineFunction("setRotationX", js_cocos2dx_Node_setRotationSkewX);
    cls->defineFunction("setRotationY", js_cocos2dx_Node_setRotationSkewY);
    cls->defineFunction("setName", js_cocos2dx_Node_setName);
    cls->defineFunction("update", js_cocos2dx_Node_update);
    cls->defineFunction("getDisplayedOpacity", js_cocos2dx_Node_getDisplayedOpacity);
    cls->defineFunction("getLocalZOrder", js_cocos2dx_Node_getLocalZOrder);
    cls->defineFunction("getScheduler", js_cocos2dx_Node_getScheduler);
    cls->defineFunction("getPositionNormalized", js_cocos2dx_Node_getPositionNormalized);
    cls->defineFunction("getPosition", js_cocos2dx_Node_getPosition);
    cls->defineFunction("isRunning", js_cocos2dx_Node_isRunning);
    cls->defineFunction("getParent", js_cocos2dx_Node_getParent);
    cls->defineFunction("getWorldToNodeTransform3D", js_cocos2dx_Node_getWorldToNodeTransform);
    cls->defineFunction("getPositionY", js_cocos2dx_Node_getPositionY);
    cls->defineFunction("getPositionX", js_cocos2dx_Node_getPositionX);
    cls->defineFunction("removeChildByTag", js_cocos2dx_Node_removeChildByTag);
    cls->defineFunction("setPositionY", js_cocos2dx_Node_setPositionY);
    cls->defineFunction("updateDisplayedColor", js_cocos2dx_Node_updateDisplayedColor);
    cls->defineFunction("setVisible", js_cocos2dx_Node_setVisible);
    cls->defineFunction("getParentToNodeTransform", js_cocos2dx_Node_getParentToNodeAffineTransform);
    cls->defineFunction("getVertexZ", js_cocos2dx_Node_getPositionZ);
    cls->defineFunction("setGlobalZOrder", js_cocos2dx_Node_setGlobalZOrder);
    cls->defineFunction("setScale", js_cocos2dx_Node_setScale);
    cls->defineFunction("getOnExitCallback", js_cocos2dx_Node_getOnExitCallback);
    cls->defineFunction("getChildByTag", js_cocos2dx_Node_getChildByTag);
    cls->defineFunction("getScaleZ", js_cocos2dx_Node_getScaleZ);
    cls->defineFunction("getScaleY", js_cocos2dx_Node_getScaleY);
    cls->defineFunction("getScaleX", js_cocos2dx_Node_getScaleX);
    cls->defineFunction("setLocalZOrder", js_cocos2dx_Node_setLocalZOrder);
    cls->defineFunction("setCascadeColorEnabled", js_cocos2dx_Node_setCascadeColorEnabled);
    cls->defineFunction("setOpacity", js_cocos2dx_Node_setOpacity);
    cls->defineFunction("getComponent", js_cocos2dx_Node_getComponent);
    cls->defineFunction("getContentSize", js_cocos2dx_Node_getContentSize);
    cls->defineFunction("stopAllActionsByTag", js_cocos2dx_Node_stopAllActionsByTag);
    cls->defineFunction("getBoundingBox", js_cocos2dx_Node_getBoundingBox);
    cls->defineFunction("setIgnoreAnchorPointForPosition", js_cocos2dx_Node_setIgnoreAnchorPointForPosition);
    cls->defineFunction("setEventDispatcher", js_cocos2dx_Node_setEventDispatcher);
    cls->defineFunction("getGlobalZOrder", js_cocos2dx_Node_getGlobalZOrder);
    cls->defineFunction("draw", js_cocos2dx_Node_draw);
    cls->defineFunction("setUserObject", js_cocos2dx_Node_setUserObject);
    cls->defineFunction("enumerateChildren", js_cocos2dx_Node_enumerateChildren);
    cls->defineFunction("getonExitTransitionDidStartCallback", js_cocos2dx_Node_getonExitTransitionDidStartCallback);
    cls->defineFunction("removeFromParent", js_cocos2dx_Node_removeFromParentAndCleanup);
    cls->defineFunction("setPosition3D", js_cocos2dx_Node_setPosition3D);
    cls->defineFunction("getNumberOfRunningActionsByTag", js_cocos2dx_Node_getNumberOfRunningActionsByTag);
    cls->defineFunction("sortAllChildren", js_cocos2dx_Node_sortAllChildren);
    cls->defineFunction("getWorldToNodeTransform", js_cocos2dx_Node_getWorldToNodeAffineTransform);
    cls->defineFunction("getScale", js_cocos2dx_Node_getScale);
    cls->defineFunction("getOpacity", js_cocos2dx_Node_getOpacity);
    cls->defineFunction("updateOrderOfArrival", js_cocos2dx_Node_updateOrderOfArrival);
    cls->defineFunction("getNormalizedPosition", js_cocos2dx_Node_getNormalizedPosition);
    cls->defineFunction("getParentToNodeTransform3D", js_cocos2dx_Node_getParentToNodeTransform);
    cls->defineFunction("convertToNodeSpace", js_cocos2dx_Node_convertToNodeSpace);
    cls->defineFunction("setTag", js_cocos2dx_Node_setTag);
    cls->defineFunction("isCascadeColorEnabled", js_cocos2dx_Node_isCascadeColorEnabled);
    cls->defineFunction("setRotationQuat", js_cocos2dx_Node_setRotationQuat);
    cls->defineFunction("stopAction", js_cocos2dx_Node_stopAction);
    cls->defineFunction("getActionManager", js_cocos2dx_Node_getActionManager);
    cls->defineFunction("ctor", js_cocos2dx_Node_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Node_create);
    cls->defineFinalizedFunction(js_cocos2dx_Node_finalize);
    cls->install();

    __jsb_cocos2dx_Node_proto = cls->getProto();
    __jsb_cocos2dx_Node_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Node.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx___NodeRGBA_proto = nullptr;
se::Class* __jsb_cocos2dx___NodeRGBA_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx___NodeRGBA_finalize)

SE_CTOR_BEGIN(js_cocos2dx___NodeRGBA_constructor, __jsb_cocos2dx___NodeRGBA_class, js_cocos2dx___NodeRGBA_finalize)
{
    cocos2d::__NodeRGBA* cobj = new (std::nothrow) cocos2d::__NodeRGBA();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx___NodeRGBA_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::__NodeRGBA)", nativeThisObject);
    cocos2d::__NodeRGBA* cobj = (cocos2d::__NodeRGBA*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx___NodeRGBA(se::Object* obj)
{
    auto cls = se::Class::create("__NodeRGBA", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx___NodeRGBA_constructor);

    cls->defineFinalizedFunction(js_cocos2dx___NodeRGBA_finalize);
    cls->install();

    __jsb_cocos2dx___NodeRGBA_proto = cls->getProto();
    __jsb_cocos2dx___NodeRGBA_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Scene_proto = nullptr;
se::Class* __jsb_cocos2dx_Scene_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Scene_setCameraOrderDirty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scene_setCameraOrderDirty : Invalid Native Object");
    if (argc == 0) {
        cobj->setCameraOrderDirty();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_render, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Scene_render : Invalid Native Object");

    do {
        if (argc == 4) {
            cocos2d::Renderer* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            const cocos2d::Mat4* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Mat4* arg2 = nullptr;
            ok &= seval_to_native_ptr(args[2], &arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cobj->render(arg0, arg1, arg2, arg3);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::Renderer* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->render(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Renderer* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Mat4* arg2 = nullptr;
            ok &= seval_to_native_ptr(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->render(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_stepPhysicsAndNavigation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scene_stepPhysicsAndNavigation : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scene_stepPhysicsAndNavigation : Error processing arguments");
        cobj->stepPhysicsAndNavigation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_onProjectionChanged, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scene_onProjectionChanged : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventCustom* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scene_onProjectionChanged : Error processing arguments");
        cobj->onProjectionChanged(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_initWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scene_initWithSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scene_initWithSize : Error processing arguments");
        bool result = cobj->initWithSize(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_getDefaultCamera, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scene_getDefaultCamera : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Camera* result = cobj->getDefaultCamera();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Camera>((cocos2d::Camera*)result, __jsb_cocos2dx_Camera_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_createWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scene_createWithSize : Error processing arguments");
        auto result = cocos2d::Scene::createWithSize(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Scene_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scene_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Scene::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Scene_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Scene_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Scene_constructor, __jsb_cocos2dx_Scene_class, js_cocos2dx_Scene_finalize)
{
    cocos2d::Scene* cobj = new (std::nothrow) cocos2d::Scene();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Scene_ctor, __jsb_cocos2dx_Scene_class, js_cocos2dx_Scene_finalize)
{
    cocos2d::Scene* cobj = new (std::nothrow) cocos2d::Scene();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Scene_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Scene)", nativeThisObject);
    cocos2d::Scene* cobj = (cocos2d::Scene*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Scene(se::Object* obj)
{
    auto cls = se::Class::create("Scene", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_Scene_constructor);

    cls->defineFunction("setCameraOrderDirty", js_cocos2dx_Scene_setCameraOrderDirty);
    cls->defineFunction("render", js_cocos2dx_Scene_render);
    cls->defineFunction("stepPhysicsAndNavigation", js_cocos2dx_Scene_stepPhysicsAndNavigation);
    cls->defineFunction("onProjectionChanged", js_cocos2dx_Scene_onProjectionChanged);
    cls->defineFunction("initWithSize", js_cocos2dx_Scene_initWithSize);
    cls->defineFunction("getDefaultCamera", js_cocos2dx_Scene_getDefaultCamera);
    cls->defineFunction("ctor", js_cocos2dx_Scene_ctor);
    cls->defineStaticFunction("createWithSize", js_cocos2dx_Scene_createWithSize);
    cls->defineStaticFunction("create", js_cocos2dx_Scene_create);
    cls->defineFinalizedFunction(js_cocos2dx_Scene_finalize);
    cls->install();

    __jsb_cocos2dx_Scene_proto = cls->getProto();
    __jsb_cocos2dx_Scene_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Scene.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_GLView_proto = nullptr;
se::Class* __jsb_cocos2dx_GLView_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GLView_setFrameSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setFrameSize : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setFrameSize : Error processing arguments");
        cobj->setFrameSize(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getViewPortRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getViewPortRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getViewPortRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setContentScaleFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setContentScaleFactor : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setContentScaleFactor : Error processing arguments");
        bool result = cobj->setContentScaleFactor(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getContentScaleFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getContentScaleFactor : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getContentScaleFactor();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setIMEKeyboardState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setIMEKeyboardState : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setIMEKeyboardState : Error processing arguments");
        cobj->setIMEKeyboardState(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setScissorInPoints, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setScissorInPoints : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setScissorInPoints : Error processing arguments");
        cobj->setScissorInPoints(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getViewName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getViewName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getViewName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_isOpenGLReady, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_isOpenGLReady : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isOpenGLReady();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setCursorVisible, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setCursorVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setCursorVisible : Error processing arguments");
        cobj->setCursorVisible(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getScaleY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getScaleY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScaleY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getScaleX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getScaleX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScaleX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getVisibleOrigin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getVisibleOrigin : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getVisibleOrigin();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getFrameSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getFrameSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getFrameSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setFrameZoomFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setFrameZoomFactor : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setFrameZoomFactor : Error processing arguments");
        cobj->setFrameZoomFactor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getFrameZoomFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getFrameZoomFactor : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getFrameZoomFactor();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getDesignResolutionSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getDesignResolutionSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getDesignResolutionSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_windowShouldClose, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_windowShouldClose : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->windowShouldClose();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setDesignResolutionSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setDesignResolutionSize : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        ResolutionPolicy arg2;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setDesignResolutionSize : Error processing arguments");
        cobj->setDesignResolutionSize(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getResolutionPolicy, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getResolutionPolicy : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getResolutionPolicy();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_isRetinaDisplay, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_isRetinaDisplay : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isRetinaDisplay();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_renderScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_renderScene : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Scene* arg0 = nullptr;
        cocos2d::Renderer* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_renderScene : Error processing arguments");
        cobj->renderScene(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setVR, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setVR : Invalid Native Object");
    if (argc == 1) {
        cocos2d::VRIRenderer* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setVR : Error processing arguments");
        cobj->setVR(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setViewPortInPoints, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setViewPortInPoints : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setViewPortInPoints : Error processing arguments");
        cobj->setViewPortInPoints(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getScissorRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getScissorRect : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getScissorRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getRetinaFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getRetinaFactor : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getRetinaFactor();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setViewName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_setViewName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setViewName : Error processing arguments");
        cobj->setViewName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getVisibleRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getVisibleRect : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getVisibleRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getVisibleSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_getVisibleSize : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Size result = cobj->getVisibleSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_isScissorEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_isScissorEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isScissorEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_pollEvents, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLView* cobj = (cocos2d::GLView*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLView_pollEvents : Invalid Native Object");
    if (argc == 0) {
        cobj->pollEvents();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_setGLContextAttrs, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        GLContextAttrs arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR GLContextAttrs
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLView_setGLContextAttrs : Error processing arguments");
        cocos2d::GLView::setGLContextAttrs(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLView_getGLContextAttrs, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        GLContextAttrs result = cocos2d::GLView::getGLContextAttrs();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR GLContextAttrs;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_GLView(se::Object* obj)
{
    auto cls = se::Class::create("GLView", obj, nullptr, nullptr);

    cls->defineFunction("setFrameSize", js_cocos2dx_GLView_setFrameSize);
    cls->defineFunction("getViewPortRect", js_cocos2dx_GLView_getViewPortRect);
    cls->defineFunction("setContentScaleFactor", js_cocos2dx_GLView_setContentScaleFactor);
    cls->defineFunction("getContentScaleFactor", js_cocos2dx_GLView_getContentScaleFactor);
    cls->defineFunction("setIMEKeyboardState", js_cocos2dx_GLView_setIMEKeyboardState);
    cls->defineFunction("setScissorInPoints", js_cocos2dx_GLView_setScissorInPoints);
    cls->defineFunction("getViewName", js_cocos2dx_GLView_getViewName);
    cls->defineFunction("isOpenGLReady", js_cocos2dx_GLView_isOpenGLReady);
    cls->defineFunction("setCursorVisible", js_cocos2dx_GLView_setCursorVisible);
    cls->defineFunction("getScaleY", js_cocos2dx_GLView_getScaleY);
    cls->defineFunction("getScaleX", js_cocos2dx_GLView_getScaleX);
    cls->defineFunction("getVisibleOrigin", js_cocos2dx_GLView_getVisibleOrigin);
    cls->defineFunction("getFrameSize", js_cocos2dx_GLView_getFrameSize);
    cls->defineFunction("setFrameZoomFactor", js_cocos2dx_GLView_setFrameZoomFactor);
    cls->defineFunction("getFrameZoomFactor", js_cocos2dx_GLView_getFrameZoomFactor);
    cls->defineFunction("getDesignResolutionSize", js_cocos2dx_GLView_getDesignResolutionSize);
    cls->defineFunction("windowShouldClose", js_cocos2dx_GLView_windowShouldClose);
    cls->defineFunction("setDesignResolutionSize", js_cocos2dx_GLView_setDesignResolutionSize);
    cls->defineFunction("getResolutionPolicy", js_cocos2dx_GLView_getResolutionPolicy);
    cls->defineFunction("isRetinaDisplay", js_cocos2dx_GLView_isRetinaDisplay);
    cls->defineFunction("renderScene", js_cocos2dx_GLView_renderScene);
    cls->defineFunction("setVR", js_cocos2dx_GLView_setVR);
    cls->defineFunction("setViewPortInPoints", js_cocos2dx_GLView_setViewPortInPoints);
    cls->defineFunction("getScissorRect", js_cocos2dx_GLView_getScissorRect);
    cls->defineFunction("getRetinaFactor", js_cocos2dx_GLView_getRetinaFactor);
    cls->defineFunction("setViewName", js_cocos2dx_GLView_setViewName);
    cls->defineFunction("getVisibleRect", js_cocos2dx_GLView_getVisibleRect);
    cls->defineFunction("getVisibleSize", js_cocos2dx_GLView_getVisibleSize);
    cls->defineFunction("isScissorEnabled", js_cocos2dx_GLView_isScissorEnabled);
    cls->defineFunction("pollEvents", js_cocos2dx_GLView_pollEvents);
    cls->defineStaticFunction("setGLContextAttrs", js_cocos2dx_GLView_setGLContextAttrs);
    cls->defineStaticFunction("getGLContextAttrs", js_cocos2dx_GLView_getGLContextAttrs);
    cls->install();

    __jsb_cocos2dx_GLView_proto = cls->getProto();
    __jsb_cocos2dx_GLView_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Director_proto = nullptr;
se::Class* __jsb_cocos2dx_Director_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Director_pause, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_pushProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_pushProjectionMatrix : Invalid Native Object");
    if (argc == 1) {
        unsigned long arg0 = 0;
        ok &= seval_to_ulong(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_pushProjectionMatrix : Error processing arguments");
        cobj->pushProjectionMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_popProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_popProjectionMatrix : Invalid Native Object");
    if (argc == 1) {
        unsigned long arg0 = 0;
        ok &= seval_to_ulong(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_popProjectionMatrix : Error processing arguments");
        cobj->popProjectionMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setEventDispatcher, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setEventDispatcher : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventDispatcher* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setEventDispatcher : Error processing arguments");
        cobj->setEventDispatcher(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_loadProjectionIdentityMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_loadProjectionIdentityMatrix : Invalid Native Object");
    if (argc == 1) {
        unsigned long arg0 = 0;
        ok &= seval_to_ulong(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_loadProjectionIdentityMatrix : Error processing arguments");
        cobj->loadProjectionIdentityMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setContentScaleFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setContentScaleFactor : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setContentScaleFactor : Error processing arguments");
        cobj->setContentScaleFactor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getContentScaleFactor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getContentScaleFactor : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getContentScaleFactor();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getWinSizeInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getWinSizeInPixels : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Size result = cobj->getWinSizeInPixels();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getDeltaTime, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getDeltaTime : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDeltaTime();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setGLDefaultValues, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setGLDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setGLDefaultValues();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setActionManager, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setActionManager : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionManager* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setActionManager : Error processing arguments");
        cobj->setActionManager(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setAlphaBlending, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setAlphaBlending : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setAlphaBlending : Error processing arguments");
        cobj->setAlphaBlending(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_popToRootScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_popToRootScene : Invalid Native Object");
    if (argc == 0) {
        cobj->popToRootScene();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_loadMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_loadMatrix : Invalid Native Object");
    if (argc == 2) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        cocos2d::Mat4 arg1;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_Mat4(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_loadMatrix : Error processing arguments");
        cobj->loadMatrix(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getNotificationNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getNotificationNode : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getNotificationNode();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getWinSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getWinSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getWinSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_end, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_end : Invalid Native Object");
    if (argc == 0) {
        cobj->end();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getTextureCache, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getTextureCache : Invalid Native Object");
    if (argc == 0) {
        cocos2d::TextureCache* result = cobj->getTextureCache();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::TextureCache>((cocos2d::TextureCache*)result, __jsb_cocos2dx_TextureCache_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_isSendCleanupToScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_isSendCleanupToScene : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isSendCleanupToScene();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getVisibleOrigin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getVisibleOrigin : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getVisibleOrigin();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_mainLoop, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_mainLoop : Invalid Native Object");
    if (argc == 0) {
        cobj->mainLoop();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setDepthTest, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setDepthTest : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setDepthTest : Error processing arguments");
        cobj->setDepthTest(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getFrameRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getFrameRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getFrameRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getSecondsPerFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getSecondsPerFrame : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSecondsPerFrame();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_resetMatrixStack, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_resetMatrixStack : Invalid Native Object");
    if (argc == 0) {
        cobj->resetMatrixStack();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_convertToUI, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_convertToUI : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_convertToUI : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToUI(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_pushMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_pushMatrix : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_pushMatrix : Error processing arguments");
        cobj->pushMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setDefaultValues, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setDefaultValues();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setScheduler, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setScheduler : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scheduler* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setScheduler : Error processing arguments");
        cobj->setScheduler(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_multiplyProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_multiplyProjectionMatrix : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Mat4 arg0;
        unsigned long arg1 = 0;
        ok &= seval_to_Mat4(args[0], &arg0);
        ok &= seval_to_ulong(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_multiplyProjectionMatrix : Error processing arguments");
        cobj->multiplyProjectionMatrix(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getMatrix : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_getMatrix : Error processing arguments");
        const cocos2d::Mat4& result = cobj->getMatrix(arg0);
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_isValid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_isValid : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isValid();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_startAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_startAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimation();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getOpenGLView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getOpenGLView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLView* result = cobj->getOpenGLView();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLView>((cocos2d::GLView*)result, __jsb_cocos2dx_GLView_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getRunningScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getRunningScene : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Scene* result = cobj->getRunningScene();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Scene>((cocos2d::Scene*)result, __jsb_cocos2dx_Scene_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setViewport : Invalid Native Object");
    if (argc == 0) {
        cobj->setViewport();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_stopAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_stopAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimation();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_popToSceneStackLevel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_popToSceneStackLevel : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_popToSceneStackLevel : Error processing arguments");
        cobj->popToSceneStackLevel(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_resume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_resume : Invalid Native Object");
    if (argc == 0) {
        cobj->resume();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_isNextDeltaTimeZero, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_isNextDeltaTimeZero : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isNextDeltaTimeZero();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setClearColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setClearColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setClearColor : Error processing arguments");
        cobj->setClearColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setOpenGLView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setOpenGLView : Invalid Native Object");
    if (argc == 1) {
        cocos2d::GLView* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setOpenGLView : Error processing arguments");
        cobj->setOpenGLView(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_convertToGL, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_convertToGL : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_convertToGL : Error processing arguments");
        cocos2d::Vec2 result = cobj->convertToGL(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_purgeCachedData, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_purgeCachedData : Invalid Native Object");
    if (argc == 0) {
        cobj->purgeCachedData();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getTotalFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getTotalFrames : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getTotalFrames();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_runWithScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_runWithScene : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scene* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_runWithScene : Error processing arguments");
        cobj->runWithScene(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setNotificationNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setNotificationNode : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setNotificationNode : Error processing arguments");
        cobj->setNotificationNode(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_drawScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_drawScene : Invalid Native Object");
    if (argc == 0) {
        cobj->drawScene();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_restart, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_restart : Invalid Native Object");
    if (argc == 0) {
        cobj->restart();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_popScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_popScene : Invalid Native Object");
    if (argc == 0) {
        cobj->popScene();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_loadIdentityMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_loadIdentityMatrix : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_loadIdentityMatrix : Error processing arguments");
        cobj->loadIdentityMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_isDisplayStats, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_isDisplayStats : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isDisplayStats();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setProjection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setProjection : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Director::Projection arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setProjection : Error processing arguments");
        cobj->setProjection(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_multiplyMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_multiplyMatrix : Invalid Native Object");
    if (argc == 2) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        cocos2d::Mat4 arg1;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_Mat4(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_multiplyMatrix : Error processing arguments");
        cobj->multiplyMatrix(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getZEye, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getZEye : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getZEye();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setNextDeltaTimeZero, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setNextDeltaTimeZero : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setNextDeltaTimeZero : Error processing arguments");
        cobj->setNextDeltaTimeZero(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_popMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_popMatrix : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MATRIX_STACK_TYPE arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_popMatrix : Error processing arguments");
        cobj->popMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getVisibleSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getVisibleSize : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Size result = cobj->getVisibleSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_loadProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_loadProjectionMatrix : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Mat4 arg0;
        unsigned long arg1 = 0;
        ok &= seval_to_Mat4(args[0], &arg0);
        ok &= seval_to_ulong(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_loadProjectionMatrix : Error processing arguments");
        cobj->loadProjectionMatrix(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_initProjectionMatrixStack, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_initProjectionMatrixStack : Invalid Native Object");
    if (argc == 1) {
        unsigned long arg0 = 0;
        ok &= seval_to_ulong(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_initProjectionMatrixStack : Error processing arguments");
        cobj->initProjectionMatrixStack(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getScheduler, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getScheduler : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Scheduler* result = cobj->getScheduler();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Scheduler>((cocos2d::Scheduler*)result, __jsb_cocos2dx_Scheduler_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_pushScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_pushScene : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scene* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_pushScene : Error processing arguments");
        cobj->pushScene(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getAnimationInterval, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getAnimationInterval : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAnimationInterval();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_isPaused, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_isPaused : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isPaused();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setDisplayStats, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setDisplayStats : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setDisplayStats : Error processing arguments");
        cobj->setDisplayStats(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getEventDispatcher, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getEventDispatcher : Invalid Native Object");
    if (argc == 0) {
        cocos2d::EventDispatcher* result = cobj->getEventDispatcher();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::EventDispatcher>((cocos2d::EventDispatcher*)result, __jsb_cocos2dx_EventDispatcher_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_replaceScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_replaceScene : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scene* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_replaceScene : Error processing arguments");
        cobj->replaceScene(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_setAnimationInterval, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_setAnimationInterval : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Director_setAnimationInterval : Error processing arguments");
        cobj->setAnimationInterval(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getActionManager, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Director* cobj = (cocos2d::Director*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Director_getActionManager : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionManager* result = cobj->getActionManager();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionManager>((cocos2d::ActionManager*)result, __jsb_cocos2dx_ActionManager_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Director_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Director::getInstance();
        se::Object* obj = nullptr;
        if (result->_scriptObject == nullptr)
        {
            obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Director_class, true);
            obj->setPrivateData(result);
            result->_scriptObject = obj;
        }
        else
        {
            obj = se::Object::getObjectWithPtr(result);
        }
        assert(obj);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Director(se::Object* obj)
{
    auto cls = se::Class::create("Director", obj, nullptr, nullptr);

    cls->defineFunction("pause", js_cocos2dx_Director_pause);
    cls->defineFunction("pushProjectionMatrix", js_cocos2dx_Director_pushProjectionMatrix);
    cls->defineFunction("popProjectionMatrix", js_cocos2dx_Director_popProjectionMatrix);
    cls->defineFunction("setEventDispatcher", js_cocos2dx_Director_setEventDispatcher);
    cls->defineFunction("loadProjectionIdentityMatrix", js_cocos2dx_Director_loadProjectionIdentityMatrix);
    cls->defineFunction("setContentScaleFactor", js_cocos2dx_Director_setContentScaleFactor);
    cls->defineFunction("getContentScaleFactor", js_cocos2dx_Director_getContentScaleFactor);
    cls->defineFunction("getWinSizeInPixels", js_cocos2dx_Director_getWinSizeInPixels);
    cls->defineFunction("getDeltaTime", js_cocos2dx_Director_getDeltaTime);
    cls->defineFunction("setGLDefaultValues", js_cocos2dx_Director_setGLDefaultValues);
    cls->defineFunction("setActionManager", js_cocos2dx_Director_setActionManager);
    cls->defineFunction("setAlphaBlending", js_cocos2dx_Director_setAlphaBlending);
    cls->defineFunction("popToRootScene", js_cocos2dx_Director_popToRootScene);
    cls->defineFunction("loadMatrix", js_cocos2dx_Director_loadMatrix);
    cls->defineFunction("getNotificationNode", js_cocos2dx_Director_getNotificationNode);
    cls->defineFunction("getWinSize", js_cocos2dx_Director_getWinSize);
    cls->defineFunction("end", js_cocos2dx_Director_end);
    cls->defineFunction("getTextureCache", js_cocos2dx_Director_getTextureCache);
    cls->defineFunction("isSendCleanupToScene", js_cocos2dx_Director_isSendCleanupToScene);
    cls->defineFunction("getVisibleOrigin", js_cocos2dx_Director_getVisibleOrigin);
    cls->defineFunction("mainLoop", js_cocos2dx_Director_mainLoop);
    cls->defineFunction("setDepthTest", js_cocos2dx_Director_setDepthTest);
    cls->defineFunction("getFrameRate", js_cocos2dx_Director_getFrameRate);
    cls->defineFunction("getSecondsPerFrame", js_cocos2dx_Director_getSecondsPerFrame);
    cls->defineFunction("resetMatrixStack", js_cocos2dx_Director_resetMatrixStack);
    cls->defineFunction("convertToUI", js_cocos2dx_Director_convertToUI);
    cls->defineFunction("pushMatrix", js_cocos2dx_Director_pushMatrix);
    cls->defineFunction("setDefaultValues", js_cocos2dx_Director_setDefaultValues);
    cls->defineFunction("init", js_cocos2dx_Director_init);
    cls->defineFunction("setScheduler", js_cocos2dx_Director_setScheduler);
    cls->defineFunction("multiplyProjectionMatrix", js_cocos2dx_Director_multiplyProjectionMatrix);
    cls->defineFunction("getMatrix", js_cocos2dx_Director_getMatrix);
    cls->defineFunction("isValid", js_cocos2dx_Director_isValid);
    cls->defineFunction("startAnimation", js_cocos2dx_Director_startAnimation);
    cls->defineFunction("getOpenGLView", js_cocos2dx_Director_getOpenGLView);
    cls->defineFunction("getRunningScene", js_cocos2dx_Director_getRunningScene);
    cls->defineFunction("setViewport", js_cocos2dx_Director_setViewport);
    cls->defineFunction("stopAnimation", js_cocos2dx_Director_stopAnimation);
    cls->defineFunction("popToSceneStackLevel", js_cocos2dx_Director_popToSceneStackLevel);
    cls->defineFunction("resume", js_cocos2dx_Director_resume);
    cls->defineFunction("isNextDeltaTimeZero", js_cocos2dx_Director_isNextDeltaTimeZero);
    cls->defineFunction("setClearColor", js_cocos2dx_Director_setClearColor);
    cls->defineFunction("setOpenGLView", js_cocos2dx_Director_setOpenGLView);
    cls->defineFunction("convertToGL", js_cocos2dx_Director_convertToGL);
    cls->defineFunction("purgeCachedData", js_cocos2dx_Director_purgeCachedData);
    cls->defineFunction("getTotalFrames", js_cocos2dx_Director_getTotalFrames);
    cls->defineFunction("runWithScene", js_cocos2dx_Director_runWithScene);
    cls->defineFunction("setNotificationNode", js_cocos2dx_Director_setNotificationNode);
    cls->defineFunction("drawScene", js_cocos2dx_Director_drawScene);
    cls->defineFunction("restart", js_cocos2dx_Director_restart);
    cls->defineFunction("popScene", js_cocos2dx_Director_popScene);
    cls->defineFunction("loadIdentityMatrix", js_cocos2dx_Director_loadIdentityMatrix);
    cls->defineFunction("isDisplayStats", js_cocos2dx_Director_isDisplayStats);
    cls->defineFunction("setProjection", js_cocos2dx_Director_setProjection);
    cls->defineFunction("multiplyMatrix", js_cocos2dx_Director_multiplyMatrix);
    cls->defineFunction("getZEye", js_cocos2dx_Director_getZEye);
    cls->defineFunction("setNextDeltaTimeZero", js_cocos2dx_Director_setNextDeltaTimeZero);
    cls->defineFunction("popMatrix", js_cocos2dx_Director_popMatrix);
    cls->defineFunction("getVisibleSize", js_cocos2dx_Director_getVisibleSize);
    cls->defineFunction("loadProjectionMatrix", js_cocos2dx_Director_loadProjectionMatrix);
    cls->defineFunction("initProjectionMatrixStack", js_cocos2dx_Director_initProjectionMatrixStack);
    cls->defineFunction("getScheduler", js_cocos2dx_Director_getScheduler);
    cls->defineFunction("pushScene", js_cocos2dx_Director_pushScene);
    cls->defineFunction("getAnimationInterval", js_cocos2dx_Director_getAnimationInterval);
    cls->defineFunction("isPaused", js_cocos2dx_Director_isPaused);
    cls->defineFunction("setDisplayStats", js_cocos2dx_Director_setDisplayStats);
    cls->defineFunction("getEventDispatcher", js_cocos2dx_Director_getEventDispatcher);
    cls->defineFunction("replaceScene", js_cocos2dx_Director_replaceScene);
    cls->defineFunction("setAnimationInterval", js_cocos2dx_Director_setAnimationInterval);
    cls->defineFunction("getActionManager", js_cocos2dx_Director_getActionManager);
    cls->defineStaticFunction("getInstance", js_cocos2dx_Director_getInstance);
    cls->install();

    __jsb_cocos2dx_Director_proto = cls->getProto();
    __jsb_cocos2dx_Director_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Scheduler_proto = nullptr;
se::Class* __jsb_cocos2dx_Scheduler_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_setTimeScale, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_setTimeScale : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scheduler_setTimeScale : Error processing arguments");
        cobj->setTimeScale(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_unscheduleAllWithMinPriority, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_unscheduleAllWithMinPriority : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scheduler_unscheduleAllWithMinPriority : Error processing arguments");
        cobj->unscheduleAllWithMinPriority(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_update, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_update : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scheduler_update : Error processing arguments");
        cobj->update(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_unscheduleScriptEntry, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_unscheduleScriptEntry : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scheduler_unscheduleScriptEntry : Error processing arguments");
        cobj->unscheduleScriptEntry(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_performFunctionInCocosThread, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_performFunctionInCocosThread : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=]() -> void {
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(se::EmptyValueArray, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Scheduler_performFunctionInCocosThread : Error processing arguments");
        cobj->performFunctionInCocosThread(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_removeAllFunctionsToBePerformedInCocosThread, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_removeAllFunctionsToBePerformedInCocosThread : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllFunctionsToBePerformedInCocosThread();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_unscheduleAll, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_unscheduleAll : Invalid Native Object");
    if (argc == 0) {
        cobj->unscheduleAll();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Scheduler_getTimeScale, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Scheduler_getTimeScale : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getTimeScale();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Scheduler_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Scheduler_constructor, __jsb_cocos2dx_Scheduler_class, js_cocos2dx_Scheduler_finalize)
{
    cocos2d::Scheduler* cobj = new (std::nothrow) cocos2d::Scheduler();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Scheduler_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Scheduler)", nativeThisObject);
    cocos2d::Scheduler* cobj = (cocos2d::Scheduler*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Scheduler(se::Object* obj)
{
    auto cls = se::Class::create("Scheduler", obj, nullptr, js_cocos2dx_Scheduler_constructor);

    cls->defineFunction("setTimeScale", js_cocos2dx_Scheduler_setTimeScale);
    cls->defineFunction("unscheduleAllWithMinPriority", js_cocos2dx_Scheduler_unscheduleAllWithMinPriority);
    cls->defineFunction("update", js_cocos2dx_Scheduler_update);
    cls->defineFunction("unscheduleScriptEntry", js_cocos2dx_Scheduler_unscheduleScriptEntry);
    cls->defineFunction("performFunctionInCocosThread", js_cocos2dx_Scheduler_performFunctionInCocosThread);
    cls->defineFunction("removeAllFunctionsToBePerformedInCocosThread", js_cocos2dx_Scheduler_removeAllFunctionsToBePerformedInCocosThread);
    cls->defineFunction("unscheduleAll", js_cocos2dx_Scheduler_unscheduleAll);
    cls->defineFunction("getTimeScale", js_cocos2dx_Scheduler_getTimeScale);
    cls->defineFinalizedFunction(js_cocos2dx_Scheduler_finalize);
    cls->install();

    __jsb_cocos2dx_Scheduler_proto = cls->getProto();
    __jsb_cocos2dx_Scheduler_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_AsyncTaskPool_proto = nullptr;
se::Class* __jsb_cocos2dx_AsyncTaskPool_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_AsyncTaskPool_stopTasks, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AsyncTaskPool* cobj = (cocos2d::AsyncTaskPool*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AsyncTaskPool_stopTasks : Invalid Native Object");
    if (argc == 1) {
        cocos2d::AsyncTaskPool::TaskType arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AsyncTaskPool_stopTasks : Error processing arguments");
        cobj->stopTasks(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AsyncTaskPool_destroyInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::AsyncTaskPool::destroyInstance();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AsyncTaskPool_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::AsyncTaskPool* result = cocos2d::AsyncTaskPool::getInstance();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::AsyncTaskPool>((cocos2d::AsyncTaskPool*)result, __jsb_cocos2dx_AsyncTaskPool_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_AsyncTaskPool(se::Object* obj)
{
    auto cls = se::Class::create("AsyncTaskPool", obj, nullptr, nullptr);

    cls->defineFunction("stopTasks", js_cocos2dx_AsyncTaskPool_stopTasks);
    cls->defineStaticFunction("destroyInstance", js_cocos2dx_AsyncTaskPool_destroyInstance);
    cls->defineStaticFunction("getInstance", js_cocos2dx_AsyncTaskPool_getInstance);
    cls->install();

    __jsb_cocos2dx_AsyncTaskPool_proto = cls->getProto();
    __jsb_cocos2dx_AsyncTaskPool_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Action_proto = nullptr;
se::Class* __jsb_cocos2dx_Action_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Action_startWithTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_startWithTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_startWithTarget : Error processing arguments");
        cobj->startWithTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_setOriginalTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_setOriginalTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_setOriginalTarget : Error processing arguments");
        cobj->setOriginalTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Action* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Action>((cocos2d::Action*)result, __jsb_cocos2dx_Action_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_getOriginalTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_getOriginalTarget : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getOriginalTarget();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_stop, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_stop : Invalid Native Object");
    if (argc == 0) {
        cobj->stop();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_update, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_update : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_update : Error processing arguments");
        cobj->update(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_getTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_getTarget : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getTarget();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_getFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_getFlags : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getFlags();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_step, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_step : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_step : Error processing arguments");
        cobj->step(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_setTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_setTag : Error processing arguments");
        cobj->setTag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_setFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_setFlags : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_setFlags : Error processing arguments");
        cobj->setFlags(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_getTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_getTag : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getTag();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_setTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_setTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Action_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_isDone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_isDone : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isDone();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Action_reverse, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Action* cobj = (cocos2d::Action*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Action_reverse : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Action* result = cobj->reverse();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Action>((cocos2d::Action*)result, __jsb_cocos2dx_Action_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Action(se::Object* obj)
{
    auto cls = se::Class::create("Action", obj, nullptr, nullptr);

    cls->defineFunction("startWithTarget", js_cocos2dx_Action_startWithTarget);
    cls->defineFunction("setOriginalTarget", js_cocos2dx_Action_setOriginalTarget);
    cls->defineFunction("clone", js_cocos2dx_Action_clone);
    cls->defineFunction("getOriginalTarget", js_cocos2dx_Action_getOriginalTarget);
    cls->defineFunction("stop", js_cocos2dx_Action_stop);
    cls->defineFunction("update", js_cocos2dx_Action_update);
    cls->defineFunction("getTarget", js_cocos2dx_Action_getTarget);
    cls->defineFunction("getFlags", js_cocos2dx_Action_getFlags);
    cls->defineFunction("step", js_cocos2dx_Action_step);
    cls->defineFunction("setTag", js_cocos2dx_Action_setTag);
    cls->defineFunction("setFlags", js_cocos2dx_Action_setFlags);
    cls->defineFunction("getTag", js_cocos2dx_Action_getTag);
    cls->defineFunction("setTarget", js_cocos2dx_Action_setTarget);
    cls->defineFunction("isDone", js_cocos2dx_Action_isDone);
    cls->defineFunction("reverse", js_cocos2dx_Action_reverse);
    cls->install();

    __jsb_cocos2dx_Action_proto = cls->getProto();
    __jsb_cocos2dx_Action_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_FiniteTimeAction_proto = nullptr;
se::Class* __jsb_cocos2dx_FiniteTimeAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FiniteTimeAction_setDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FiniteTimeAction* cobj = (cocos2d::FiniteTimeAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FiniteTimeAction_setDuration : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FiniteTimeAction_setDuration : Error processing arguments");
        cobj->setDuration(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FiniteTimeAction_getDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FiniteTimeAction* cobj = (cocos2d::FiniteTimeAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FiniteTimeAction_getDuration : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDuration();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_FiniteTimeAction(se::Object* obj)
{
    auto cls = se::Class::create("FiniteTimeAction", obj, __jsb_cocos2dx_Action_proto, nullptr);

    cls->defineFunction("setDuration", js_cocos2dx_FiniteTimeAction_setDuration);
    cls->defineFunction("getDuration", js_cocos2dx_FiniteTimeAction_getDuration);
    cls->install();

    __jsb_cocos2dx_FiniteTimeAction_proto = cls->getProto();
    __jsb_cocos2dx_FiniteTimeAction_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Speed_proto = nullptr;
se::Class* __jsb_cocos2dx_Speed_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Speed_setInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Speed_setInnerAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Speed_setInnerAction : Error processing arguments");
        cobj->setInnerAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Speed_getSpeed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Speed_getSpeed : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSpeed();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Speed_setSpeed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Speed_setSpeed : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Speed_setSpeed : Error processing arguments");
        cobj->setSpeed(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Speed_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Speed_initWithAction : Invalid Native Object");
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Speed_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Speed_getInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Speed_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->getInnerAction();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Speed_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Speed_create : Error processing arguments");
        auto result = cocos2d::Speed::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Speed_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Speed_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Speed_constructor, __jsb_cocos2dx_Speed_class, js_cocos2dx_Speed_finalize)
{
    cocos2d::Speed* cobj = new (std::nothrow) cocos2d::Speed();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Speed_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Speed)", nativeThisObject);
    cocos2d::Speed* cobj = (cocos2d::Speed*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Speed(se::Object* obj)
{
    auto cls = se::Class::create("Speed", obj, __jsb_cocos2dx_Action_proto, js_cocos2dx_Speed_constructor);

    cls->defineFunction("setInnerAction", js_cocos2dx_Speed_setInnerAction);
    cls->defineFunction("_getSpeed", js_cocos2dx_Speed_getSpeed);
    cls->defineFunction("_setSpeed", js_cocos2dx_Speed_setSpeed);
    cls->defineFunction("initWithAction", js_cocos2dx_Speed_initWithAction);
    cls->defineFunction("getInnerAction", js_cocos2dx_Speed_getInnerAction);
    cls->defineStaticFunction("create", js_cocos2dx_Speed_create);
    cls->defineFinalizedFunction(js_cocos2dx_Speed_finalize);
    cls->install();

    __jsb_cocos2dx_Speed_proto = cls->getProto();
    __jsb_cocos2dx_Speed_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Follow_proto = nullptr;
se::Class* __jsb_cocos2dx_Follow_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Follow_setBoundarySet, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Follow* cobj = (cocos2d::Follow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Follow_setBoundarySet : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_setBoundarySet : Error processing arguments");
        cobj->setBoundarySet(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Follow_initWithTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Follow* cobj = (cocos2d::Follow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Follow_initWithTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_initWithTarget : Error processing arguments");
        bool result = cobj->initWithTarget(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        cocos2d::Rect arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_Rect(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_initWithTarget : Error processing arguments");
        bool result = cobj->initWithTarget(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Follow_initWithTargetAndOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Follow* cobj = (cocos2d::Follow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Follow_initWithTargetAndOffset : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Node* arg0 = nullptr;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_initWithTargetAndOffset : Error processing arguments");
        bool result = cobj->initWithTargetAndOffset(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 4) {
        cocos2d::Node* arg0 = nullptr;
        float arg1 = 0;
        float arg2 = 0;
        cocos2d::Rect arg3;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Rect(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_initWithTargetAndOffset : Error processing arguments");
        bool result = cobj->initWithTargetAndOffset(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Follow_isBoundarySet, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Follow* cobj = (cocos2d::Follow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Follow_isBoundarySet : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isBoundarySet();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Follow_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_create : Error processing arguments");
        auto result = cocos2d::Follow::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Follow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        cocos2d::Rect arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_Rect(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_create : Error processing arguments");
        auto result = cocos2d::Follow::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Follow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Follow_createWithOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        cocos2d::Node* arg0 = nullptr;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_createWithOffset : Error processing arguments");
        auto result = cocos2d::Follow::createWithOffset(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Follow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 4) {
        cocos2d::Node* arg0 = nullptr;
        float arg1 = 0;
        float arg2 = 0;
        cocos2d::Rect arg3;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Rect(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Follow_createWithOffset : Error processing arguments");
        auto result = cocos2d::Follow::createWithOffset(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Follow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Follow_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Follow_constructor, __jsb_cocos2dx_Follow_class, js_cocos2dx_Follow_finalize)
{
    cocos2d::Follow* cobj = new (std::nothrow) cocos2d::Follow();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Follow_ctor, __jsb_cocos2dx_Follow_class, js_cocos2dx_Follow_finalize)
{
    cocos2d::Follow* cobj = new (std::nothrow) cocos2d::Follow();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Follow_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Follow)", nativeThisObject);
    cocos2d::Follow* cobj = (cocos2d::Follow*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Follow(se::Object* obj)
{
    auto cls = se::Class::create("Follow", obj, __jsb_cocos2dx_Action_proto, js_cocos2dx_Follow_constructor);

    cls->defineFunction("setBoundarySet", js_cocos2dx_Follow_setBoundarySet);
    cls->defineFunction("initWithTarget", js_cocos2dx_Follow_initWithTarget);
    cls->defineFunction("initWithTargetAndOffset", js_cocos2dx_Follow_initWithTargetAndOffset);
    cls->defineFunction("isBoundarySet", js_cocos2dx_Follow_isBoundarySet);
    cls->defineFunction("ctor", js_cocos2dx_Follow_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Follow_create);
    cls->defineStaticFunction("createWithOffset", js_cocos2dx_Follow_createWithOffset);
    cls->defineFinalizedFunction(js_cocos2dx_Follow_finalize);
    cls->install();

    __jsb_cocos2dx_Follow_proto = cls->getProto();
    __jsb_cocos2dx_Follow_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Follow.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Image_proto = nullptr;
se::Class* __jsb_cocos2dx_Image_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Image_hasPremultipliedAlpha, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_hasPremultipliedAlpha : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasPremultipliedAlpha();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getDataLen, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getDataLen : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getDataLen();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_saveToFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_saveToFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_saveToFile : Error processing arguments");
        bool result = cobj->saveToFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_saveToFile : Error processing arguments");
        bool result = cobj->saveToFile(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_hasAlpha, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_hasAlpha : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasAlpha();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_isCompressed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_isCompressed : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isCompressed();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getHeight : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getHeight();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_initWithImageFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_initWithImageFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_initWithImageFile : Error processing arguments");
        bool result = cobj->initWithImageFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getWidth : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getWidth();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getBitPerPixel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getBitPerPixel : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getBitPerPixel();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getFileType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getFileType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getFileType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getFilePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getFilePath : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getFilePath();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getNumberOfMipmaps, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getNumberOfMipmaps : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getNumberOfMipmaps();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getRenderFormat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getRenderFormat : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getRenderFormat();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getData, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getData : Invalid Native Object");
    if (argc == 0) {
        unsigned char* result = cobj->getData();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR unsigned char*;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_getMipmaps, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_getMipmaps : Invalid Native Object");
    if (argc == 0) {
        cocos2d::_MipmapInfo* result = cobj->getMipmaps();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR _MipmapInfo*;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_initWithRawData, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Image_initWithRawData : Invalid Native Object");
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        ssize_t arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        int arg4 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= seval_to_ssize(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_initWithRawData : Error processing arguments");
        bool result = cobj->initWithRawData(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 6) {
        const unsigned char* arg0 = nullptr;
        ssize_t arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        int arg4 = 0;
        bool arg5;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= seval_to_ssize(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        ok &= seval_to_boolean(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_initWithRawData : Error processing arguments");
        bool result = cobj->initWithRawData(arg0, arg1, arg2, arg3, arg4, arg5);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha : Error processing arguments");
        cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Image_setPNGPremultipliedAlphaEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Image_setPNGPremultipliedAlphaEnabled : Error processing arguments");
        cocos2d::Image::setPNGPremultipliedAlphaEnabled(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Image_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Image_constructor, __jsb_cocos2dx_Image_class, js_cocos2dx_Image_finalize)
{
    cocos2d::Image* cobj = new (std::nothrow) cocos2d::Image();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Image_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Image)", nativeThisObject);
    cocos2d::Image* cobj = (cocos2d::Image*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Image(se::Object* obj)
{
    auto cls = se::Class::create("Image", obj, nullptr, js_cocos2dx_Image_constructor);

    cls->defineFunction("hasPremultipliedAlpha", js_cocos2dx_Image_hasPremultipliedAlpha);
    cls->defineFunction("getDataLen", js_cocos2dx_Image_getDataLen);
    cls->defineFunction("saveToFile", js_cocos2dx_Image_saveToFile);
    cls->defineFunction("hasAlpha", js_cocos2dx_Image_hasAlpha);
    cls->defineFunction("isCompressed", js_cocos2dx_Image_isCompressed);
    cls->defineFunction("getHeight", js_cocos2dx_Image_getHeight);
    cls->defineFunction("initWithImageFile", js_cocos2dx_Image_initWithImageFile);
    cls->defineFunction("getWidth", js_cocos2dx_Image_getWidth);
    cls->defineFunction("getBitPerPixel", js_cocos2dx_Image_getBitPerPixel);
    cls->defineFunction("getFileType", js_cocos2dx_Image_getFileType);
    cls->defineFunction("getFilePath", js_cocos2dx_Image_getFilePath);
    cls->defineFunction("getNumberOfMipmaps", js_cocos2dx_Image_getNumberOfMipmaps);
    cls->defineFunction("getRenderFormat", js_cocos2dx_Image_getRenderFormat);
    cls->defineFunction("getData", js_cocos2dx_Image_getData);
    cls->defineFunction("getMipmaps", js_cocos2dx_Image_getMipmaps);
    cls->defineFunction("initWithRawData", js_cocos2dx_Image_initWithRawData);
    cls->defineStaticFunction("setPVRImagesHavePremultipliedAlpha", js_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha);
    cls->defineStaticFunction("setPNGPremultipliedAlphaEnabled", js_cocos2dx_Image_setPNGPremultipliedAlphaEnabled);
    cls->defineFinalizedFunction(js_cocos2dx_Image_finalize);
    cls->install();

    __jsb_cocos2dx_Image_proto = cls->getProto();
    __jsb_cocos2dx_Image_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_GLProgramState_proto = nullptr;
se::Class* __jsb_cocos2dx_GLProgramState_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformCallback : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            std::function<void (cocos2d::GLProgram *, cocos2d::Uniform *)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](cocos2d::GLProgram* larg0, cocos2d::Uniform* larg1) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(2);
			            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)larg0, __jsb_cocos2dx_GLProgramState_class, &args[0]);
			            ok &= uniform_to_seval(larg1, &args[1]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->setUniformCallback(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (cocos2d::GLProgram *, cocos2d::Uniform *)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](cocos2d::GLProgram* larg0, cocos2d::Uniform* larg1) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(2);
			            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)larg0, __jsb_cocos2dx_GLProgramState_class, &args[0]);
			            ok &= uniform_to_seval(larg1, &args[1]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->setUniformCallback(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getVertexAttribsFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_getVertexAttribsFlags : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getVertexAttribsFlags();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_applyAutoBinding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_applyAutoBinding : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_applyAutoBinding : Error processing arguments");
        cobj->applyAutoBinding(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformVec2, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformVec2 : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec2(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec2(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformVec3, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformVec3 : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec3(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec3(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setVertexAttribCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_setVertexAttribCallback : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::function<void (cocos2d::VertexAttrib *)> arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        do {
		    if (args[1].isObject() && args[1].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[1]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::VertexAttrib* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::VertexAttrib>((cocos2d::VertexAttrib*)larg0, __jsb_cocos2dx_GLProgramState_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_setVertexAttribCallback : Error processing arguments");
        cobj->setVertexAttribCallback(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_apply, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_apply : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Mat4 arg0;
        ok &= seval_to_Mat4(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_apply : Error processing arguments");
        cobj->apply(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getNodeBinding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_getNodeBinding : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getNodeBinding();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_applyGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_applyGLProgram : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Mat4 arg0;
        ok &= seval_to_Mat4(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_applyGLProgram : Error processing arguments");
        cobj->applyGLProgram(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setNodeBinding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_setNodeBinding : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_setNodeBinding : Error processing arguments");
        cobj->setNodeBinding(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformInt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformInt : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformInt(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformInt(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setParameterAutoBinding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_setParameterAutoBinding : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_setParameterAutoBinding : Error processing arguments");
        cobj->setParameterAutoBinding(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformVec2v, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformVec2v : Invalid Native Object");

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Vec2* arg2 = nullptr;
            std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[2], &tempData);arg2=tempData.data();
            if (!ok) { ok = true; break; }
            cobj->setUniformVec2v(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Vec2* arg2 = nullptr;
            std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[2], &tempData);arg2=tempData.data();
            if (!ok) { ok = true; break; }
            cobj->setUniformVec2v(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getUniformCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_getUniformCount : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getUniformCount();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_applyAttributes, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_applyAttributes : Invalid Native Object");
    if (argc == 0) {
        cobj->applyAttributes();
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_applyAttributes : Error processing arguments");
        cobj->applyAttributes(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgramState* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_setGLProgram : Invalid Native Object");
    if (argc == 1) {
        cocos2d::GLProgram* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_setGLProgram : Error processing arguments");
        cobj->setGLProgram(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformFloatv, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformFloatv : Invalid Native Object");

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const float* arg2 = 0;
            #pragma warning NO CONVERSION TO NATIVE FOR float*
			ok = false;
            if (!ok) { ok = true; break; }
            cobj->setUniformFloatv(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const float* arg2 = 0;
            #pragma warning NO CONVERSION TO NATIVE FOR float*
			ok = false;
            if (!ok) { ok = true; break; }
            cobj->setUniformFloatv(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_getGLProgram : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgram* result = cobj->getGLProgram();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformTexture : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformTexture(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformTexture(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_applyUniforms, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_applyUniforms : Invalid Native Object");
    if (argc == 0) {
        cobj->applyUniforms();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformFloat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformFloat : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformFloat(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformFloat(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformMat4, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformMat4 : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformMat4(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Mat4 arg1;
            ok &= seval_to_Mat4(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setUniformMat4(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_setUniformVec3v, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgramState_setUniformVec3v : Invalid Native Object");

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Vec3* arg2 = nullptr;
            ok &= seval_to_native_ptr(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec3v(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            ssize_t arg1 = 0;
            ok &= seval_to_ssize(args[1], &arg1);
            if (!ok) { ok = true; break; }
            const cocos2d::Vec3* arg2 = nullptr;
            ok &= seval_to_native_ptr(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->setUniformVec3v(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getVertexAttribCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramState* cobj = (cocos2d::GLProgramState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramState_getVertexAttribCount : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getVertexAttribCount();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::GLProgram* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_create : Error processing arguments");
        auto result = cocos2d::GLProgramState::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_GLProgramState_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getOrCreateWithGLProgramName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgramState* result = cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgramState* result = cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getOrCreateWithGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::GLProgram* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_getOrCreateWithGLProgram : Error processing arguments");
        cocos2d::GLProgramState* result = cocos2d::GLProgramState::getOrCreateWithGLProgram(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramState_getOrCreateWithShaders, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_std_string(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramState_getOrCreateWithShaders : Error processing arguments");
        cocos2d::GLProgramState* result = cocos2d::GLProgramState::getOrCreateWithShaders(arg0, arg1, arg2);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_GLProgramState(se::Object* obj)
{
    auto cls = se::Class::create("GLProgramState", obj, nullptr, nullptr);

    cls->defineFunction("setUniformCallback", js_cocos2dx_GLProgramState_setUniformCallback);
    cls->defineFunction("getVertexAttribsFlags", js_cocos2dx_GLProgramState_getVertexAttribsFlags);
    cls->defineFunction("applyAutoBinding", js_cocos2dx_GLProgramState_applyAutoBinding);
    cls->defineFunction("setUniformVec2", js_cocos2dx_GLProgramState_setUniformVec2);
    cls->defineFunction("setUniformVec3", js_cocos2dx_GLProgramState_setUniformVec3);
    cls->defineFunction("setVertexAttribCallback", js_cocos2dx_GLProgramState_setVertexAttribCallback);
    cls->defineFunction("apply", js_cocos2dx_GLProgramState_apply);
    cls->defineFunction("getNodeBinding", js_cocos2dx_GLProgramState_getNodeBinding);
    cls->defineFunction("applyGLProgram", js_cocos2dx_GLProgramState_applyGLProgram);
    cls->defineFunction("setNodeBinding", js_cocos2dx_GLProgramState_setNodeBinding);
    cls->defineFunction("setUniformInt", js_cocos2dx_GLProgramState_setUniformInt);
    cls->defineFunction("setParameterAutoBinding", js_cocos2dx_GLProgramState_setParameterAutoBinding);
    cls->defineFunction("setUniformVec2v", js_cocos2dx_GLProgramState_setUniformVec2v);
    cls->defineFunction("getUniformCount", js_cocos2dx_GLProgramState_getUniformCount);
    cls->defineFunction("applyAttributes", js_cocos2dx_GLProgramState_applyAttributes);
    cls->defineFunction("clone", js_cocos2dx_GLProgramState_clone);
    cls->defineFunction("setGLProgram", js_cocos2dx_GLProgramState_setGLProgram);
    cls->defineFunction("setUniformFloatv", js_cocos2dx_GLProgramState_setUniformFloatv);
    cls->defineFunction("getGLProgram", js_cocos2dx_GLProgramState_getGLProgram);
    cls->defineFunction("setUniformTexture", js_cocos2dx_GLProgramState_setUniformTexture);
    cls->defineFunction("applyUniforms", js_cocos2dx_GLProgramState_applyUniforms);
    cls->defineFunction("setUniformFloat", js_cocos2dx_GLProgramState_setUniformFloat);
    cls->defineFunction("setUniformMat4", js_cocos2dx_GLProgramState_setUniformMat4);
    cls->defineFunction("setUniformVec3v", js_cocos2dx_GLProgramState_setUniformVec3v);
    cls->defineFunction("getVertexAttribCount", js_cocos2dx_GLProgramState_getVertexAttribCount);
    cls->defineStaticFunction("create", js_cocos2dx_GLProgramState_create);
    cls->defineStaticFunction("getOrCreateWithGLProgramName", js_cocos2dx_GLProgramState_getOrCreateWithGLProgramName);
    cls->defineStaticFunction("getOrCreateWithGLProgram", js_cocos2dx_GLProgramState_getOrCreateWithGLProgram);
    cls->defineStaticFunction("getOrCreateWithShaders", js_cocos2dx_GLProgramState_getOrCreateWithShaders);
    cls->install();

    __jsb_cocos2dx_GLProgramState_proto = cls->getProto();
    __jsb_cocos2dx_GLProgramState_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_SpriteFrame_proto = nullptr;
se::Class* __jsb_cocos2dx_SpriteFrame_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setAnchorPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setAnchorPoint : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setAnchorPoint : Error processing arguments");
        cobj->setAnchorPoint(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setOffsetInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setOffsetInPixels : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setOffsetInPixels : Error processing arguments");
        cobj->setOffsetInPixels(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getOriginalSizeInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getOriginalSizeInPixels : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getOriginalSizeInPixels();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setOriginalSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setOriginalSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setOriginalSize : Error processing arguments");
        cobj->setOriginalSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getCenterRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getCenterRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getCenterRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setRectInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setRectInPixels : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setRectInPixels : Error processing arguments");
        cobj->setRectInPixels(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setCenterRectInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setCenterRectInPixels : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setCenterRectInPixels : Error processing arguments");
        cobj->setCenterRectInPixels(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setOffset : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setOffset : Error processing arguments");
        cobj->setOffset(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_initWithTextureFilename, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_SpriteFrame_initWithTextureFilename : Invalid Native Object");

    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            cocos2d::Vec2 arg3;
            ok &= seval_to_Vec2(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg4;
            ok &= seval_to_Size(args[4], &arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTextureFilename(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTextureFilename(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setRect : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setRect : Error processing arguments");
        cobj->setRect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_initWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_SpriteFrame_initWithTexture : Invalid Native Object");

    do {
        if (argc == 5) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            cocos2d::Vec2 arg3;
            ok &= seval_to_Vec2(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg4;
            ok &= seval_to_Size(args[4], &arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTexture(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTexture(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getOriginalSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getOriginalSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getOriginalSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::SpriteFrame* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getRectInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getRectInPixels : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getRectInPixels();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_isRotated, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_isRotated : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isRotated();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_hasCenterRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_hasCenterRect : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasCenterRect();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setRotated, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setRotated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setRotated : Error processing arguments");
        cobj->setRotated(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getOffset : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getOffset();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_setOriginalSizeInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_setOriginalSizeInPixels : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrame_setOriginalSizeInPixels : Error processing arguments");
        cobj->setOriginalSizeInPixels(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getAnchorPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getAnchorPoint();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_hasAnchorPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_hasAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasAnchorPoint();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_getOffsetInPixels, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrame_getOffsetInPixels : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getOffsetInPixels();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg3;
            ok &= seval_to_Vec2(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg4;
            ok &= seval_to_Size(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::SpriteFrame* result = cocos2d::SpriteFrame::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::SpriteFrame* result = cocos2d::SpriteFrame::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_createWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 5) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg3;
            ok &= seval_to_Vec2(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg4;
            ok &= seval_to_Size(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::SpriteFrame* result = cocos2d::SpriteFrame::createWithTexture(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::SpriteFrame* result = cocos2d::SpriteFrame::createWithTexture(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SpriteFrame_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SpriteFrame_constructor, __jsb_cocos2dx_SpriteFrame_class, js_cocos2dx_SpriteFrame_finalize)
{
    cocos2d::SpriteFrame* cobj = new (std::nothrow) cocos2d::SpriteFrame();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_SpriteFrame_ctor, __jsb_cocos2dx_SpriteFrame_class, js_cocos2dx_SpriteFrame_finalize)
{
    cocos2d::SpriteFrame* cobj = new (std::nothrow) cocos2d::SpriteFrame();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SpriteFrame_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SpriteFrame)", nativeThisObject);
    cocos2d::SpriteFrame* cobj = (cocos2d::SpriteFrame*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_SpriteFrame(se::Object* obj)
{
    auto cls = se::Class::create("SpriteFrame", obj, nullptr, js_cocos2dx_SpriteFrame_constructor);

    cls->defineFunction("setAnchorPoint", js_cocos2dx_SpriteFrame_setAnchorPoint);
    cls->defineFunction("setTexture", js_cocos2dx_SpriteFrame_setTexture);
    cls->defineFunction("getTexture", js_cocos2dx_SpriteFrame_getTexture);
    cls->defineFunction("setOffsetInPixels", js_cocos2dx_SpriteFrame_setOffsetInPixels);
    cls->defineFunction("getOriginalSizeInPixels", js_cocos2dx_SpriteFrame_getOriginalSizeInPixels);
    cls->defineFunction("setOriginalSize", js_cocos2dx_SpriteFrame_setOriginalSize);
    cls->defineFunction("getCenterRect", js_cocos2dx_SpriteFrame_getCenterRect);
    cls->defineFunction("setRectInPixels", js_cocos2dx_SpriteFrame_setRectInPixels);
    cls->defineFunction("getRect", js_cocos2dx_SpriteFrame_getRect);
    cls->defineFunction("setCenterRectInPixels", js_cocos2dx_SpriteFrame_setCenterRectInPixels);
    cls->defineFunction("setOffset", js_cocos2dx_SpriteFrame_setOffset);
    cls->defineFunction("initWithTextureFilename", js_cocos2dx_SpriteFrame_initWithTextureFilename);
    cls->defineFunction("setRect", js_cocos2dx_SpriteFrame_setRect);
    cls->defineFunction("initWithTexture", js_cocos2dx_SpriteFrame_initWithTexture);
    cls->defineFunction("getOriginalSize", js_cocos2dx_SpriteFrame_getOriginalSize);
    cls->defineFunction("clone", js_cocos2dx_SpriteFrame_clone);
    cls->defineFunction("getRectInPixels", js_cocos2dx_SpriteFrame_getRectInPixels);
    cls->defineFunction("isRotated", js_cocos2dx_SpriteFrame_isRotated);
    cls->defineFunction("hasCenterRect", js_cocos2dx_SpriteFrame_hasCenterRect);
    cls->defineFunction("setRotated", js_cocos2dx_SpriteFrame_setRotated);
    cls->defineFunction("getOffset", js_cocos2dx_SpriteFrame_getOffset);
    cls->defineFunction("setOriginalSizeInPixels", js_cocos2dx_SpriteFrame_setOriginalSizeInPixels);
    cls->defineFunction("getAnchorPoint", js_cocos2dx_SpriteFrame_getAnchorPoint);
    cls->defineFunction("hasAnchorPoint", js_cocos2dx_SpriteFrame_hasAnchorPoint);
    cls->defineFunction("getOffsetInPixels", js_cocos2dx_SpriteFrame_getOffsetInPixels);
    cls->defineFunction("ctor", js_cocos2dx_SpriteFrame_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_SpriteFrame_create);
    cls->defineStaticFunction("createWithTexture", js_cocos2dx_SpriteFrame_createWithTexture);
    cls->defineFinalizedFunction(js_cocos2dx_SpriteFrame_finalize);
    cls->install();

    __jsb_cocos2dx_SpriteFrame_proto = cls->getProto();
    __jsb_cocos2dx_SpriteFrame_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.SpriteFrame.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_AnimationFrame_proto = nullptr;
se::Class* __jsb_cocos2dx_AnimationFrame_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_setSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_setSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationFrame_setSpriteFrame : Error processing arguments");
        cobj->setSpriteFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_getUserInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_AnimationFrame_getUserInfo : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::ValueMap& result = cobj->getUserInfo();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::ValueMap& result = cobj->getUserInfo();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_setDelayUnits, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_setDelayUnits : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationFrame_setDelayUnits : Error processing arguments");
        cobj->setDelayUnits(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::AnimationFrame* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::AnimationFrame>((cocos2d::AnimationFrame*)result, __jsb_cocos2dx_AnimationFrame_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_getSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_getSpriteFrame : Invalid Native Object");
    if (argc == 0) {
        cocos2d::SpriteFrame* result = cobj->getSpriteFrame();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_getDelayUnits, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_getDelayUnits : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDelayUnits();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_setUserInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_setUserInfo : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationFrame_setUserInfo : Error processing arguments");
        cobj->setUserInfo(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_initWithSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationFrame_initWithSpriteFrame : Invalid Native Object");
    if (argc == 3) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        float arg1 = 0;
        cocos2d::ValueMap arg2;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_ccvaluemap(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationFrame_initWithSpriteFrame : Error processing arguments");
        bool result = cobj->initWithSpriteFrame(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        float arg1 = 0;
        cocos2d::ValueMap arg2;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_ccvaluemap(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationFrame_create : Error processing arguments");
        auto result = cocos2d::AnimationFrame::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_AnimationFrame_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_AnimationFrame_finalize)

SE_CTOR_BEGIN(js_cocos2dx_AnimationFrame_constructor, __jsb_cocos2dx_AnimationFrame_class, js_cocos2dx_AnimationFrame_finalize)
{
    cocos2d::AnimationFrame* cobj = new (std::nothrow) cocos2d::AnimationFrame();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_AnimationFrame_ctor, __jsb_cocos2dx_AnimationFrame_class, js_cocos2dx_AnimationFrame_finalize)
{
    cocos2d::AnimationFrame* cobj = new (std::nothrow) cocos2d::AnimationFrame();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_AnimationFrame_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::AnimationFrame)", nativeThisObject);
    cocos2d::AnimationFrame* cobj = (cocos2d::AnimationFrame*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_AnimationFrame(se::Object* obj)
{
    auto cls = se::Class::create("AnimationFrame", obj, nullptr, js_cocos2dx_AnimationFrame_constructor);

    cls->defineFunction("setSpriteFrame", js_cocos2dx_AnimationFrame_setSpriteFrame);
    cls->defineFunction("getUserInfo", js_cocos2dx_AnimationFrame_getUserInfo);
    cls->defineFunction("setDelayUnits", js_cocos2dx_AnimationFrame_setDelayUnits);
    cls->defineFunction("clone", js_cocos2dx_AnimationFrame_clone);
    cls->defineFunction("getSpriteFrame", js_cocos2dx_AnimationFrame_getSpriteFrame);
    cls->defineFunction("getDelayUnits", js_cocos2dx_AnimationFrame_getDelayUnits);
    cls->defineFunction("setUserInfo", js_cocos2dx_AnimationFrame_setUserInfo);
    cls->defineFunction("initWithSpriteFrame", js_cocos2dx_AnimationFrame_initWithSpriteFrame);
    cls->defineFunction("ctor", js_cocos2dx_AnimationFrame_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_AnimationFrame_create);
    cls->defineFinalizedFunction(js_cocos2dx_AnimationFrame_finalize);
    cls->install();

    __jsb_cocos2dx_AnimationFrame_proto = cls->getProto();
    __jsb_cocos2dx_AnimationFrame_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.AnimationFrame.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Animation_proto = nullptr;
se::Class* __jsb_cocos2dx_Animation_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Animation_getLoops, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getLoops : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getLoops();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_addSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_addSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_addSpriteFrame : Error processing arguments");
        cobj->addSpriteFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_setRestoreOriginalFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_setRestoreOriginalFrame : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_setRestoreOriginalFrame : Error processing arguments");
        cobj->setRestoreOriginalFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Animation* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_getDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getDuration : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDuration();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_initWithAnimationFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_initWithAnimationFrames : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
        float arg1 = 0;
        unsigned int arg2 = 0;
        ok &= seval_to_Vector(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_initWithAnimationFrames : Error processing arguments");
        bool result = cobj->initWithAnimationFrames(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_setFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_setFrames : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_setFrames : Error processing arguments");
        cobj->setFrames(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_getFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getFrames : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vector<cocos2d::AnimationFrame *>& result = cobj->getFrames();
        se::Value jsret;
        ok &= Vector_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_setLoops, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_setLoops : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_setLoops : Error processing arguments");
        cobj->setLoops(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_setDelayPerUnit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_setDelayPerUnit : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_setDelayPerUnit : Error processing arguments");
        cobj->setDelayPerUnit(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_addSpriteFrameWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_addSpriteFrameWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_addSpriteFrameWithFile : Error processing arguments");
        cobj->addSpriteFrameWithFile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_getTotalDelayUnits, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getTotalDelayUnits : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getTotalDelayUnits();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_getDelayPerUnit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getDelayPerUnit : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDelayPerUnit();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_initWithSpriteFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_initWithSpriteFrames : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_initWithSpriteFrames : Error processing arguments");
        bool result = cobj->initWithSpriteFrames(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1 = 0;
        ok &= seval_to_Vector(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_initWithSpriteFrames : Error processing arguments");
        bool result = cobj->initWithSpriteFrames(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 3) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1 = 0;
        unsigned int arg2 = 0;
        ok &= seval_to_Vector(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_initWithSpriteFrames : Error processing arguments");
        bool result = cobj->initWithSpriteFrames(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_getRestoreOriginalFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_getRestoreOriginalFrame : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->getRestoreOriginalFrame();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_addSpriteFrameWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animation_addSpriteFrameWithTexture : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        cocos2d::Rect arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_Rect(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_addSpriteFrameWithTexture : Error processing arguments");
        cobj->addSpriteFrameWithTexture(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
            ok &= seval_to_Vector(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Animation* result = cocos2d::Animation::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 3) {
            cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
            ok &= seval_to_Vector(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            unsigned int arg2 = 0;
            ok &= seval_to_uint32(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Animation* result = cocos2d::Animation::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::Animation* result = cocos2d::Animation::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animation_createWithSpriteFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_createWithSpriteFrames : Error processing arguments");
        auto result = cocos2d::Animation::createWithSpriteFrames(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Animation_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1 = 0;
        ok &= seval_to_Vector(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_createWithSpriteFrames : Error processing arguments");
        auto result = cocos2d::Animation::createWithSpriteFrames(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Animation_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 3) {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1 = 0;
        unsigned int arg2 = 0;
        ok &= seval_to_Vector(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animation_createWithSpriteFrames : Error processing arguments");
        auto result = cocos2d::Animation::createWithSpriteFrames(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Animation_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Animation_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Animation_constructor, __jsb_cocos2dx_Animation_class, js_cocos2dx_Animation_finalize)
{
    cocos2d::Animation* cobj = new (std::nothrow) cocos2d::Animation();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Animation_ctor, __jsb_cocos2dx_Animation_class, js_cocos2dx_Animation_finalize)
{
    cocos2d::Animation* cobj = new (std::nothrow) cocos2d::Animation();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Animation_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Animation)", nativeThisObject);
    cocos2d::Animation* cobj = (cocos2d::Animation*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Animation(se::Object* obj)
{
    auto cls = se::Class::create("Animation", obj, nullptr, js_cocos2dx_Animation_constructor);

    cls->defineFunction("getLoops", js_cocos2dx_Animation_getLoops);
    cls->defineFunction("addSpriteFrame", js_cocos2dx_Animation_addSpriteFrame);
    cls->defineFunction("setRestoreOriginalFrame", js_cocos2dx_Animation_setRestoreOriginalFrame);
    cls->defineFunction("clone", js_cocos2dx_Animation_clone);
    cls->defineFunction("getDuration", js_cocos2dx_Animation_getDuration);
    cls->defineFunction("initWithAnimationFrames", js_cocos2dx_Animation_initWithAnimationFrames);
    cls->defineFunction("init", js_cocos2dx_Animation_init);
    cls->defineFunction("setFrames", js_cocos2dx_Animation_setFrames);
    cls->defineFunction("getFrames", js_cocos2dx_Animation_getFrames);
    cls->defineFunction("setLoops", js_cocos2dx_Animation_setLoops);
    cls->defineFunction("setDelayPerUnit", js_cocos2dx_Animation_setDelayPerUnit);
    cls->defineFunction("addSpriteFrameWithFile", js_cocos2dx_Animation_addSpriteFrameWithFile);
    cls->defineFunction("getTotalDelayUnits", js_cocos2dx_Animation_getTotalDelayUnits);
    cls->defineFunction("getDelayPerUnit", js_cocos2dx_Animation_getDelayPerUnit);
    cls->defineFunction("initWithSpriteFrames", js_cocos2dx_Animation_initWithSpriteFrames);
    cls->defineFunction("getRestoreOriginalFrame", js_cocos2dx_Animation_getRestoreOriginalFrame);
    cls->defineFunction("addSpriteFrameWithTexture", js_cocos2dx_Animation_addSpriteFrameWithTexture);
    cls->defineFunction("ctor", js_cocos2dx_Animation_ctor);
    cls->defineStaticFunction("createWithAnimationFrames", js_cocos2dx_Animation_create);
    cls->defineStaticFunction("createWithSpriteFrames", js_cocos2dx_Animation_createWithSpriteFrames);
    cls->defineFinalizedFunction(js_cocos2dx_Animation_finalize);
    cls->install();

    __jsb_cocos2dx_Animation_proto = cls->getProto();
    __jsb_cocos2dx_Animation_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Animation.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ActionInterval_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionInterval_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionInterval_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionInterval* cobj = (cocos2d::ActionInterval*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionInterval_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionInterval_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionInterval* cobj = (cocos2d::ActionInterval*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionInterval_initWithDuration : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionInterval_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionInterval_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionInterval* cobj = (cocos2d::ActionInterval*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionInterval_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionInterval_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionInterval_getElapsed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionInterval* cobj = (cocos2d::ActionInterval*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionInterval_getElapsed : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getElapsed();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_ActionInterval(se::Object* obj)
{
    auto cls = se::Class::create("ActionInterval", obj, __jsb_cocos2dx_FiniteTimeAction_proto, nullptr);

    cls->defineFunction("getAmplitudeRate", js_cocos2dx_ActionInterval_getAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_ActionInterval_initWithDuration);
    cls->defineFunction("setAmplitudeRate", js_cocos2dx_ActionInterval_setAmplitudeRate);
    cls->defineFunction("getElapsed", js_cocos2dx_ActionInterval_getElapsed);
    cls->install();

    __jsb_cocos2dx_ActionInterval_proto = cls->getProto();
    __jsb_cocos2dx_ActionInterval_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Sequence_proto = nullptr;
se::Class* __jsb_cocos2dx_Sequence_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Sequence_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sequence* cobj = (cocos2d::Sequence*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sequence_init : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::FiniteTimeAction *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sequence_init : Error processing arguments");
        bool result = cobj->init(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sequence_initWithTwoActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sequence* cobj = (cocos2d::Sequence*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sequence_initWithTwoActions : Invalid Native Object");
    if (argc == 2) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        cocos2d::FiniteTimeAction* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sequence_initWithTwoActions : Error processing arguments");
        bool result = cobj->initWithTwoActions(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Sequence_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Sequence_constructor, __jsb_cocos2dx_Sequence_class, js_cocos2dx_Sequence_finalize)
{
    cocos2d::Sequence* cobj = new (std::nothrow) cocos2d::Sequence();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Sequence_ctor, __jsb_cocos2dx_Sequence_class, js_cocos2dx_Sequence_finalize)
{
    cocos2d::Sequence* cobj = new (std::nothrow) cocos2d::Sequence();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Sequence_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Sequence)", nativeThisObject);
    cocos2d::Sequence* cobj = (cocos2d::Sequence*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Sequence(se::Object* obj)
{
    auto cls = se::Class::create("Sequence", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_Sequence_constructor);

    cls->defineFunction("init", js_cocos2dx_Sequence_init);
    cls->defineFunction("initWithTwoActions", js_cocos2dx_Sequence_initWithTwoActions);
    cls->defineFunction("ctor", js_cocos2dx_Sequence_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_Sequence_finalize);
    cls->install();

    __jsb_cocos2dx_Sequence_proto = cls->getProto();
    __jsb_cocos2dx_Sequence_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Sequence.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Repeat_proto = nullptr;
se::Class* __jsb_cocos2dx_Repeat_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Repeat_setInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Repeat* cobj = (cocos2d::Repeat*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Repeat_setInnerAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Repeat_setInnerAction : Error processing arguments");
        cobj->setInnerAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Repeat_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Repeat* cobj = (cocos2d::Repeat*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Repeat_initWithAction : Invalid Native Object");
    if (argc == 2) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        unsigned int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Repeat_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Repeat_getInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Repeat* cobj = (cocos2d::Repeat*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Repeat_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        cocos2d::FiniteTimeAction* result = cobj->getInnerAction();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::FiniteTimeAction>((cocos2d::FiniteTimeAction*)result, __jsb_cocos2dx_FiniteTimeAction_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Repeat_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        unsigned int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Repeat_create : Error processing arguments");
        auto result = cocos2d::Repeat::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Repeat_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Repeat_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Repeat_constructor, __jsb_cocos2dx_Repeat_class, js_cocos2dx_Repeat_finalize)
{
    cocos2d::Repeat* cobj = new (std::nothrow) cocos2d::Repeat();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Repeat_ctor, __jsb_cocos2dx_Repeat_class, js_cocos2dx_Repeat_finalize)
{
    cocos2d::Repeat* cobj = new (std::nothrow) cocos2d::Repeat();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Repeat_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Repeat)", nativeThisObject);
    cocos2d::Repeat* cobj = (cocos2d::Repeat*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Repeat(se::Object* obj)
{
    auto cls = se::Class::create("Repeat", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_Repeat_constructor);

    cls->defineFunction("setInnerAction", js_cocos2dx_Repeat_setInnerAction);
    cls->defineFunction("initWithAction", js_cocos2dx_Repeat_initWithAction);
    cls->defineFunction("getInnerAction", js_cocos2dx_Repeat_getInnerAction);
    cls->defineFunction("ctor", js_cocos2dx_Repeat_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Repeat_create);
    cls->defineFinalizedFunction(js_cocos2dx_Repeat_finalize);
    cls->install();

    __jsb_cocos2dx_Repeat_proto = cls->getProto();
    __jsb_cocos2dx_Repeat_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Repeat.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_RepeatForever_proto = nullptr;
se::Class* __jsb_cocos2dx_RepeatForever_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RepeatForever_setInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RepeatForever* cobj = (cocos2d::RepeatForever*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RepeatForever_setInnerAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RepeatForever_setInnerAction : Error processing arguments");
        cobj->setInnerAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RepeatForever_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RepeatForever* cobj = (cocos2d::RepeatForever*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RepeatForever_initWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RepeatForever_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RepeatForever_getInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RepeatForever* cobj = (cocos2d::RepeatForever*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RepeatForever_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->getInnerAction();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RepeatForever_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RepeatForever_create : Error processing arguments");
        auto result = cocos2d::RepeatForever::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_RepeatForever_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_RepeatForever_finalize)

SE_CTOR_BEGIN(js_cocos2dx_RepeatForever_constructor, __jsb_cocos2dx_RepeatForever_class, js_cocos2dx_RepeatForever_finalize)
{
    cocos2d::RepeatForever* cobj = new (std::nothrow) cocos2d::RepeatForever();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_RepeatForever_ctor, __jsb_cocos2dx_RepeatForever_class, js_cocos2dx_RepeatForever_finalize)
{
    cocos2d::RepeatForever* cobj = new (std::nothrow) cocos2d::RepeatForever();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_RepeatForever_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::RepeatForever)", nativeThisObject);
    cocos2d::RepeatForever* cobj = (cocos2d::RepeatForever*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_RepeatForever(se::Object* obj)
{
    auto cls = se::Class::create("RepeatForever", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_RepeatForever_constructor);

    cls->defineFunction("setInnerAction", js_cocos2dx_RepeatForever_setInnerAction);
    cls->defineFunction("initWithAction", js_cocos2dx_RepeatForever_initWithAction);
    cls->defineFunction("getInnerAction", js_cocos2dx_RepeatForever_getInnerAction);
    cls->defineFunction("ctor", js_cocos2dx_RepeatForever_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_RepeatForever_create);
    cls->defineFinalizedFunction(js_cocos2dx_RepeatForever_finalize);
    cls->install();

    __jsb_cocos2dx_RepeatForever_proto = cls->getProto();
    __jsb_cocos2dx_RepeatForever_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.RepeatForever.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Spawn_proto = nullptr;
se::Class* __jsb_cocos2dx_Spawn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Spawn_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Spawn* cobj = (cocos2d::Spawn*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Spawn_init : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::FiniteTimeAction *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Spawn_init : Error processing arguments");
        bool result = cobj->init(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Spawn_initWithTwoActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Spawn* cobj = (cocos2d::Spawn*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Spawn_initWithTwoActions : Invalid Native Object");
    if (argc == 2) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        cocos2d::FiniteTimeAction* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Spawn_initWithTwoActions : Error processing arguments");
        bool result = cobj->initWithTwoActions(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Spawn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Spawn_constructor, __jsb_cocos2dx_Spawn_class, js_cocos2dx_Spawn_finalize)
{
    cocos2d::Spawn* cobj = new (std::nothrow) cocos2d::Spawn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Spawn_ctor, __jsb_cocos2dx_Spawn_class, js_cocos2dx_Spawn_finalize)
{
    cocos2d::Spawn* cobj = new (std::nothrow) cocos2d::Spawn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Spawn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Spawn)", nativeThisObject);
    cocos2d::Spawn* cobj = (cocos2d::Spawn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Spawn(se::Object* obj)
{
    auto cls = se::Class::create("Spawn", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_Spawn_constructor);

    cls->defineFunction("init", js_cocos2dx_Spawn_init);
    cls->defineFunction("initWithTwoActions", js_cocos2dx_Spawn_initWithTwoActions);
    cls->defineFunction("ctor", js_cocos2dx_Spawn_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_Spawn_finalize);
    cls->install();

    __jsb_cocos2dx_Spawn_proto = cls->getProto();
    __jsb_cocos2dx_Spawn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Spawn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_RotateTo_proto = nullptr;
se::Class* __jsb_cocos2dx_RotateTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RotateTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RotateTo* cobj = (cocos2d::RotateTo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_RotateTo_initWithDuration : Invalid Native Object");

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RotateTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::RotateTo* result = cocos2d::RotateTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateTo>((cocos2d::RotateTo*)result, __jsb_cocos2dx_RotateTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::RotateTo* result = cocos2d::RotateTo::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateTo>((cocos2d::RotateTo*)result, __jsb_cocos2dx_RotateTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::RotateTo* result = cocos2d::RotateTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateTo>((cocos2d::RotateTo*)result, __jsb_cocos2dx_RotateTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_RotateTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_RotateTo_constructor, __jsb_cocos2dx_RotateTo_class, js_cocos2dx_RotateTo_finalize)
{
    cocos2d::RotateTo* cobj = new (std::nothrow) cocos2d::RotateTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_RotateTo_ctor, __jsb_cocos2dx_RotateTo_class, js_cocos2dx_RotateTo_finalize)
{
    cocos2d::RotateTo* cobj = new (std::nothrow) cocos2d::RotateTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_RotateTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::RotateTo)", nativeThisObject);
    cocos2d::RotateTo* cobj = (cocos2d::RotateTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_RotateTo(se::Object* obj)
{
    auto cls = se::Class::create("RotateTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_RotateTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_RotateTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_RotateTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_RotateTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_RotateTo_finalize);
    cls->install();

    __jsb_cocos2dx_RotateTo_proto = cls->getProto();
    __jsb_cocos2dx_RotateTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.RotateTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_RotateBy_proto = nullptr;
se::Class* __jsb_cocos2dx_RotateBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RotateBy_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RotateBy* cobj = (cocos2d::RotateBy*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_RotateBy_initWithDuration : Invalid Native Object");

    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RotateBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::RotateBy* result = cocos2d::RotateBy::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateBy>((cocos2d::RotateBy*)result, __jsb_cocos2dx_RotateBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::RotateBy* result = cocos2d::RotateBy::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateBy>((cocos2d::RotateBy*)result, __jsb_cocos2dx_RotateBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::RotateBy* result = cocos2d::RotateBy::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RotateBy>((cocos2d::RotateBy*)result, __jsb_cocos2dx_RotateBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_RotateBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_RotateBy_constructor, __jsb_cocos2dx_RotateBy_class, js_cocos2dx_RotateBy_finalize)
{
    cocos2d::RotateBy* cobj = new (std::nothrow) cocos2d::RotateBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_RotateBy_ctor, __jsb_cocos2dx_RotateBy_class, js_cocos2dx_RotateBy_finalize)
{
    cocos2d::RotateBy* cobj = new (std::nothrow) cocos2d::RotateBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_RotateBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::RotateBy)", nativeThisObject);
    cocos2d::RotateBy* cobj = (cocos2d::RotateBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_RotateBy(se::Object* obj)
{
    auto cls = se::Class::create("RotateBy", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_RotateBy_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_RotateBy_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_RotateBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_RotateBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_RotateBy_finalize);
    cls->install();

    __jsb_cocos2dx_RotateBy_proto = cls->getProto();
    __jsb_cocos2dx_RotateBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.RotateBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MoveBy_proto = nullptr;
se::Class* __jsb_cocos2dx_MoveBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MoveBy_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MoveBy* cobj = (cocos2d::MoveBy*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_MoveBy_initWithDuration : Invalid Native Object");

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MoveBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::MoveBy* result = cocos2d::MoveBy::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MoveBy>((cocos2d::MoveBy*)result, __jsb_cocos2dx_MoveBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::MoveBy* result = cocos2d::MoveBy::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MoveBy>((cocos2d::MoveBy*)result, __jsb_cocos2dx_MoveBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MoveBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MoveBy_constructor, __jsb_cocos2dx_MoveBy_class, js_cocos2dx_MoveBy_finalize)
{
    cocos2d::MoveBy* cobj = new (std::nothrow) cocos2d::MoveBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MoveBy_ctor, __jsb_cocos2dx_MoveBy_class, js_cocos2dx_MoveBy_finalize)
{
    cocos2d::MoveBy* cobj = new (std::nothrow) cocos2d::MoveBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MoveBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MoveBy)", nativeThisObject);
    cocos2d::MoveBy* cobj = (cocos2d::MoveBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MoveBy(se::Object* obj)
{
    auto cls = se::Class::create("MoveBy", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_MoveBy_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_MoveBy_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_MoveBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_MoveBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_MoveBy_finalize);
    cls->install();

    __jsb_cocos2dx_MoveBy_proto = cls->getProto();
    __jsb_cocos2dx_MoveBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MoveBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MoveTo_proto = nullptr;
se::Class* __jsb_cocos2dx_MoveTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MoveTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MoveTo* cobj = (cocos2d::MoveTo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_MoveTo_initWithDuration : Invalid Native Object");

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MoveTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec3 arg1;
            ok &= seval_to_Vec3(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::MoveTo* result = cocos2d::MoveTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MoveTo>((cocos2d::MoveTo*)result, __jsb_cocos2dx_MoveTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::MoveTo* result = cocos2d::MoveTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MoveTo>((cocos2d::MoveTo*)result, __jsb_cocos2dx_MoveTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MoveTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MoveTo_constructor, __jsb_cocos2dx_MoveTo_class, js_cocos2dx_MoveTo_finalize)
{
    cocos2d::MoveTo* cobj = new (std::nothrow) cocos2d::MoveTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MoveTo_ctor, __jsb_cocos2dx_MoveTo_class, js_cocos2dx_MoveTo_finalize)
{
    cocos2d::MoveTo* cobj = new (std::nothrow) cocos2d::MoveTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MoveTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MoveTo)", nativeThisObject);
    cocos2d::MoveTo* cobj = (cocos2d::MoveTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MoveTo(se::Object* obj)
{
    auto cls = se::Class::create("MoveTo", obj, __jsb_cocos2dx_MoveBy_proto, js_cocos2dx_MoveTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_MoveTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_MoveTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_MoveTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_MoveTo_finalize);
    cls->install();

    __jsb_cocos2dx_MoveTo_proto = cls->getProto();
    __jsb_cocos2dx_MoveTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MoveTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SkewTo_proto = nullptr;
se::Class* __jsb_cocos2dx_SkewTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SkewTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SkewTo* cobj = (cocos2d::SkewTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SkewTo_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SkewTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SkewTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SkewTo_create : Error processing arguments");
        auto result = cocos2d::SkewTo::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SkewTo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SkewTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SkewTo_constructor, __jsb_cocos2dx_SkewTo_class, js_cocos2dx_SkewTo_finalize)
{
    cocos2d::SkewTo* cobj = new (std::nothrow) cocos2d::SkewTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_SkewTo_ctor, __jsb_cocos2dx_SkewTo_class, js_cocos2dx_SkewTo_finalize)
{
    cocos2d::SkewTo* cobj = new (std::nothrow) cocos2d::SkewTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SkewTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SkewTo)", nativeThisObject);
    cocos2d::SkewTo* cobj = (cocos2d::SkewTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_SkewTo(se::Object* obj)
{
    auto cls = se::Class::create("SkewTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_SkewTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_SkewTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_SkewTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_SkewTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_SkewTo_finalize);
    cls->install();

    __jsb_cocos2dx_SkewTo_proto = cls->getProto();
    __jsb_cocos2dx_SkewTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.SkewTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SkewBy_proto = nullptr;
se::Class* __jsb_cocos2dx_SkewBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SkewBy_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SkewBy* cobj = (cocos2d::SkewBy*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SkewBy_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SkewBy_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SkewBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SkewBy_create : Error processing arguments");
        auto result = cocos2d::SkewBy::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SkewBy_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SkewBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SkewBy_constructor, __jsb_cocos2dx_SkewBy_class, js_cocos2dx_SkewBy_finalize)
{
    cocos2d::SkewBy* cobj = new (std::nothrow) cocos2d::SkewBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_SkewBy_ctor, __jsb_cocos2dx_SkewBy_class, js_cocos2dx_SkewBy_finalize)
{
    cocos2d::SkewBy* cobj = new (std::nothrow) cocos2d::SkewBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SkewBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SkewBy)", nativeThisObject);
    cocos2d::SkewBy* cobj = (cocos2d::SkewBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_SkewBy(se::Object* obj)
{
    auto cls = se::Class::create("SkewBy", obj, __jsb_cocos2dx_SkewTo_proto, js_cocos2dx_SkewBy_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_SkewBy_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_SkewBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_SkewBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_SkewBy_finalize);
    cls->install();

    __jsb_cocos2dx_SkewBy_proto = cls->getProto();
    __jsb_cocos2dx_SkewBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.SkewBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_JumpBy_proto = nullptr;
se::Class* __jsb_cocos2dx_JumpBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_JumpBy_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpBy* cobj = (cocos2d::JumpBy*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpBy_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpBy_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpBy_create : Error processing arguments");
        auto result = cocos2d::JumpBy::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_JumpBy_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_JumpBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_JumpBy_constructor, __jsb_cocos2dx_JumpBy_class, js_cocos2dx_JumpBy_finalize)
{
    cocos2d::JumpBy* cobj = new (std::nothrow) cocos2d::JumpBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_JumpBy_ctor, __jsb_cocos2dx_JumpBy_class, js_cocos2dx_JumpBy_finalize)
{
    cocos2d::JumpBy* cobj = new (std::nothrow) cocos2d::JumpBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_JumpBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::JumpBy)", nativeThisObject);
    cocos2d::JumpBy* cobj = (cocos2d::JumpBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_JumpBy(se::Object* obj)
{
    auto cls = se::Class::create("JumpBy", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_JumpBy_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_JumpBy_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_JumpBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_JumpBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_JumpBy_finalize);
    cls->install();

    __jsb_cocos2dx_JumpBy_proto = cls->getProto();
    __jsb_cocos2dx_JumpBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.JumpBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_JumpTo_proto = nullptr;
se::Class* __jsb_cocos2dx_JumpTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_JumpTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTo* cobj = (cocos2d::JumpTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTo_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTo_create : Error processing arguments");
        auto result = cocos2d::JumpTo::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_JumpTo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_JumpTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_JumpTo_constructor, __jsb_cocos2dx_JumpTo_class, js_cocos2dx_JumpTo_finalize)
{
    cocos2d::JumpTo* cobj = new (std::nothrow) cocos2d::JumpTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_JumpTo_ctor, __jsb_cocos2dx_JumpTo_class, js_cocos2dx_JumpTo_finalize)
{
    cocos2d::JumpTo* cobj = new (std::nothrow) cocos2d::JumpTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_JumpTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::JumpTo)", nativeThisObject);
    cocos2d::JumpTo* cobj = (cocos2d::JumpTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_JumpTo(se::Object* obj)
{
    auto cls = se::Class::create("JumpTo", obj, __jsb_cocos2dx_JumpBy_proto, js_cocos2dx_JumpTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_JumpTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_JumpTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_JumpTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_JumpTo_finalize);
    cls->install();

    __jsb_cocos2dx_JumpTo_proto = cls->getProto();
    __jsb_cocos2dx_JumpTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.JumpTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_BezierBy_proto = nullptr;
se::Class* __jsb_cocos2dx_BezierBy_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_BezierBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_BezierBy_constructor, __jsb_cocos2dx_BezierBy_class, js_cocos2dx_BezierBy_finalize)
{
    cocos2d::BezierBy* cobj = new (std::nothrow) cocos2d::BezierBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_BezierBy_ctor, __jsb_cocos2dx_BezierBy_class, js_cocos2dx_BezierBy_finalize)
{
    cocos2d::BezierBy* cobj = new (std::nothrow) cocos2d::BezierBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_BezierBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::BezierBy)", nativeThisObject);
    cocos2d::BezierBy* cobj = (cocos2d::BezierBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_BezierBy(se::Object* obj)
{
    auto cls = se::Class::create("BezierBy", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_BezierBy_constructor);

    cls->defineFunction("ctor", js_cocos2dx_BezierBy_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_BezierBy_finalize);
    cls->install();

    __jsb_cocos2dx_BezierBy_proto = cls->getProto();
    __jsb_cocos2dx_BezierBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.BezierBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_BezierTo_proto = nullptr;
se::Class* __jsb_cocos2dx_BezierTo_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_BezierTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_BezierTo_constructor, __jsb_cocos2dx_BezierTo_class, js_cocos2dx_BezierTo_finalize)
{
    cocos2d::BezierTo* cobj = new (std::nothrow) cocos2d::BezierTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_BezierTo_ctor, __jsb_cocos2dx_BezierTo_class, js_cocos2dx_BezierTo_finalize)
{
    cocos2d::BezierTo* cobj = new (std::nothrow) cocos2d::BezierTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_BezierTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::BezierTo)", nativeThisObject);
    cocos2d::BezierTo* cobj = (cocos2d::BezierTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_BezierTo(se::Object* obj)
{
    auto cls = se::Class::create("BezierTo", obj, __jsb_cocos2dx_BezierBy_proto, js_cocos2dx_BezierTo_constructor);

    cls->defineFunction("ctor", js_cocos2dx_BezierTo_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_BezierTo_finalize);
    cls->install();

    __jsb_cocos2dx_BezierTo_proto = cls->getProto();
    __jsb_cocos2dx_BezierTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.BezierTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ScaleTo_proto = nullptr;
se::Class* __jsb_cocos2dx_ScaleTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ScaleTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ScaleTo* cobj = (cocos2d::ScaleTo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ScaleTo_initWithDuration : Invalid Native Object");

    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ScaleTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleTo* result = cocos2d::ScaleTo::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleTo>((cocos2d::ScaleTo*)result, __jsb_cocos2dx_ScaleTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleTo* result = cocos2d::ScaleTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleTo>((cocos2d::ScaleTo*)result, __jsb_cocos2dx_ScaleTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleTo* result = cocos2d::ScaleTo::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleTo>((cocos2d::ScaleTo*)result, __jsb_cocos2dx_ScaleTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ScaleTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ScaleTo_constructor, __jsb_cocos2dx_ScaleTo_class, js_cocos2dx_ScaleTo_finalize)
{
    cocos2d::ScaleTo* cobj = new (std::nothrow) cocos2d::ScaleTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ScaleTo_ctor, __jsb_cocos2dx_ScaleTo_class, js_cocos2dx_ScaleTo_finalize)
{
    cocos2d::ScaleTo* cobj = new (std::nothrow) cocos2d::ScaleTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ScaleTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ScaleTo)", nativeThisObject);
    cocos2d::ScaleTo* cobj = (cocos2d::ScaleTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ScaleTo(se::Object* obj)
{
    auto cls = se::Class::create("ScaleTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ScaleTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ScaleTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_ScaleTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ScaleTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_ScaleTo_finalize);
    cls->install();

    __jsb_cocos2dx_ScaleTo_proto = cls->getProto();
    __jsb_cocos2dx_ScaleTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ScaleTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ScaleBy_proto = nullptr;
se::Class* __jsb_cocos2dx_ScaleBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ScaleBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleBy* result = cocos2d::ScaleBy::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleBy>((cocos2d::ScaleBy*)result, __jsb_cocos2dx_ScaleBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleBy* result = cocos2d::ScaleBy::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleBy>((cocos2d::ScaleBy*)result, __jsb_cocos2dx_ScaleBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::ScaleBy* result = cocos2d::ScaleBy::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ScaleBy>((cocos2d::ScaleBy*)result, __jsb_cocos2dx_ScaleBy_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ScaleBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ScaleBy_constructor, __jsb_cocos2dx_ScaleBy_class, js_cocos2dx_ScaleBy_finalize)
{
    cocos2d::ScaleBy* cobj = new (std::nothrow) cocos2d::ScaleBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ScaleBy_ctor, __jsb_cocos2dx_ScaleBy_class, js_cocos2dx_ScaleBy_finalize)
{
    cocos2d::ScaleBy* cobj = new (std::nothrow) cocos2d::ScaleBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ScaleBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ScaleBy)", nativeThisObject);
    cocos2d::ScaleBy* cobj = (cocos2d::ScaleBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ScaleBy(se::Object* obj)
{
    auto cls = se::Class::create("ScaleBy", obj, __jsb_cocos2dx_ScaleTo_proto, js_cocos2dx_ScaleBy_constructor);

    cls->defineFunction("ctor", js_cocos2dx_ScaleBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ScaleBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_ScaleBy_finalize);
    cls->install();

    __jsb_cocos2dx_ScaleBy_proto = cls->getProto();
    __jsb_cocos2dx_ScaleBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ScaleBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Blink_proto = nullptr;
se::Class* __jsb_cocos2dx_Blink_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Blink_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Blink* cobj = (cocos2d::Blink*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Blink_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Blink_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Blink_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Blink_create : Error processing arguments");
        auto result = cocos2d::Blink::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Blink_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Blink_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Blink_constructor, __jsb_cocos2dx_Blink_class, js_cocos2dx_Blink_finalize)
{
    cocos2d::Blink* cobj = new (std::nothrow) cocos2d::Blink();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Blink_ctor, __jsb_cocos2dx_Blink_class, js_cocos2dx_Blink_finalize)
{
    cocos2d::Blink* cobj = new (std::nothrow) cocos2d::Blink();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Blink_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Blink)", nativeThisObject);
    cocos2d::Blink* cobj = (cocos2d::Blink*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Blink(se::Object* obj)
{
    auto cls = se::Class::create("Blink", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_Blink_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_Blink_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_Blink_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Blink_create);
    cls->defineFinalizedFunction(js_cocos2dx_Blink_finalize);
    cls->install();

    __jsb_cocos2dx_Blink_proto = cls->getProto();
    __jsb_cocos2dx_Blink_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Blink.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeTo_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeTo* cobj = (cocos2d::FadeTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        uint8_t arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint8(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        uint8_t arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint8(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeTo_create : Error processing arguments");
        auto result = cocos2d::FadeTo::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeTo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeTo_constructor, __jsb_cocos2dx_FadeTo_class, js_cocos2dx_FadeTo_finalize)
{
    cocos2d::FadeTo* cobj = new (std::nothrow) cocos2d::FadeTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeTo_ctor, __jsb_cocos2dx_FadeTo_class, js_cocos2dx_FadeTo_finalize)
{
    cocos2d::FadeTo* cobj = new (std::nothrow) cocos2d::FadeTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeTo)", nativeThisObject);
    cocos2d::FadeTo* cobj = (cocos2d::FadeTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeTo(se::Object* obj)
{
    auto cls = se::Class::create("FadeTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_FadeTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_FadeTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_FadeTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeTo_finalize);
    cls->install();

    __jsb_cocos2dx_FadeTo_proto = cls->getProto();
    __jsb_cocos2dx_FadeTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeIn_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeIn_setReverseAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeIn* cobj = (cocos2d::FadeIn*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeIn_setReverseAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::FadeTo* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeIn_setReverseAction : Error processing arguments");
        cobj->setReverseAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeIn_create : Error processing arguments");
        auto result = cocos2d::FadeIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeIn_constructor, __jsb_cocos2dx_FadeIn_class, js_cocos2dx_FadeIn_finalize)
{
    cocos2d::FadeIn* cobj = new (std::nothrow) cocos2d::FadeIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeIn_ctor, __jsb_cocos2dx_FadeIn_class, js_cocos2dx_FadeIn_finalize)
{
    cocos2d::FadeIn* cobj = new (std::nothrow) cocos2d::FadeIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeIn)", nativeThisObject);
    cocos2d::FadeIn* cobj = (cocos2d::FadeIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeIn(se::Object* obj)
{
    auto cls = se::Class::create("FadeIn", obj, __jsb_cocos2dx_FadeTo_proto, js_cocos2dx_FadeIn_constructor);

    cls->defineFunction("setReverseAction", js_cocos2dx_FadeIn_setReverseAction);
    cls->defineFunction("ctor", js_cocos2dx_FadeIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeIn_finalize);
    cls->install();

    __jsb_cocos2dx_FadeIn_proto = cls->getProto();
    __jsb_cocos2dx_FadeIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeOut_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeOut_setReverseAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeOut* cobj = (cocos2d::FadeOut*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeOut_setReverseAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::FadeTo* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOut_setReverseAction : Error processing arguments");
        cobj->setReverseAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOut_create : Error processing arguments");
        auto result = cocos2d::FadeOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeOut_constructor, __jsb_cocos2dx_FadeOut_class, js_cocos2dx_FadeOut_finalize)
{
    cocos2d::FadeOut* cobj = new (std::nothrow) cocos2d::FadeOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeOut_ctor, __jsb_cocos2dx_FadeOut_class, js_cocos2dx_FadeOut_finalize)
{
    cocos2d::FadeOut* cobj = new (std::nothrow) cocos2d::FadeOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeOut)", nativeThisObject);
    cocos2d::FadeOut* cobj = (cocos2d::FadeOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeOut(se::Object* obj)
{
    auto cls = se::Class::create("FadeOut", obj, __jsb_cocos2dx_FadeTo_proto, js_cocos2dx_FadeOut_constructor);

    cls->defineFunction("setReverseAction", js_cocos2dx_FadeOut_setReverseAction);
    cls->defineFunction("ctor", js_cocos2dx_FadeOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeOut_finalize);
    cls->install();

    __jsb_cocos2dx_FadeOut_proto = cls->getProto();
    __jsb_cocos2dx_FadeOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TintTo_proto = nullptr;
se::Class* __jsb_cocos2dx_TintTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TintTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TintTo* cobj = (cocos2d::TintTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TintTo_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        uint8_t arg1;
        uint8_t arg2;
        uint8_t arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint8(args[1], &arg1);
        ok &= seval_to_uint8(args[2], &arg2);
        ok &= seval_to_uint8(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TintTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TintTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg1;
            ok &= seval_to_Color3B(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TintTo* result = cocos2d::TintTo::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TintTo>((cocos2d::TintTo*)result, __jsb_cocos2dx_TintTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            uint8_t arg1;
            ok &= seval_to_uint8(args[1], &arg1);
            if (!ok) { ok = true; break; }
            uint8_t arg2;
            ok &= seval_to_uint8(args[2], &arg2);
            if (!ok) { ok = true; break; }
            uint8_t arg3;
            ok &= seval_to_uint8(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TintTo* result = cocos2d::TintTo::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TintTo>((cocos2d::TintTo*)result, __jsb_cocos2dx_TintTo_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TintTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TintTo_constructor, __jsb_cocos2dx_TintTo_class, js_cocos2dx_TintTo_finalize)
{
    cocos2d::TintTo* cobj = new (std::nothrow) cocos2d::TintTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TintTo_ctor, __jsb_cocos2dx_TintTo_class, js_cocos2dx_TintTo_finalize)
{
    cocos2d::TintTo* cobj = new (std::nothrow) cocos2d::TintTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TintTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TintTo)", nativeThisObject);
    cocos2d::TintTo* cobj = (cocos2d::TintTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TintTo(se::Object* obj)
{
    auto cls = se::Class::create("TintTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_TintTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_TintTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_TintTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TintTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_TintTo_finalize);
    cls->install();

    __jsb_cocos2dx_TintTo_proto = cls->getProto();
    __jsb_cocos2dx_TintTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TintTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TintBy_proto = nullptr;
se::Class* __jsb_cocos2dx_TintBy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TintBy_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TintBy* cobj = (cocos2d::TintBy*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TintBy_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        int16_t arg1 = 0;
        int16_t arg2 = 0;
        int16_t arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_int16(args[1], &arg1);
        ok &= seval_to_int16(args[2], &arg2);
        ok &= seval_to_int16(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TintBy_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TintBy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        int16_t arg1 = 0;
        int16_t arg2 = 0;
        int16_t arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_int16(args[1], &arg1);
        ok &= seval_to_int16(args[2], &arg2);
        ok &= seval_to_int16(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TintBy_create : Error processing arguments");
        auto result = cocos2d::TintBy::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TintBy_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TintBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TintBy_constructor, __jsb_cocos2dx_TintBy_class, js_cocos2dx_TintBy_finalize)
{
    cocos2d::TintBy* cobj = new (std::nothrow) cocos2d::TintBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TintBy_ctor, __jsb_cocos2dx_TintBy_class, js_cocos2dx_TintBy_finalize)
{
    cocos2d::TintBy* cobj = new (std::nothrow) cocos2d::TintBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TintBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TintBy)", nativeThisObject);
    cocos2d::TintBy* cobj = (cocos2d::TintBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TintBy(se::Object* obj)
{
    auto cls = se::Class::create("TintBy", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_TintBy_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_TintBy_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_TintBy_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TintBy_create);
    cls->defineFinalizedFunction(js_cocos2dx_TintBy_finalize);
    cls->install();

    __jsb_cocos2dx_TintBy_proto = cls->getProto();
    __jsb_cocos2dx_TintBy_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TintBy.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_DelayTime_proto = nullptr;
se::Class* __jsb_cocos2dx_DelayTime_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_DelayTime_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DelayTime_create : Error processing arguments");
        auto result = cocos2d::DelayTime::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_DelayTime_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_DelayTime_finalize)

SE_CTOR_BEGIN(js_cocos2dx_DelayTime_constructor, __jsb_cocos2dx_DelayTime_class, js_cocos2dx_DelayTime_finalize)
{
    cocos2d::DelayTime* cobj = new (std::nothrow) cocos2d::DelayTime();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_DelayTime_ctor, __jsb_cocos2dx_DelayTime_class, js_cocos2dx_DelayTime_finalize)
{
    cocos2d::DelayTime* cobj = new (std::nothrow) cocos2d::DelayTime();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_DelayTime_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::DelayTime)", nativeThisObject);
    cocos2d::DelayTime* cobj = (cocos2d::DelayTime*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_DelayTime(se::Object* obj)
{
    auto cls = se::Class::create("DelayTime", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_DelayTime_constructor);

    cls->defineFunction("ctor", js_cocos2dx_DelayTime_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_DelayTime_create);
    cls->defineFinalizedFunction(js_cocos2dx_DelayTime_finalize);
    cls->install();

    __jsb_cocos2dx_DelayTime_proto = cls->getProto();
    __jsb_cocos2dx_DelayTime_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.DelayTime.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ReverseTime_proto = nullptr;
se::Class* __jsb_cocos2dx_ReverseTime_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ReverseTime_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ReverseTime* cobj = (cocos2d::ReverseTime*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ReverseTime_initWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ReverseTime_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ReverseTime_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::FiniteTimeAction* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ReverseTime_create : Error processing arguments");
        auto result = cocos2d::ReverseTime::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ReverseTime_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ReverseTime_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ReverseTime_constructor, __jsb_cocos2dx_ReverseTime_class, js_cocos2dx_ReverseTime_finalize)
{
    cocos2d::ReverseTime* cobj = new (std::nothrow) cocos2d::ReverseTime();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ReverseTime_ctor, __jsb_cocos2dx_ReverseTime_class, js_cocos2dx_ReverseTime_finalize)
{
    cocos2d::ReverseTime* cobj = new (std::nothrow) cocos2d::ReverseTime();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ReverseTime_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ReverseTime)", nativeThisObject);
    cocos2d::ReverseTime* cobj = (cocos2d::ReverseTime*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ReverseTime(se::Object* obj)
{
    auto cls = se::Class::create("ReverseTime", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ReverseTime_constructor);

    cls->defineFunction("initWithAction", js_cocos2dx_ReverseTime_initWithAction);
    cls->defineFunction("ctor", js_cocos2dx_ReverseTime_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ReverseTime_create);
    cls->defineFinalizedFunction(js_cocos2dx_ReverseTime_finalize);
    cls->install();

    __jsb_cocos2dx_ReverseTime_proto = cls->getProto();
    __jsb_cocos2dx_ReverseTime_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ReverseTime.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Animate_proto = nullptr;
se::Class* __jsb_cocos2dx_Animate_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Animate_initWithAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animate* cobj = (cocos2d::Animate*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animate_initWithAnimation : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Animation* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animate_initWithAnimation : Error processing arguments");
        bool result = cobj->initWithAnimation(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animate_getAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animate* cobj = (cocos2d::Animate*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Animate_getAnimation : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::Animation* result = cobj->getAnimation();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::Animation* result = cobj->getAnimation();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animate_getCurrentFrameIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animate* cobj = (cocos2d::Animate*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animate_getCurrentFrameIndex : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getCurrentFrameIndex();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animate_setAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Animate* cobj = (cocos2d::Animate*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Animate_setAnimation : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Animation* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animate_setAnimation : Error processing arguments");
        cobj->setAnimation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Animate_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Animation* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Animate_create : Error processing arguments");
        auto result = cocos2d::Animate::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Animate_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Animate_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Animate_constructor, __jsb_cocos2dx_Animate_class, js_cocos2dx_Animate_finalize)
{
    cocos2d::Animate* cobj = new (std::nothrow) cocos2d::Animate();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Animate_ctor, __jsb_cocos2dx_Animate_class, js_cocos2dx_Animate_finalize)
{
    cocos2d::Animate* cobj = new (std::nothrow) cocos2d::Animate();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Animate_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Animate)", nativeThisObject);
    cocos2d::Animate* cobj = (cocos2d::Animate*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Animate(se::Object* obj)
{
    auto cls = se::Class::create("Animate", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_Animate_constructor);

    cls->defineFunction("initWithAnimation", js_cocos2dx_Animate_initWithAnimation);
    cls->defineFunction("getAnimation", js_cocos2dx_Animate_getAnimation);
    cls->defineFunction("getCurrentFrameIndex", js_cocos2dx_Animate_getCurrentFrameIndex);
    cls->defineFunction("setAnimation", js_cocos2dx_Animate_setAnimation);
    cls->defineFunction("ctor", js_cocos2dx_Animate_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Animate_create);
    cls->defineFinalizedFunction(js_cocos2dx_Animate_finalize);
    cls->install();

    __jsb_cocos2dx_Animate_proto = cls->getProto();
    __jsb_cocos2dx_Animate_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Animate.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TargetedAction_proto = nullptr;
se::Class* __jsb_cocos2dx_TargetedAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TargetedAction_getForcedTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TargetedAction* cobj = (cocos2d::TargetedAction*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TargetedAction_getForcedTarget : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::Node* result = cobj->getForcedTarget();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::Node* result = cobj->getForcedTarget();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TargetedAction_initWithTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TargetedAction* cobj = (cocos2d::TargetedAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TargetedAction_initWithTarget : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        cocos2d::FiniteTimeAction* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TargetedAction_initWithTarget : Error processing arguments");
        bool result = cobj->initWithTarget(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TargetedAction_setForcedTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TargetedAction* cobj = (cocos2d::TargetedAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TargetedAction_setForcedTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TargetedAction_setForcedTarget : Error processing arguments");
        cobj->setForcedTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TargetedAction_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        cocos2d::FiniteTimeAction* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TargetedAction_create : Error processing arguments");
        auto result = cocos2d::TargetedAction::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TargetedAction_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TargetedAction_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TargetedAction_constructor, __jsb_cocos2dx_TargetedAction_class, js_cocos2dx_TargetedAction_finalize)
{
    cocos2d::TargetedAction* cobj = new (std::nothrow) cocos2d::TargetedAction();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TargetedAction_ctor, __jsb_cocos2dx_TargetedAction_class, js_cocos2dx_TargetedAction_finalize)
{
    cocos2d::TargetedAction* cobj = new (std::nothrow) cocos2d::TargetedAction();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TargetedAction_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TargetedAction)", nativeThisObject);
    cocos2d::TargetedAction* cobj = (cocos2d::TargetedAction*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TargetedAction(se::Object* obj)
{
    auto cls = se::Class::create("TargetedAction", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_TargetedAction_constructor);

    cls->defineFunction("getForcedTarget", js_cocos2dx_TargetedAction_getForcedTarget);
    cls->defineFunction("initWithTarget", js_cocos2dx_TargetedAction_initWithTarget);
    cls->defineFunction("setForcedTarget", js_cocos2dx_TargetedAction_setForcedTarget);
    cls->defineFunction("ctor", js_cocos2dx_TargetedAction_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TargetedAction_create);
    cls->defineFinalizedFunction(js_cocos2dx_TargetedAction_finalize);
    cls->install();

    __jsb_cocos2dx_TargetedAction_proto = cls->getProto();
    __jsb_cocos2dx_TargetedAction_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TargetedAction.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ActionFloat_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionFloat_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionFloat_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionFloat* cobj = (cocos2d::ActionFloat*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionFloat_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        std::function<void (float)> arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        do {
		    if (args[3].isObject() && args[3].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[3]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](float larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= float_to_seval(larg0, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionFloat_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionFloat_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        std::function<void (float)> arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        do {
		    if (args[3].isObject() && args[3].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[3]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](float larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= float_to_seval(larg0, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionFloat_create : Error processing arguments");
        auto result = cocos2d::ActionFloat::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ActionFloat_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ActionFloat_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ActionFloat_constructor, __jsb_cocos2dx_ActionFloat_class, js_cocos2dx_ActionFloat_finalize)
{
    cocos2d::ActionFloat* cobj = new (std::nothrow) cocos2d::ActionFloat();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ActionFloat_ctor, __jsb_cocos2dx_ActionFloat_class, js_cocos2dx_ActionFloat_finalize)
{
    cocos2d::ActionFloat* cobj = new (std::nothrow) cocos2d::ActionFloat();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ActionFloat_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ActionFloat)", nativeThisObject);
    cocos2d::ActionFloat* cobj = (cocos2d::ActionFloat*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ActionFloat(se::Object* obj)
{
    auto cls = se::Class::create("ActionFloat", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ActionFloat_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ActionFloat_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_ActionFloat_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ActionFloat_create);
    cls->defineFinalizedFunction(js_cocos2dx_ActionFloat_finalize);
    cls->install();

    __jsb_cocos2dx_ActionFloat_proto = cls->getProto();
    __jsb_cocos2dx_ActionFloat_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ActionFloat.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Configuration_proto = nullptr;
se::Class* __jsb_cocos2dx_Configuration_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsPVRTC, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsPVRTC : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsPVRTC();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsOESDepth24, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsOESDepth24 : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsOESDepth24();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxModelviewStackDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxModelviewStackDepth : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxModelviewStackDepth();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsShareableVAO, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsShareableVAO : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsShareableVAO();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsBGRA8888, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsBGRA8888 : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsBGRA8888();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_checkForGLExtension, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_checkForGLExtension : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Configuration_checkForGLExtension : Error processing arguments");
        bool result = cobj->checkForGLExtension(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsATITC, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsATITC : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsATITC();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsNPOT, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsNPOT : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsNPOT();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getAnimate3DQuality, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getAnimate3DQuality : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getAnimate3DQuality();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxSupportPointLightInShader, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxSupportPointLightInShader : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxSupportPointLightInShader();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxTextureSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxTextureSize : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxTextureSize();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_setValue, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_setValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        cocos2d::Value arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_ccvalue(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Configuration_setValue : Error processing arguments");
        cobj->setValue(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxSupportSpotLightInShader, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxSupportSpotLightInShader : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxSupportSpotLightInShader();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsETC, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsETC : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsETC();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxSupportDirLightInShader, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxSupportDirLightInShader : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxSupportDirLightInShader();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_loadConfigFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_loadConfigFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Configuration_loadConfigFile : Error processing arguments");
        cobj->loadConfigFile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsDiscardFramebuffer, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsDiscardFramebuffer : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsDiscardFramebuffer();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsOESPackedDepthStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsOESPackedDepthStencil : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsOESPackedDepthStencil();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsS3TC, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsS3TC : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsS3TC();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getInfo : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getInfo();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getMaxTextureUnits, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getMaxTextureUnits : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMaxTextureUnits();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getValue, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_getValue : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Configuration_getValue : Error processing arguments");
        const cocos2d::Value& result = cobj->getValue(arg0);
        se::Value jsret;
        ok &= ccvalue_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        std::string arg0;
        cocos2d::Value arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_ccvalue(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Configuration_getValue : Error processing arguments");
        const cocos2d::Value& result = cobj->getValue(arg0, arg1);
        se::Value jsret;
        ok &= ccvalue_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_gatherGPUInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_gatherGPUInfo : Invalid Native Object");
    if (argc == 0) {
        cobj->gatherGPUInfo();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_supportsMapBuffer, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Configuration* cobj = (cocos2d::Configuration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Configuration_supportsMapBuffer : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->supportsMapBuffer();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_destroyInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::Configuration::destroyInstance();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Configuration_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Configuration::getInstance();
        se::Object* obj = nullptr;
        if (result->_scriptObject == nullptr)
        {
            obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Configuration_class, true);
            obj->setPrivateData(result);
            result->_scriptObject = obj;
        }
        else
        {
            obj = se::Object::getObjectWithPtr(result);
        }
        assert(obj);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Configuration(se::Object* obj)
{
    auto cls = se::Class::create("Configuration", obj, nullptr, nullptr);

    cls->defineFunction("supportsPVRTC", js_cocos2dx_Configuration_supportsPVRTC);
    cls->defineFunction("supportsOESDepth24", js_cocos2dx_Configuration_supportsOESDepth24);
    cls->defineFunction("getMaxModelviewStackDepth", js_cocos2dx_Configuration_getMaxModelviewStackDepth);
    cls->defineFunction("supportsShareableVAO", js_cocos2dx_Configuration_supportsShareableVAO);
    cls->defineFunction("supportsBGRA8888", js_cocos2dx_Configuration_supportsBGRA8888);
    cls->defineFunction("checkForGLExtension", js_cocos2dx_Configuration_checkForGLExtension);
    cls->defineFunction("supportsATITC", js_cocos2dx_Configuration_supportsATITC);
    cls->defineFunction("supportsNPOT", js_cocos2dx_Configuration_supportsNPOT);
    cls->defineFunction("init", js_cocos2dx_Configuration_init);
    cls->defineFunction("getAnimate3DQuality", js_cocos2dx_Configuration_getAnimate3DQuality);
    cls->defineFunction("getMaxSupportPointLightInShader", js_cocos2dx_Configuration_getMaxSupportPointLightInShader);
    cls->defineFunction("getMaxTextureSize", js_cocos2dx_Configuration_getMaxTextureSize);
    cls->defineFunction("setValue", js_cocos2dx_Configuration_setValue);
    cls->defineFunction("getMaxSupportSpotLightInShader", js_cocos2dx_Configuration_getMaxSupportSpotLightInShader);
    cls->defineFunction("supportsETC", js_cocos2dx_Configuration_supportsETC);
    cls->defineFunction("getMaxSupportDirLightInShader", js_cocos2dx_Configuration_getMaxSupportDirLightInShader);
    cls->defineFunction("loadConfigFile", js_cocos2dx_Configuration_loadConfigFile);
    cls->defineFunction("supportsDiscardFramebuffer", js_cocos2dx_Configuration_supportsDiscardFramebuffer);
    cls->defineFunction("supportsOESPackedDepthStencil", js_cocos2dx_Configuration_supportsOESPackedDepthStencil);
    cls->defineFunction("supportsS3TC", js_cocos2dx_Configuration_supportsS3TC);
    cls->defineFunction("dumpInfo", js_cocos2dx_Configuration_getInfo);
    cls->defineFunction("getMaxTextureUnits", js_cocos2dx_Configuration_getMaxTextureUnits);
    cls->defineFunction("getValue", js_cocos2dx_Configuration_getValue);
    cls->defineFunction("gatherGPUInfo", js_cocos2dx_Configuration_gatherGPUInfo);
    cls->defineFunction("supportsMapBuffer", js_cocos2dx_Configuration_supportsMapBuffer);
    cls->defineStaticFunction("destroyInstance", js_cocos2dx_Configuration_destroyInstance);
    cls->defineStaticFunction("getInstance", js_cocos2dx_Configuration_getInstance);
    cls->install();

    __jsb_cocos2dx_Configuration_proto = cls->getProto();
    __jsb_cocos2dx_Configuration_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Properties_proto = nullptr;
se::Class* __jsb_cocos2dx_Properties_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Properties_getVariable, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getVariable : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        const char* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getVariable : Error processing arguments");
        const char* result = cobj->getVariable(arg0, arg1);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getString : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        const char* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getString : Error processing arguments");
        const char* result = cobj->getString(arg0, arg1);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getLong, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getLong : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getLong : Error processing arguments");
        long result = cobj->getLong(arg0);
        se::Value jsret;
        ok &= long_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getNamespace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Properties_getNamespace : Invalid Native Object");

    do {
        if (argc == 0) {
            const char* result = cobj->getNamespace();
            se::Value jsret;
            ok &= std_string_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::Properties* result = cobj->getNamespace(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Properties>((cocos2d::Properties*)result, __jsb_cocos2dx_Properties_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool arg1;
            ok &= seval_to_boolean(args[1], &arg1);
            cocos2d::Properties* result = cobj->getNamespace(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Properties>((cocos2d::Properties*)result, __jsb_cocos2dx_Properties_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool arg1;
            ok &= seval_to_boolean(args[1], &arg1);
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            cocos2d::Properties* result = cobj->getNamespace(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Properties>((cocos2d::Properties*)result, __jsb_cocos2dx_Properties_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getPath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getPath : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        std::string* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        #pragma warning NO CONVERSION TO NATIVE FOR std::string*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getPath : Error processing arguments");
        bool result = cobj->getPath(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getMat4, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getMat4 : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Mat4* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getMat4 : Error processing arguments");
        bool result = cobj->getMat4(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_exists, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_exists : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_exists : Error processing arguments");
        bool result = cobj->exists(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_setString : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        const char* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_setString : Error processing arguments");
        bool result = cobj->setString(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getId, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getId : Invalid Native Object");
    if (argc == 0) {
        const char* result = cobj->getId();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_rewind, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_rewind : Invalid Native Object");
    if (argc == 0) {
        cobj->rewind();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_setVariable, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_setVariable : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        const char* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_setVariable : Error processing arguments");
        cobj->setVariable(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getBool, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getBool : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getBool : Error processing arguments");
        bool result = cobj->getBool(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        const char* arg0 = nullptr;
        bool arg1;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getBool : Error processing arguments");
        bool result = cobj->getBool(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Properties_getColor : Invalid Native Object");

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::Vec4* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->getColor(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::Vec3* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->getColor(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getType : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getType : Error processing arguments");
        int result = (int)cobj->getType(arg0);
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getNextNamespace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getNextNamespace : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Properties* result = cobj->getNextNamespace();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Properties>((cocos2d::Properties*)result, __jsb_cocos2dx_Properties_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getInt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getInt : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getInt : Error processing arguments");
        int result = cobj->getInt(arg0);
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getVec3, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getVec3 : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec3* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getVec3 : Error processing arguments");
        bool result = cobj->getVec3(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getVec2, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getVec2 : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec2* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[1], &tempData);arg1=tempData.data();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getVec2 : Error processing arguments");
        bool result = cobj->getVec2(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getVec4, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getVec4 : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec4* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getVec4 : Error processing arguments");
        bool result = cobj->getVec4(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getNextProperty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getNextProperty : Invalid Native Object");
    if (argc == 0) {
        const char* result = cobj->getNextProperty();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getFloat, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getFloat : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getFloat : Error processing arguments");
        float result = cobj->getFloat(arg0);
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_getQuaternionFromAxisAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Properties* cobj = (cocos2d::Properties*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Properties_getQuaternionFromAxisAngle : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Quaternion* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_getQuaternionFromAxisAngle : Error processing arguments");
        bool result = cobj->getQuaternionFromAxisAngle(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_parseColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::Vec4* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cocos2d::Properties::parseColor(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::Vec3* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cocos2d::Properties::parseColor(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_parseVec3, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec3* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_parseVec3 : Error processing arguments");
        bool result = cocos2d::Properties::parseVec3(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_parseAxisAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Quaternion* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_parseAxisAngle : Error processing arguments");
        bool result = cocos2d::Properties::parseAxisAngle(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_parseVec2, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec2* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[1], &tempData);arg1=tempData.data();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_parseVec2 : Error processing arguments");
        bool result = cocos2d::Properties::parseVec2(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_createNonRefCounted, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_createNonRefCounted : Error processing arguments");
        cocos2d::Properties* result = cocos2d::Properties::createNonRefCounted(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Properties>((cocos2d::Properties*)result, __jsb_cocos2dx_Properties_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Properties_parseVec4, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        cocos2d::Vec4* arg1 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Properties_parseVec4 : Error processing arguments");
        bool result = cocos2d::Properties::parseVec4(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Properties(se::Object* obj)
{
    auto cls = se::Class::create("Properties", obj, nullptr, nullptr);

    cls->defineFunction("getVariable", js_cocos2dx_Properties_getVariable);
    cls->defineFunction("getString", js_cocos2dx_Properties_getString);
    cls->defineFunction("getLong", js_cocos2dx_Properties_getLong);
    cls->defineFunction("getNamespace", js_cocos2dx_Properties_getNamespace);
    cls->defineFunction("getPath", js_cocos2dx_Properties_getPath);
    cls->defineFunction("getMat4", js_cocos2dx_Properties_getMat4);
    cls->defineFunction("exists", js_cocos2dx_Properties_exists);
    cls->defineFunction("setString", js_cocos2dx_Properties_setString);
    cls->defineFunction("getId", js_cocos2dx_Properties_getId);
    cls->defineFunction("rewind", js_cocos2dx_Properties_rewind);
    cls->defineFunction("setVariable", js_cocos2dx_Properties_setVariable);
    cls->defineFunction("getBool", js_cocos2dx_Properties_getBool);
    cls->defineFunction("getColor", js_cocos2dx_Properties_getColor);
    cls->defineFunction("getType", js_cocos2dx_Properties_getType);
    cls->defineFunction("getNextNamespace", js_cocos2dx_Properties_getNextNamespace);
    cls->defineFunction("getInt", js_cocos2dx_Properties_getInt);
    cls->defineFunction("getVec3", js_cocos2dx_Properties_getVec3);
    cls->defineFunction("getVec2", js_cocos2dx_Properties_getVec2);
    cls->defineFunction("getVec4", js_cocos2dx_Properties_getVec4);
    cls->defineFunction("getNextProperty", js_cocos2dx_Properties_getNextProperty);
    cls->defineFunction("getFloat", js_cocos2dx_Properties_getFloat);
    cls->defineFunction("getQuaternionFromAxisAngle", js_cocos2dx_Properties_getQuaternionFromAxisAngle);
    cls->defineStaticFunction("parseColor", js_cocos2dx_Properties_parseColor);
    cls->defineStaticFunction("parseVec3", js_cocos2dx_Properties_parseVec3);
    cls->defineStaticFunction("parseAxisAngle", js_cocos2dx_Properties_parseAxisAngle);
    cls->defineStaticFunction("parseVec2", js_cocos2dx_Properties_parseVec2);
    cls->defineStaticFunction("createNonRefCounted", js_cocos2dx_Properties_createNonRefCounted);
    cls->defineStaticFunction("parseVec4", js_cocos2dx_Properties_parseVec4);
    cls->install();

    __jsb_cocos2dx_Properties_proto = cls->getProto();
    __jsb_cocos2dx_Properties_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_FileUtils_proto = nullptr;
se::Class* __jsb_cocos2dx_FileUtils_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_fullPathForFilename, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_fullPathForFilename : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_fullPathForFilename : Error processing arguments");
        std::string result = cobj->fullPathForFilename(arg0);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getStringFromFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_getStringFromFile : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (std::basic_string<char>)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](std::basic_string<char> larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= std_string_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->getStringFromFile(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string result = cobj->getStringFromFile(arg0);
            se::Value jsret;
            ok &= std_string_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_removeFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_removeFile : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->removeFile(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->removeFile(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_isAbsolutePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_isAbsolutePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_isAbsolutePath : Error processing arguments");
        bool result = cobj->isAbsolutePath(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_renameFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_renameFile : Invalid Native Object");

    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg3;
            do {
			    if (args[3].isObject() && args[3].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[3]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg3 = lambda;
			    }
			    else
			    {
			        arg3 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->renameFile(arg0, arg1, arg2, arg3);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->renameFile(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->renameFile(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg2;
            do {
			    if (args[2].isObject() && args[2].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[2]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg2 = lambda;
			    }
			    else
			    {
			        arg2 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->renameFile(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getDefaultResourceRootPath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getDefaultResourceRootPath : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getDefaultResourceRootPath();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile : Error processing arguments");
        cobj->loadFilenameLookupDictionaryFromFile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_isPopupNotify, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_isPopupNotify : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isPopupNotify();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getValueVectorFromFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getValueVectorFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getValueVectorFromFile : Error processing arguments");
        cocos2d::ValueVector result = cobj->getValueVectorFromFile(arg0);
        se::Value jsret;
        ok &= ccvaluevector_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getSearchPaths, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getSearchPaths : Invalid Native Object");
    if (argc == 0) {
        const std::vector<std::string>& result = cobj->getSearchPaths();
        se::Value jsret;
        ok &= std_vector_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_writeToFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_writeToFile : Invalid Native Object");
    if (argc == 2) {
        cocos2d::ValueMap arg0;
        std::string arg1;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_writeToFile : Error processing arguments");
        bool result = cobj->writeToFile(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getOriginalSearchPaths, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getOriginalSearchPaths : Invalid Native Object");
    if (argc == 0) {
        const std::vector<std::string>& result = cobj->getOriginalSearchPaths();
        se::Value jsret;
        ok &= std_vector_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getNewFilename, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getNewFilename : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getNewFilename : Error processing arguments");
        std::string result = cobj->getNewFilename(arg0);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_listFiles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_listFiles : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_listFiles : Error processing arguments");
        std::vector<std::string> result = cobj->listFiles(arg0);
        se::Value jsret;
        ok &= std_vector_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getValueMapFromFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getValueMapFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getValueMapFromFile : Error processing arguments");
        cocos2d::ValueMap result = cobj->getValueMapFromFile(arg0);
        se::Value jsret;
        ok &= ccvaluemap_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getFileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_getFileSize : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (long)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](long larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= long_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->getFileSize(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            long result = cobj->getFileSize(arg0);
            se::Value jsret;
            ok &= long_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getValueMapFromData, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getValueMapFromData : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        int arg1 = 0;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getValueMapFromData : Error processing arguments");
        cocos2d::ValueMap result = cobj->getValueMapFromData(arg0, arg1);
        se::Value jsret;
        ok &= ccvaluemap_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_removeDirectory, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_removeDirectory : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->removeDirectory(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->removeDirectory(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setSearchPaths, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_setSearchPaths : Invalid Native Object");
    if (argc == 1) {
        std::vector<std::string> arg0;
        ok &= seval_to_std_vector_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setSearchPaths : Error processing arguments");
        cobj->setSearchPaths(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_writeStringToFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_writeStringToFile : Invalid Native Object");

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg2;
            do {
			    if (args[2].isObject() && args[2].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[2]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg2 = lambda;
			    }
			    else
			    {
			        arg2 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->writeStringToFile(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->writeStringToFile(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setSearchResolutionsOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_setSearchResolutionsOrder : Invalid Native Object");
    if (argc == 1) {
        std::vector<std::string> arg0;
        ok &= seval_to_std_vector_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setSearchResolutionsOrder : Error processing arguments");
        cobj->setSearchResolutionsOrder(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_addSearchResolutionsOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_addSearchResolutionsOrder : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_addSearchResolutionsOrder : Error processing arguments");
        cobj->addSearchResolutionsOrder(arg0);
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_addSearchResolutionsOrder : Error processing arguments");
        cobj->addSearchResolutionsOrder(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_addSearchPath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_addSearchPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_addSearchPath : Error processing arguments");
        cobj->addSearchPath(arg0);
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_addSearchPath : Error processing arguments");
        cobj->addSearchPath(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_writeValueVectorToFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_writeValueVectorToFile : Invalid Native Object");

    do {
        if (argc == 3) {
            cocos2d::ValueVector arg0;
            ok &= seval_to_ccvaluevector(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg2;
            do {
			    if (args[2].isObject() && args[2].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[2]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg2 = lambda;
			    }
			    else
			    {
			        arg2 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->writeValueVectorToFile(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::ValueVector arg0;
            ok &= seval_to_ccvaluevector(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->writeValueVectorToFile(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_isFileExist, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_isFileExist : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->isFileExist(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->isFileExist(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_purgeCachedEntries, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_purgeCachedEntries : Invalid Native Object");
    if (argc == 0) {
        cobj->purgeCachedEntries();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_fullPathFromRelativeFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_fullPathFromRelativeFile : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_fullPathFromRelativeFile : Error processing arguments");
        std::string result = cobj->fullPathFromRelativeFile(arg0, arg1);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getSuitableFOpen, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getSuitableFOpen : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getSuitableFOpen : Error processing arguments");
        std::string result = cobj->getSuitableFOpen(arg0);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_writeValueMapToFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_writeValueMapToFile : Invalid Native Object");

    do {
        if (argc == 3) {
            cocos2d::ValueMap arg0;
            ok &= seval_to_ccvaluemap(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg2;
            do {
			    if (args[2].isObject() && args[2].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[2]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg2 = lambda;
			    }
			    else
			    {
			        arg2 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->writeValueMapToFile(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::ValueMap arg0;
            ok &= seval_to_ccvaluemap(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->writeValueMapToFile(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getFileExtension, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getFileExtension : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_getFileExtension : Error processing arguments");
        std::string result = cobj->getFileExtension(arg0);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setWritablePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_setWritablePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setWritablePath : Error processing arguments");
        cobj->setWritablePath(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setPopupNotify, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_setPopupNotify : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setPopupNotify : Error processing arguments");
        cobj->setPopupNotify(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_isDirectoryExist, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_isDirectoryExist : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->isDirectoryExist(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->isDirectoryExist(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setDefaultResourceRootPath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_setDefaultResourceRootPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setDefaultResourceRootPath : Error processing arguments");
        cobj->setDefaultResourceRootPath(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getSearchResolutionsOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getSearchResolutionsOrder : Invalid Native Object");
    if (argc == 0) {
        const std::vector<std::string>& result = cobj->getSearchResolutionsOrder();
        se::Value jsret;
        ok &= std_vector_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_createDirectory, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_FileUtils_createDirectory : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (bool)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](bool larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= boolean_to_seval(larg0, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->createDirectory(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->createDirectory(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getWritablePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_getWritablePath : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getWritablePath();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_listFilesRecursively, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FileUtils* cobj = (cocos2d::FileUtils*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FileUtils_listFilesRecursively : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >* arg1 = nullptr;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_listFilesRecursively : Error processing arguments");
        cobj->listFilesRecursively(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_setDelegate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::FileUtils* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FileUtils_setDelegate : Error processing arguments");
        cocos2d::FileUtils::setDelegate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FileUtils_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::FileUtils* result = cocos2d::FileUtils::getInstance();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::FileUtils>((cocos2d::FileUtils*)result, __jsb_cocos2dx_FileUtils_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_FileUtils(se::Object* obj)
{
    auto cls = se::Class::create("FileUtils", obj, nullptr, nullptr);

    cls->defineFunction("fullPathForFilename", js_cocos2dx_FileUtils_fullPathForFilename);
    cls->defineFunction("getStringFromFile", js_cocos2dx_FileUtils_getStringFromFile);
    cls->defineFunction("removeFile", js_cocos2dx_FileUtils_removeFile);
    cls->defineFunction("isAbsolutePath", js_cocos2dx_FileUtils_isAbsolutePath);
    cls->defineFunction("renameFile", js_cocos2dx_FileUtils_renameFile);
    cls->defineFunction("getDefaultResourceRootPath", js_cocos2dx_FileUtils_getDefaultResourceRootPath);
    cls->defineFunction("loadFilenameLookup", js_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile);
    cls->defineFunction("isPopupNotify", js_cocos2dx_FileUtils_isPopupNotify);
    cls->defineFunction("getValueVectorFromFile", js_cocos2dx_FileUtils_getValueVectorFromFile);
    cls->defineFunction("getSearchPaths", js_cocos2dx_FileUtils_getSearchPaths);
    cls->defineFunction("writeToFile", js_cocos2dx_FileUtils_writeToFile);
    cls->defineFunction("getOriginalSearchPaths", js_cocos2dx_FileUtils_getOriginalSearchPaths);
    cls->defineFunction("getNewFilename", js_cocos2dx_FileUtils_getNewFilename);
    cls->defineFunction("listFiles", js_cocos2dx_FileUtils_listFiles);
    cls->defineFunction("getValueMapFromFile", js_cocos2dx_FileUtils_getValueMapFromFile);
    cls->defineFunction("getFileSize", js_cocos2dx_FileUtils_getFileSize);
    cls->defineFunction("getValueMapFromData", js_cocos2dx_FileUtils_getValueMapFromData);
    cls->defineFunction("removeDirectory", js_cocos2dx_FileUtils_removeDirectory);
    cls->defineFunction("setSearchPaths", js_cocos2dx_FileUtils_setSearchPaths);
    cls->defineFunction("writeStringToFile", js_cocos2dx_FileUtils_writeStringToFile);
    cls->defineFunction("setSearchResolutionsOrder", js_cocos2dx_FileUtils_setSearchResolutionsOrder);
    cls->defineFunction("addSearchResolutionsOrder", js_cocos2dx_FileUtils_addSearchResolutionsOrder);
    cls->defineFunction("addSearchPath", js_cocos2dx_FileUtils_addSearchPath);
    cls->defineFunction("writeValueVectorToFile", js_cocos2dx_FileUtils_writeValueVectorToFile);
    cls->defineFunction("isFileExist", js_cocos2dx_FileUtils_isFileExist);
    cls->defineFunction("purgeCachedEntries", js_cocos2dx_FileUtils_purgeCachedEntries);
    cls->defineFunction("fullPathFromRelativeFile", js_cocos2dx_FileUtils_fullPathFromRelativeFile);
    cls->defineFunction("getSuitableFOpen", js_cocos2dx_FileUtils_getSuitableFOpen);
    cls->defineFunction("writeValueMapToFile", js_cocos2dx_FileUtils_writeValueMapToFile);
    cls->defineFunction("getFileExtension", js_cocos2dx_FileUtils_getFileExtension);
    cls->defineFunction("setWritablePath", js_cocos2dx_FileUtils_setWritablePath);
    cls->defineFunction("setPopupNotify", js_cocos2dx_FileUtils_setPopupNotify);
    cls->defineFunction("isDirectoryExist", js_cocos2dx_FileUtils_isDirectoryExist);
    cls->defineFunction("setDefaultResourceRootPath", js_cocos2dx_FileUtils_setDefaultResourceRootPath);
    cls->defineFunction("getSearchResolutionsOrder", js_cocos2dx_FileUtils_getSearchResolutionsOrder);
    cls->defineFunction("createDirectory", js_cocos2dx_FileUtils_createDirectory);
    cls->defineFunction("getWritablePath", js_cocos2dx_FileUtils_getWritablePath);
    cls->defineFunction("listFilesRecursively", js_cocos2dx_FileUtils_listFilesRecursively);
    cls->defineStaticFunction("setDelegate", js_cocos2dx_FileUtils_setDelegate);
    cls->defineStaticFunction("getInstance", js_cocos2dx_FileUtils_getInstance);
    cls->install();

    __jsb_cocos2dx_FileUtils_proto = cls->getProto();
    __jsb_cocos2dx_FileUtils_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventAcceleration_proto = nullptr;
se::Class* __jsb_cocos2dx_EventAcceleration_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventAcceleration_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventAcceleration_constructor, __jsb_cocos2dx_EventAcceleration_class, js_cocos2dx_EventAcceleration_finalize)
{
    bool ok = true;
    cocos2d::Acceleration arg0;
    ok &= seval_to_Acceleration(args[0], &arg0);
    JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventAcceleration_constructor : Error processing arguments");
    cocos2d::EventAcceleration* cobj = new (std::nothrow) cocos2d::EventAcceleration(arg0);
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventAcceleration_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventAcceleration)", nativeThisObject);
    cocos2d::EventAcceleration* cobj = (cocos2d::EventAcceleration*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventAcceleration(se::Object* obj)
{
    auto cls = se::Class::create("EventAcceleration", obj, __jsb_cocos2dx_Event_proto, js_cocos2dx_EventAcceleration_constructor);

    cls->defineFinalizedFunction(js_cocos2dx_EventAcceleration_finalize);
    cls->install();

    __jsb_cocos2dx_EventAcceleration_proto = cls->getProto();
    __jsb_cocos2dx_EventAcceleration_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventCustom_proto = nullptr;
se::Class* __jsb_cocos2dx_EventCustom_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventCustom_getEventName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventCustom* cobj = (cocos2d::EventCustom*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventCustom_getEventName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getEventName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventCustom_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventCustom_constructor, __jsb_cocos2dx_EventCustom_class, js_cocos2dx_EventCustom_finalize)
{
    bool ok = true;
    std::string arg0;
    ok &= seval_to_std_string(args[0], &arg0);
    JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventCustom_constructor : Error processing arguments");
    cocos2d::EventCustom* cobj = new (std::nothrow) cocos2d::EventCustom(arg0);
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventCustom_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventCustom)", nativeThisObject);
    cocos2d::EventCustom* cobj = (cocos2d::EventCustom*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventCustom(se::Object* obj)
{
    auto cls = se::Class::create("EventCustom", obj, __jsb_cocos2dx_Event_proto, js_cocos2dx_EventCustom_constructor);

    cls->defineFunction("getEventName", js_cocos2dx_EventCustom_getEventName);
    cls->defineFinalizedFunction(js_cocos2dx_EventCustom_finalize);
    cls->install();

    __jsb_cocos2dx_EventCustom_proto = cls->getProto();
    __jsb_cocos2dx_EventCustom_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListener_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListener_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListener_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListener* cobj = (cocos2d::EventListener*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListener_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventListener_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventListener_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListener* cobj = (cocos2d::EventListener*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListener_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventListener_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListener* cobj = (cocos2d::EventListener*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListener_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::EventListener* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::EventListener>((cocos2d::EventListener*)result, __jsb_cocos2dx_EventListener_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventListener_checkAvailable, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListener* cobj = (cocos2d::EventListener*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListener_checkAvailable : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->checkAvailable();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_EventListener(se::Object* obj)
{
    auto cls = se::Class::create("EventListener", obj, nullptr, nullptr);

    cls->defineFunction("setEnabled", js_cocos2dx_EventListener_setEnabled);
    cls->defineFunction("isEnabled", js_cocos2dx_EventListener_isEnabled);
    cls->defineFunction("clone", js_cocos2dx_EventListener_clone);
    cls->defineFunction("checkAvailable", js_cocos2dx_EventListener_checkAvailable);
    cls->install();

    __jsb_cocos2dx_EventListener_proto = cls->getProto();
    __jsb_cocos2dx_EventListener_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventDispatcher_proto = nullptr;
se::Class* __jsb_cocos2dx_EventDispatcher_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_removeAllEventListeners, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_removeAllEventListeners : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllEventListeners();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority : Invalid Native Object");
    if (argc == 2) {
        cocos2d::EventListener* arg0 = nullptr;
        cocos2d::Node* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority : Error processing arguments");
        cobj->addEventListenerWithSceneGraphPriority(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority : Invalid Native Object");
    if (argc == 2) {
        cocos2d::EventListener* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority : Error processing arguments");
        cobj->addEventListenerWithFixedPriority(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_removeEventListenersForTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_EventDispatcher_removeEventListenersForTarget : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->removeEventListenersForTarget(arg0);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool arg1;
            ok &= seval_to_boolean(args[1], &arg1);
            cobj->removeEventListenersForTarget(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::EventListener::Type arg0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cobj->removeEventListenersForType(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_resumeEventListenersForTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_resumeEventListenersForTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_resumeEventListenersForTarget : Error processing arguments");
        cobj->resumeEventListenersForTarget(arg0);
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        bool arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_resumeEventListenersForTarget : Error processing arguments");
        cobj->resumeEventListenersForTarget(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_setPriority, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_setPriority : Invalid Native Object");
    if (argc == 2) {
        cocos2d::EventListener* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_setPriority : Error processing arguments");
        cobj->setPriority(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_dispatchEvent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_dispatchEvent : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Event* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_dispatchEvent : Error processing arguments");
        cobj->dispatchEvent(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_hasEventListener, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_hasEventListener : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventListener::ListenerID arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_hasEventListener : Error processing arguments");
        bool result = cobj->hasEventListener(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_pauseEventListenersForTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_pauseEventListenersForTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_pauseEventListenersForTarget : Error processing arguments");
        cobj->pauseEventListenersForTarget(arg0);
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        bool arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_pauseEventListenersForTarget : Error processing arguments");
        cobj->pauseEventListenersForTarget(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_removeCustomEventListeners, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_removeCustomEventListeners : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_removeCustomEventListeners : Error processing arguments");
        cobj->removeCustomEventListeners(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_removeEventListener, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_removeEventListener : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventListener* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventDispatcher_removeEventListener : Error processing arguments");
        cobj->removeEventListener(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventDispatcher_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventDispatcher_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventDispatcher_constructor, __jsb_cocos2dx_EventDispatcher_class, js_cocos2dx_EventDispatcher_finalize)
{
    cocos2d::EventDispatcher* cobj = new (std::nothrow) cocos2d::EventDispatcher();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventDispatcher_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventDispatcher)", nativeThisObject);
    cocos2d::EventDispatcher* cobj = (cocos2d::EventDispatcher*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventDispatcher(se::Object* obj)
{
    auto cls = se::Class::create("EventDispatcher", obj, nullptr, js_cocos2dx_EventDispatcher_constructor);

    cls->defineFunction("setEnabled", js_cocos2dx_EventDispatcher_setEnabled);
    cls->defineFunction("removeAllListeners", js_cocos2dx_EventDispatcher_removeAllEventListeners);
    cls->defineFunction("addEventListenerWithSceneGraphPriority", js_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority);
    cls->defineFunction("addEventListenerWithFixedPriority", js_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority);
    cls->defineFunction("removeListeners", js_cocos2dx_EventDispatcher_removeEventListenersForTarget);
    cls->defineFunction("resumeTarget", js_cocos2dx_EventDispatcher_resumeEventListenersForTarget);
    cls->defineFunction("setPriority", js_cocos2dx_EventDispatcher_setPriority);
    cls->defineFunction("dispatchEvent", js_cocos2dx_EventDispatcher_dispatchEvent);
    cls->defineFunction("hasEventListener", js_cocos2dx_EventDispatcher_hasEventListener);
    cls->defineFunction("pauseTarget", js_cocos2dx_EventDispatcher_pauseEventListenersForTarget);
    cls->defineFunction("removeCustomListeners", js_cocos2dx_EventDispatcher_removeCustomEventListeners);
    cls->defineFunction("removeListener", js_cocos2dx_EventDispatcher_removeEventListener);
    cls->defineFunction("isEnabled", js_cocos2dx_EventDispatcher_isEnabled);
    cls->defineFinalizedFunction(js_cocos2dx_EventDispatcher_finalize);
    cls->install();

    __jsb_cocos2dx_EventDispatcher_proto = cls->getProto();
    __jsb_cocos2dx_EventDispatcher_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventFocus_proto = nullptr;
se::Class* __jsb_cocos2dx_EventFocus_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventFocus_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventFocus_constructor, __jsb_cocos2dx_EventFocus_class, js_cocos2dx_EventFocus_finalize)
{
    bool ok = true;
    cocos2d::ui::Widget* arg0 = nullptr;
    cocos2d::ui::Widget* arg1 = nullptr;
    ok &= seval_to_native_ptr(args[0], &arg0);
    ok &= seval_to_native_ptr(args[1], &arg1);
    JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventFocus_constructor : Error processing arguments");
    cocos2d::EventFocus* cobj = new (std::nothrow) cocos2d::EventFocus(arg0, arg1);
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventFocus_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventFocus)", nativeThisObject);
    cocos2d::EventFocus* cobj = (cocos2d::EventFocus*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventFocus(se::Object* obj)
{
    auto cls = se::Class::create("EventFocus", obj, __jsb_cocos2dx_Event_proto, js_cocos2dx_EventFocus_constructor);

    cls->defineFinalizedFunction(js_cocos2dx_EventFocus_finalize);
    cls->install();

    __jsb_cocos2dx_EventFocus_proto = cls->getProto();
    __jsb_cocos2dx_EventFocus_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerAcceleration_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerAcceleration_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerAcceleration_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerAcceleration* cobj = (cocos2d::EventListenerAcceleration*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerAcceleration_init : Invalid Native Object");
    if (argc == 1) {
        std::function<void (cocos2d::Acceleration *, cocos2d::Event *)> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Acceleration* larg0, cocos2d::Event* larg1) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(2);
		            ok &= Acceleration_to_seval(larg0, &args[0]);
		            ok &= native_ptr_to_seval<cocos2d::Event>((cocos2d::Event*)larg1, __jsb_cocos2dx_EventListenerAcceleration_class, &args[1]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventListenerAcceleration_init : Error processing arguments");
        bool result = cobj->init(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerAcceleration_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerAcceleration_constructor, __jsb_cocos2dx_EventListenerAcceleration_class, js_cocos2dx_EventListenerAcceleration_finalize)
{
    cocos2d::EventListenerAcceleration* cobj = new (std::nothrow) cocos2d::EventListenerAcceleration();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerAcceleration_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerAcceleration)", nativeThisObject);
    cocos2d::EventListenerAcceleration* cobj = (cocos2d::EventListenerAcceleration*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerAcceleration(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerAcceleration", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerAcceleration_constructor);

    cls->defineFunction("init", js_cocos2dx_EventListenerAcceleration_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerAcceleration_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerAcceleration_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerAcceleration_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerCustom_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerCustom_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerCustom_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerCustom_constructor, __jsb_cocos2dx_EventListenerCustom_class, js_cocos2dx_EventListenerCustom_finalize)
{
    cocos2d::EventListenerCustom* cobj = new (std::nothrow) cocos2d::EventListenerCustom();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerCustom_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerCustom)", nativeThisObject);
    cocos2d::EventListenerCustom* cobj = (cocos2d::EventListenerCustom*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerCustom(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerCustom", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerCustom_constructor);

    cls->defineFinalizedFunction(js_cocos2dx_EventListenerCustom_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerCustom_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerCustom_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerFocus_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerFocus_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerFocus_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerFocus* cobj = (cocos2d::EventListenerFocus*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerFocus_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerFocus_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerFocus_constructor, __jsb_cocos2dx_EventListenerFocus_class, js_cocos2dx_EventListenerFocus_finalize)
{
    cocos2d::EventListenerFocus* cobj = new (std::nothrow) cocos2d::EventListenerFocus();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerFocus_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerFocus)", nativeThisObject);
    cocos2d::EventListenerFocus* cobj = (cocos2d::EventListenerFocus*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerFocus(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerFocus", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerFocus_constructor);

    cls->defineFunction("init", js_cocos2dx_EventListenerFocus_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerFocus_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerFocus_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerFocus_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerKeyboard_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerKeyboard_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerKeyboard_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerKeyboard* cobj = (cocos2d::EventListenerKeyboard*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerKeyboard_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerKeyboard_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerKeyboard_constructor, __jsb_cocos2dx_EventListenerKeyboard_class, js_cocos2dx_EventListenerKeyboard_finalize)
{
    cocos2d::EventListenerKeyboard* cobj = new (std::nothrow) cocos2d::EventListenerKeyboard();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerKeyboard_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerKeyboard)", nativeThisObject);
    cocos2d::EventListenerKeyboard* cobj = (cocos2d::EventListenerKeyboard*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerKeyboard(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerKeyboard", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerKeyboard_constructor);

    cls->defineFunction("init", js_cocos2dx_EventListenerKeyboard_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerKeyboard_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerKeyboard_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerKeyboard_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventMouse_proto = nullptr;
se::Class* __jsb_cocos2dx_EventMouse_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getMouseButton, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getMouseButton : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getMouseButton();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_setMouseButton, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_setMouseButton : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventMouse::MouseButton arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventMouse_setMouseButton : Error processing arguments");
        cobj->setMouseButton(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_setScrollData, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_setScrollData : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventMouse_setScrollData : Error processing arguments");
        cobj->setScrollData(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getPreviousLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getPreviousLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getPreviousLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getDelta, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getDelta : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getDelta();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getStartLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getStartLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getStartLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getCursorY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getCursorY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getCursorY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getCursorX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getCursorX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getCursorX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getScrollY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getScrollY : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScrollY();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_setCursorPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_setCursorPosition : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventMouse_setCursorPosition : Error processing arguments");
        cobj->setCursorPosition(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getScrollX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getScrollX : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getScrollX();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getPreviousLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getPreviousLocation : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getPreviousLocation();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventMouse_getStartLocationInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventMouse_getStartLocationInView : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getStartLocationInView();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventMouse_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventMouse_constructor, __jsb_cocos2dx_EventMouse_class, js_cocos2dx_EventMouse_finalize)
{
    bool ok = true;
    cocos2d::EventMouse::MouseEventType arg0;
    ok &= seval_to_int32(args[0], (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventMouse_constructor : Error processing arguments");
    cocos2d::EventMouse* cobj = new (std::nothrow) cocos2d::EventMouse(arg0);
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventMouse_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventMouse)", nativeThisObject);
    cocos2d::EventMouse* cobj = (cocos2d::EventMouse*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventMouse(se::Object* obj)
{
    auto cls = se::Class::create("EventMouse", obj, __jsb_cocos2dx_Event_proto, js_cocos2dx_EventMouse_constructor);

    cls->defineFunction("getButton", js_cocos2dx_EventMouse_getMouseButton);
    cls->defineFunction("getLocation", js_cocos2dx_EventMouse_getLocation);
    cls->defineFunction("setButton", js_cocos2dx_EventMouse_setMouseButton);
    cls->defineFunction("setScrollData", js_cocos2dx_EventMouse_setScrollData);
    cls->defineFunction("getPreviousLocationInView", js_cocos2dx_EventMouse_getPreviousLocationInView);
    cls->defineFunction("getDelta", js_cocos2dx_EventMouse_getDelta);
    cls->defineFunction("getStartLocation", js_cocos2dx_EventMouse_getStartLocation);
    cls->defineFunction("getLocationY", js_cocos2dx_EventMouse_getCursorY);
    cls->defineFunction("getLocationX", js_cocos2dx_EventMouse_getCursorX);
    cls->defineFunction("getLocationInView", js_cocos2dx_EventMouse_getLocationInView);
    cls->defineFunction("getScrollY", js_cocos2dx_EventMouse_getScrollY);
    cls->defineFunction("setLocation", js_cocos2dx_EventMouse_setCursorPosition);
    cls->defineFunction("getScrollX", js_cocos2dx_EventMouse_getScrollX);
    cls->defineFunction("getPreviousLocation", js_cocos2dx_EventMouse_getPreviousLocation);
    cls->defineFunction("getStartLocationInView", js_cocos2dx_EventMouse_getStartLocationInView);
    cls->defineFinalizedFunction(js_cocos2dx_EventMouse_finalize);
    cls->install();

    __jsb_cocos2dx_EventMouse_proto = cls->getProto();
    __jsb_cocos2dx_EventMouse_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerMouse_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerMouse_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerMouse_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerMouse* cobj = (cocos2d::EventListenerMouse*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerMouse_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerMouse_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerMouse_constructor, __jsb_cocos2dx_EventListenerMouse_class, js_cocos2dx_EventListenerMouse_finalize)
{
    cocos2d::EventListenerMouse* cobj = new (std::nothrow) cocos2d::EventListenerMouse();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerMouse_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerMouse)", nativeThisObject);
    cocos2d::EventListenerMouse* cobj = (cocos2d::EventListenerMouse*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerMouse(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerMouse", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerMouse_constructor);

    cls->defineFunction("init", js_cocos2dx_EventListenerMouse_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerMouse_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerMouse_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerMouse_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerTouchOneByOne_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerTouchOneByOne_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerTouchOneByOne* cobj = (cocos2d::EventListenerTouchOneByOne*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isSwallowTouches();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerTouchOneByOne* cobj = (cocos2d::EventListenerTouchOneByOne*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches : Error processing arguments");
        cobj->setSwallowTouches(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchOneByOne_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerTouchOneByOne* cobj = (cocos2d::EventListenerTouchOneByOne*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerTouchOneByOne_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerTouchOneByOne_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerTouchOneByOne_constructor, __jsb_cocos2dx_EventListenerTouchOneByOne_class, js_cocos2dx_EventListenerTouchOneByOne_finalize)
{
    cocos2d::EventListenerTouchOneByOne* cobj = new (std::nothrow) cocos2d::EventListenerTouchOneByOne();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchOneByOne_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerTouchOneByOne)", nativeThisObject);
    cocos2d::EventListenerTouchOneByOne* cobj = (cocos2d::EventListenerTouchOneByOne*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerTouchOneByOne(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerTouchOneByOne", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerTouchOneByOne_constructor);

    cls->defineFunction("isSwallowTouches", js_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches);
    cls->defineFunction("setSwallowTouches", js_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches);
    cls->defineFunction("init", js_cocos2dx_EventListenerTouchOneByOne_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerTouchOneByOne_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerTouchOneByOne_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerTouchOneByOne_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EventListenerTouchAllAtOnce_proto = nullptr;
se::Class* __jsb_cocos2dx_EventListenerTouchAllAtOnce_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchAllAtOnce_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EventListenerTouchAllAtOnce* cobj = (cocos2d::EventListenerTouchAllAtOnce*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EventListenerTouchAllAtOnce_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EventListenerTouchAllAtOnce_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EventListenerTouchAllAtOnce_constructor, __jsb_cocos2dx_EventListenerTouchAllAtOnce_class, js_cocos2dx_EventListenerTouchAllAtOnce_finalize)
{
    cocos2d::EventListenerTouchAllAtOnce* cobj = new (std::nothrow) cocos2d::EventListenerTouchAllAtOnce();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EventListenerTouchAllAtOnce_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EventListenerTouchAllAtOnce)", nativeThisObject);
    cocos2d::EventListenerTouchAllAtOnce* cobj = (cocos2d::EventListenerTouchAllAtOnce*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_EventListenerTouchAllAtOnce(se::Object* obj)
{
    auto cls = se::Class::create("EventListenerTouchAllAtOnce", obj, __jsb_cocos2dx_EventListener_proto, js_cocos2dx_EventListenerTouchAllAtOnce_constructor);

    cls->defineFunction("init", js_cocos2dx_EventListenerTouchAllAtOnce_init);
    cls->defineFinalizedFunction(js_cocos2dx_EventListenerTouchAllAtOnce_finalize);
    cls->install();

    __jsb_cocos2dx_EventListenerTouchAllAtOnce_proto = cls->getProto();
    __jsb_cocos2dx_EventListenerTouchAllAtOnce_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ActionCamera_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionCamera_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_setEye, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ActionCamera_setEye : Invalid Native Object");

    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->setEye(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Vec3 arg0;
            ok &= seval_to_Vec3(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setEye(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_getEye, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionCamera_getEye : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec3& result = cobj->getEye();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_setUp, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionCamera_setUp : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionCamera_setUp : Error processing arguments");
        cobj->setUp(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_getCenter, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionCamera_getCenter : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec3& result = cobj->getCenter();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_setCenter, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionCamera_setCenter : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionCamera_setCenter : Error processing arguments");
        cobj->setCenter(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionCamera_getUp, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionCamera_getUp : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec3& result = cobj->getUp();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ActionCamera_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ActionCamera_constructor, __jsb_cocos2dx_ActionCamera_class, js_cocos2dx_ActionCamera_finalize)
{
    cocos2d::ActionCamera* cobj = new (std::nothrow) cocos2d::ActionCamera();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ActionCamera_ctor, __jsb_cocos2dx_ActionCamera_class, js_cocos2dx_ActionCamera_finalize)
{
    cocos2d::ActionCamera* cobj = new (std::nothrow) cocos2d::ActionCamera();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ActionCamera_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ActionCamera)", nativeThisObject);
    cocos2d::ActionCamera* cobj = (cocos2d::ActionCamera*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ActionCamera(se::Object* obj)
{
    auto cls = se::Class::create("ActionCamera", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ActionCamera_constructor);

    cls->defineFunction("setEye", js_cocos2dx_ActionCamera_setEye);
    cls->defineFunction("getEye", js_cocos2dx_ActionCamera_getEye);
    cls->defineFunction("setUp", js_cocos2dx_ActionCamera_setUp);
    cls->defineFunction("getCenter", js_cocos2dx_ActionCamera_getCenter);
    cls->defineFunction("setCenter", js_cocos2dx_ActionCamera_setCenter);
    cls->defineFunction("getUp", js_cocos2dx_ActionCamera_getUp);
    cls->defineFunction("ctor", js_cocos2dx_ActionCamera_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_ActionCamera_finalize);
    cls->install();

    __jsb_cocos2dx_ActionCamera_proto = cls->getProto();
    __jsb_cocos2dx_ActionCamera_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ActionCamera.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_OrbitCamera_proto = nullptr;
se::Class* __jsb_cocos2dx_OrbitCamera_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_OrbitCamera_sphericalRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::OrbitCamera* cobj = (cocos2d::OrbitCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_OrbitCamera_sphericalRadius : Invalid Native Object");
    if (argc == 3) {
        float* arg0 = 0;
        float* arg1 = 0;
        float* arg2 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_OrbitCamera_sphericalRadius : Error processing arguments");
        cobj->sphericalRadius(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_OrbitCamera_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::OrbitCamera* cobj = (cocos2d::OrbitCamera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_OrbitCamera_initWithDuration : Invalid Native Object");
    if (argc == 7) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        float arg4 = 0;
        float arg5 = 0;
        float arg6 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        ok &= seval_to_float(args[5], &arg5);
        ok &= seval_to_float(args[6], &arg6);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_OrbitCamera_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_OrbitCamera_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 7) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        float arg4 = 0;
        float arg5 = 0;
        float arg6 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        ok &= seval_to_float(args[5], &arg5);
        ok &= seval_to_float(args[6], &arg6);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_OrbitCamera_create : Error processing arguments");
        auto result = cocos2d::OrbitCamera::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_OrbitCamera_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_OrbitCamera_finalize)

SE_CTOR_BEGIN(js_cocos2dx_OrbitCamera_constructor, __jsb_cocos2dx_OrbitCamera_class, js_cocos2dx_OrbitCamera_finalize)
{
    cocos2d::OrbitCamera* cobj = new (std::nothrow) cocos2d::OrbitCamera();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_OrbitCamera_ctor, __jsb_cocos2dx_OrbitCamera_class, js_cocos2dx_OrbitCamera_finalize)
{
    cocos2d::OrbitCamera* cobj = new (std::nothrow) cocos2d::OrbitCamera();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_OrbitCamera_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::OrbitCamera)", nativeThisObject);
    cocos2d::OrbitCamera* cobj = (cocos2d::OrbitCamera*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_OrbitCamera(se::Object* obj)
{
    auto cls = se::Class::create("OrbitCamera", obj, __jsb_cocos2dx_ActionCamera_proto, js_cocos2dx_OrbitCamera_constructor);

    cls->defineFunction("sphericalRadius", js_cocos2dx_OrbitCamera_sphericalRadius);
    cls->defineFunction("initWithDuration", js_cocos2dx_OrbitCamera_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_OrbitCamera_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_OrbitCamera_create);
    cls->defineFinalizedFunction(js_cocos2dx_OrbitCamera_finalize);
    cls->install();

    __jsb_cocos2dx_OrbitCamera_proto = cls->getProto();
    __jsb_cocos2dx_OrbitCamera_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.OrbitCamera.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_CardinalSplineTo_proto = nullptr;
se::Class* __jsb_cocos2dx_CardinalSplineTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CardinalSplineTo_updatePosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CardinalSplineTo* cobj = (cocos2d::CardinalSplineTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CardinalSplineTo_updatePosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CardinalSplineTo_updatePosition : Error processing arguments");
        cobj->updatePosition(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CardinalSplineTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CardinalSplineTo_constructor, __jsb_cocos2dx_CardinalSplineTo_class, js_cocos2dx_CardinalSplineTo_finalize)
{
    cocos2d::CardinalSplineTo* cobj = new (std::nothrow) cocos2d::CardinalSplineTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CardinalSplineTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CardinalSplineTo)", nativeThisObject);
    cocos2d::CardinalSplineTo* cobj = (cocos2d::CardinalSplineTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CardinalSplineTo(se::Object* obj)
{
    auto cls = se::Class::create("CardinalSplineTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_CardinalSplineTo_constructor);

    cls->defineFunction("updatePosition", js_cocos2dx_CardinalSplineTo_updatePosition);
    cls->defineFinalizedFunction(js_cocos2dx_CardinalSplineTo_finalize);
    cls->install();

    __jsb_cocos2dx_CardinalSplineTo_proto = cls->getProto();
    __jsb_cocos2dx_CardinalSplineTo_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CardinalSplineBy_proto = nullptr;
se::Class* __jsb_cocos2dx_CardinalSplineBy_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CardinalSplineBy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CardinalSplineBy_constructor, __jsb_cocos2dx_CardinalSplineBy_class, js_cocos2dx_CardinalSplineBy_finalize)
{
    cocos2d::CardinalSplineBy* cobj = new (std::nothrow) cocos2d::CardinalSplineBy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CardinalSplineBy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CardinalSplineBy)", nativeThisObject);
    cocos2d::CardinalSplineBy* cobj = (cocos2d::CardinalSplineBy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CardinalSplineBy(se::Object* obj)
{
    auto cls = se::Class::create("CardinalSplineBy", obj, __jsb_cocos2dx_CardinalSplineTo_proto, js_cocos2dx_CardinalSplineBy_constructor);

    cls->defineFinalizedFunction(js_cocos2dx_CardinalSplineBy_finalize);
    cls->install();

    __jsb_cocos2dx_CardinalSplineBy_proto = cls->getProto();
    __jsb_cocos2dx_CardinalSplineBy_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CatmullRomTo_proto = nullptr;
se::Class* __jsb_cocos2dx_CatmullRomTo_class = nullptr;

bool js_register_cocos2dx_CatmullRomTo(se::Object* obj)
{
    auto cls = se::Class::create("CatmullRomTo", obj, __jsb_cocos2dx_CardinalSplineTo_proto, nullptr);

    cls->install();

    __jsb_cocos2dx_CatmullRomTo_proto = cls->getProto();
    __jsb_cocos2dx_CatmullRomTo_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CatmullRomBy_proto = nullptr;
se::Class* __jsb_cocos2dx_CatmullRomBy_class = nullptr;

bool js_register_cocos2dx_CatmullRomBy(se::Object* obj)
{
    auto cls = se::Class::create("CatmullRomBy", obj, __jsb_cocos2dx_CardinalSplineBy_proto, nullptr);

    cls->install();

    __jsb_cocos2dx_CatmullRomBy_proto = cls->getProto();
    __jsb_cocos2dx_CatmullRomBy_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ActionEase_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionEase_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionEase_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionEase* cobj = (cocos2d::ActionEase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionEase_initWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionEase_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionEase_getInnerAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionEase* cobj = (cocos2d::ActionEase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionEase_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->getInnerAction();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_ActionEase(se::Object* obj)
{
    auto cls = se::Class::create("ActionEase", obj, __jsb_cocos2dx_ActionInterval_proto, nullptr);

    cls->defineFunction("initWithAction", js_cocos2dx_ActionEase_initWithAction);
    cls->defineFunction("getInnerAction", js_cocos2dx_ActionEase_getInnerAction);
    cls->install();

    __jsb_cocos2dx_ActionEase_proto = cls->getProto();
    __jsb_cocos2dx_ActionEase_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EaseRateAction_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseRateAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseRateAction_setRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseRateAction* cobj = (cocos2d::EaseRateAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseRateAction_setRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseRateAction_setRate : Error processing arguments");
        cobj->setRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseRateAction_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseRateAction* cobj = (cocos2d::EaseRateAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseRateAction_initWithAction : Invalid Native Object");
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseRateAction_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseRateAction_getRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseRateAction* cobj = (cocos2d::EaseRateAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseRateAction_getRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseRateAction_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseRateAction_create : Error processing arguments");
        auto result = cocos2d::EaseRateAction::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseRateAction_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_EaseRateAction(se::Object* obj)
{
    auto cls = se::Class::create("EaseRateAction", obj, __jsb_cocos2dx_ActionEase_proto, nullptr);

    cls->defineFunction("setRate", js_cocos2dx_EaseRateAction_setRate);
    cls->defineFunction("initWithAction", js_cocos2dx_EaseRateAction_initWithAction);
    cls->defineFunction("getRate", js_cocos2dx_EaseRateAction_getRate);
    cls->defineStaticFunction("create", js_cocos2dx_EaseRateAction_create);
    cls->install();

    __jsb_cocos2dx_EaseRateAction_proto = cls->getProto();
    __jsb_cocos2dx_EaseRateAction_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EaseExponentialIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseExponentialIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseExponentialIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseExponentialIn_create : Error processing arguments");
        auto result = cocos2d::EaseExponentialIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseExponentialIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseExponentialIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseExponentialIn_constructor, __jsb_cocos2dx_EaseExponentialIn_class, js_cocos2dx_EaseExponentialIn_finalize)
{
    cocos2d::EaseExponentialIn* cobj = new (std::nothrow) cocos2d::EaseExponentialIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseExponentialIn_ctor, __jsb_cocos2dx_EaseExponentialIn_class, js_cocos2dx_EaseExponentialIn_finalize)
{
    cocos2d::EaseExponentialIn* cobj = new (std::nothrow) cocos2d::EaseExponentialIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseExponentialIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseExponentialIn)", nativeThisObject);
    cocos2d::EaseExponentialIn* cobj = (cocos2d::EaseExponentialIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseExponentialIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseExponentialIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseExponentialIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseExponentialIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseExponentialIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseExponentialIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseExponentialIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseExponentialIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseExponentialIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseExponentialOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseExponentialOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseExponentialOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseExponentialOut_create : Error processing arguments");
        auto result = cocos2d::EaseExponentialOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseExponentialOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseExponentialOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseExponentialOut_constructor, __jsb_cocos2dx_EaseExponentialOut_class, js_cocos2dx_EaseExponentialOut_finalize)
{
    cocos2d::EaseExponentialOut* cobj = new (std::nothrow) cocos2d::EaseExponentialOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseExponentialOut_ctor, __jsb_cocos2dx_EaseExponentialOut_class, js_cocos2dx_EaseExponentialOut_finalize)
{
    cocos2d::EaseExponentialOut* cobj = new (std::nothrow) cocos2d::EaseExponentialOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseExponentialOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseExponentialOut)", nativeThisObject);
    cocos2d::EaseExponentialOut* cobj = (cocos2d::EaseExponentialOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseExponentialOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseExponentialOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseExponentialOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseExponentialOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseExponentialOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseExponentialOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseExponentialOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseExponentialOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseExponentialOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseExponentialInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseExponentialInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseExponentialInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseExponentialInOut_create : Error processing arguments");
        auto result = cocos2d::EaseExponentialInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseExponentialInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseExponentialInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseExponentialInOut_constructor, __jsb_cocos2dx_EaseExponentialInOut_class, js_cocos2dx_EaseExponentialInOut_finalize)
{
    cocos2d::EaseExponentialInOut* cobj = new (std::nothrow) cocos2d::EaseExponentialInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseExponentialInOut_ctor, __jsb_cocos2dx_EaseExponentialInOut_class, js_cocos2dx_EaseExponentialInOut_finalize)
{
    cocos2d::EaseExponentialInOut* cobj = new (std::nothrow) cocos2d::EaseExponentialInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseExponentialInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseExponentialInOut)", nativeThisObject);
    cocos2d::EaseExponentialInOut* cobj = (cocos2d::EaseExponentialInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseExponentialInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseExponentialInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseExponentialInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseExponentialInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseExponentialInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseExponentialInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseExponentialInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseExponentialInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseExponentialInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseSineIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseSineIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseSineIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseSineIn_create : Error processing arguments");
        auto result = cocos2d::EaseSineIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseSineIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseSineIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseSineIn_constructor, __jsb_cocos2dx_EaseSineIn_class, js_cocos2dx_EaseSineIn_finalize)
{
    cocos2d::EaseSineIn* cobj = new (std::nothrow) cocos2d::EaseSineIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseSineIn_ctor, __jsb_cocos2dx_EaseSineIn_class, js_cocos2dx_EaseSineIn_finalize)
{
    cocos2d::EaseSineIn* cobj = new (std::nothrow) cocos2d::EaseSineIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseSineIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseSineIn)", nativeThisObject);
    cocos2d::EaseSineIn* cobj = (cocos2d::EaseSineIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseSineIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseSineIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseSineIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseSineIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseSineIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseSineIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseSineIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseSineIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseSineIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseSineOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseSineOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseSineOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseSineOut_create : Error processing arguments");
        auto result = cocos2d::EaseSineOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseSineOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseSineOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseSineOut_constructor, __jsb_cocos2dx_EaseSineOut_class, js_cocos2dx_EaseSineOut_finalize)
{
    cocos2d::EaseSineOut* cobj = new (std::nothrow) cocos2d::EaseSineOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseSineOut_ctor, __jsb_cocos2dx_EaseSineOut_class, js_cocos2dx_EaseSineOut_finalize)
{
    cocos2d::EaseSineOut* cobj = new (std::nothrow) cocos2d::EaseSineOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseSineOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseSineOut)", nativeThisObject);
    cocos2d::EaseSineOut* cobj = (cocos2d::EaseSineOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseSineOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseSineOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseSineOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseSineOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseSineOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseSineOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseSineOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseSineOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseSineOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseSineInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseSineInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseSineInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseSineInOut_create : Error processing arguments");
        auto result = cocos2d::EaseSineInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseSineInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseSineInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseSineInOut_constructor, __jsb_cocos2dx_EaseSineInOut_class, js_cocos2dx_EaseSineInOut_finalize)
{
    cocos2d::EaseSineInOut* cobj = new (std::nothrow) cocos2d::EaseSineInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseSineInOut_ctor, __jsb_cocos2dx_EaseSineInOut_class, js_cocos2dx_EaseSineInOut_finalize)
{
    cocos2d::EaseSineInOut* cobj = new (std::nothrow) cocos2d::EaseSineInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseSineInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseSineInOut)", nativeThisObject);
    cocos2d::EaseSineInOut* cobj = (cocos2d::EaseSineInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseSineInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseSineInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseSineInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseSineInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseSineInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseSineInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseSineInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseSineInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseSineInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBounce_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBounce_class = nullptr;

bool js_register_cocos2dx_EaseBounce(se::Object* obj)
{
    auto cls = se::Class::create("EaseBounce", obj, __jsb_cocos2dx_ActionEase_proto, nullptr);

    cls->install();

    __jsb_cocos2dx_EaseBounce_proto = cls->getProto();
    __jsb_cocos2dx_EaseBounce_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EaseBounceIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBounceIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBounceIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBounceIn_create : Error processing arguments");
        auto result = cocos2d::EaseBounceIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBounceIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBounceIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBounceIn_constructor, __jsb_cocos2dx_EaseBounceIn_class, js_cocos2dx_EaseBounceIn_finalize)
{
    cocos2d::EaseBounceIn* cobj = new (std::nothrow) cocos2d::EaseBounceIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBounceIn_ctor, __jsb_cocos2dx_EaseBounceIn_class, js_cocos2dx_EaseBounceIn_finalize)
{
    cocos2d::EaseBounceIn* cobj = new (std::nothrow) cocos2d::EaseBounceIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBounceIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBounceIn)", nativeThisObject);
    cocos2d::EaseBounceIn* cobj = (cocos2d::EaseBounceIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBounceIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseBounceIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBounceIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBounceIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBounceIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBounceIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBounceIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseBounceIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBounceIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBounceOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBounceOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBounceOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBounceOut_create : Error processing arguments");
        auto result = cocos2d::EaseBounceOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBounceOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBounceOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBounceOut_constructor, __jsb_cocos2dx_EaseBounceOut_class, js_cocos2dx_EaseBounceOut_finalize)
{
    cocos2d::EaseBounceOut* cobj = new (std::nothrow) cocos2d::EaseBounceOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBounceOut_ctor, __jsb_cocos2dx_EaseBounceOut_class, js_cocos2dx_EaseBounceOut_finalize)
{
    cocos2d::EaseBounceOut* cobj = new (std::nothrow) cocos2d::EaseBounceOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBounceOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBounceOut)", nativeThisObject);
    cocos2d::EaseBounceOut* cobj = (cocos2d::EaseBounceOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBounceOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseBounceOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBounceOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBounceOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBounceOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBounceOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBounceOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseBounceOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBounceOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBounceInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBounceInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBounceInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBounceInOut_create : Error processing arguments");
        auto result = cocos2d::EaseBounceInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBounceInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBounceInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBounceInOut_constructor, __jsb_cocos2dx_EaseBounceInOut_class, js_cocos2dx_EaseBounceInOut_finalize)
{
    cocos2d::EaseBounceInOut* cobj = new (std::nothrow) cocos2d::EaseBounceInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBounceInOut_ctor, __jsb_cocos2dx_EaseBounceInOut_class, js_cocos2dx_EaseBounceInOut_finalize)
{
    cocos2d::EaseBounceInOut* cobj = new (std::nothrow) cocos2d::EaseBounceInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBounceInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBounceInOut)", nativeThisObject);
    cocos2d::EaseBounceInOut* cobj = (cocos2d::EaseBounceInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBounceInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseBounceInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBounceInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBounceInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBounceInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBounceInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBounceInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseBounceInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBounceInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBackIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBackIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBackIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBackIn_create : Error processing arguments");
        auto result = cocos2d::EaseBackIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBackIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBackIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBackIn_constructor, __jsb_cocos2dx_EaseBackIn_class, js_cocos2dx_EaseBackIn_finalize)
{
    cocos2d::EaseBackIn* cobj = new (std::nothrow) cocos2d::EaseBackIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBackIn_ctor, __jsb_cocos2dx_EaseBackIn_class, js_cocos2dx_EaseBackIn_finalize)
{
    cocos2d::EaseBackIn* cobj = new (std::nothrow) cocos2d::EaseBackIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBackIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBackIn)", nativeThisObject);
    cocos2d::EaseBackIn* cobj = (cocos2d::EaseBackIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBackIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseBackIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBackIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBackIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBackIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBackIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBackIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseBackIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBackIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBackOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBackOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBackOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBackOut_create : Error processing arguments");
        auto result = cocos2d::EaseBackOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBackOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBackOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBackOut_constructor, __jsb_cocos2dx_EaseBackOut_class, js_cocos2dx_EaseBackOut_finalize)
{
    cocos2d::EaseBackOut* cobj = new (std::nothrow) cocos2d::EaseBackOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBackOut_ctor, __jsb_cocos2dx_EaseBackOut_class, js_cocos2dx_EaseBackOut_finalize)
{
    cocos2d::EaseBackOut* cobj = new (std::nothrow) cocos2d::EaseBackOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBackOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBackOut)", nativeThisObject);
    cocos2d::EaseBackOut* cobj = (cocos2d::EaseBackOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBackOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseBackOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBackOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBackOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBackOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBackOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBackOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseBackOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBackOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBackInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBackInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBackInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBackInOut_create : Error processing arguments");
        auto result = cocos2d::EaseBackInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBackInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBackInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBackInOut_constructor, __jsb_cocos2dx_EaseBackInOut_class, js_cocos2dx_EaseBackInOut_finalize)
{
    cocos2d::EaseBackInOut* cobj = new (std::nothrow) cocos2d::EaseBackInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBackInOut_ctor, __jsb_cocos2dx_EaseBackInOut_class, js_cocos2dx_EaseBackInOut_finalize)
{
    cocos2d::EaseBackInOut* cobj = new (std::nothrow) cocos2d::EaseBackInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBackInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBackInOut)", nativeThisObject);
    cocos2d::EaseBackInOut* cobj = (cocos2d::EaseBackInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBackInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseBackInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBackInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseBackInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBackInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBackInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBackInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseBackInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBackInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuadraticActionIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuadraticActionIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuadraticActionIn_create : Error processing arguments");
        auto result = cocos2d::EaseQuadraticActionIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuadraticActionIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuadraticActionIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuadraticActionIn_constructor, __jsb_cocos2dx_EaseQuadraticActionIn_class, js_cocos2dx_EaseQuadraticActionIn_finalize)
{
    cocos2d::EaseQuadraticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuadraticActionIn_ctor, __jsb_cocos2dx_EaseQuadraticActionIn_class, js_cocos2dx_EaseQuadraticActionIn_finalize)
{
    cocos2d::EaseQuadraticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuadraticActionIn)", nativeThisObject);
    cocos2d::EaseQuadraticActionIn* cobj = (cocos2d::EaseQuadraticActionIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuadraticActionIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuadraticActionIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuadraticActionIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuadraticActionIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuadraticActionIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuadraticActionIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuadraticActionIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuadraticActionIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuadraticActionIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuadraticActionOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuadraticActionOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuadraticActionOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuadraticActionOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuadraticActionOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuadraticActionOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuadraticActionOut_constructor, __jsb_cocos2dx_EaseQuadraticActionOut_class, js_cocos2dx_EaseQuadraticActionOut_finalize)
{
    cocos2d::EaseQuadraticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuadraticActionOut_ctor, __jsb_cocos2dx_EaseQuadraticActionOut_class, js_cocos2dx_EaseQuadraticActionOut_finalize)
{
    cocos2d::EaseQuadraticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuadraticActionOut)", nativeThisObject);
    cocos2d::EaseQuadraticActionOut* cobj = (cocos2d::EaseQuadraticActionOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuadraticActionOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuadraticActionOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuadraticActionOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuadraticActionOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuadraticActionOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuadraticActionOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuadraticActionOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuadraticActionOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuadraticActionOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuadraticActionInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuadraticActionInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuadraticActionInOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuadraticActionInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuadraticActionInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuadraticActionInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuadraticActionInOut_constructor, __jsb_cocos2dx_EaseQuadraticActionInOut_class, js_cocos2dx_EaseQuadraticActionInOut_finalize)
{
    cocos2d::EaseQuadraticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuadraticActionInOut_ctor, __jsb_cocos2dx_EaseQuadraticActionInOut_class, js_cocos2dx_EaseQuadraticActionInOut_finalize)
{
    cocos2d::EaseQuadraticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuadraticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuadraticActionInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuadraticActionInOut)", nativeThisObject);
    cocos2d::EaseQuadraticActionInOut* cobj = (cocos2d::EaseQuadraticActionInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuadraticActionInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuadraticActionInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuadraticActionInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuadraticActionInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuadraticActionInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuadraticActionInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuadraticActionInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuadraticActionInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuadraticActionInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuarticActionIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuarticActionIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuarticActionIn_create : Error processing arguments");
        auto result = cocos2d::EaseQuarticActionIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuarticActionIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuarticActionIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuarticActionIn_constructor, __jsb_cocos2dx_EaseQuarticActionIn_class, js_cocos2dx_EaseQuarticActionIn_finalize)
{
    cocos2d::EaseQuarticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuarticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuarticActionIn_ctor, __jsb_cocos2dx_EaseQuarticActionIn_class, js_cocos2dx_EaseQuarticActionIn_finalize)
{
    cocos2d::EaseQuarticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuarticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuarticActionIn)", nativeThisObject);
    cocos2d::EaseQuarticActionIn* cobj = (cocos2d::EaseQuarticActionIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuarticActionIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuarticActionIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuarticActionIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuarticActionIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuarticActionIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuarticActionIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuarticActionIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuarticActionIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuarticActionIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuarticActionOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuarticActionOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuarticActionOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuarticActionOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuarticActionOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuarticActionOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuarticActionOut_constructor, __jsb_cocos2dx_EaseQuarticActionOut_class, js_cocos2dx_EaseQuarticActionOut_finalize)
{
    cocos2d::EaseQuarticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuarticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuarticActionOut_ctor, __jsb_cocos2dx_EaseQuarticActionOut_class, js_cocos2dx_EaseQuarticActionOut_finalize)
{
    cocos2d::EaseQuarticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuarticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuarticActionOut)", nativeThisObject);
    cocos2d::EaseQuarticActionOut* cobj = (cocos2d::EaseQuarticActionOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuarticActionOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuarticActionOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuarticActionOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuarticActionOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuarticActionOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuarticActionOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuarticActionOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuarticActionOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuarticActionOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuarticActionInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuarticActionInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuarticActionInOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuarticActionInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuarticActionInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuarticActionInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuarticActionInOut_constructor, __jsb_cocos2dx_EaseQuarticActionInOut_class, js_cocos2dx_EaseQuarticActionInOut_finalize)
{
    cocos2d::EaseQuarticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuarticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuarticActionInOut_ctor, __jsb_cocos2dx_EaseQuarticActionInOut_class, js_cocos2dx_EaseQuarticActionInOut_finalize)
{
    cocos2d::EaseQuarticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuarticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuarticActionInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuarticActionInOut)", nativeThisObject);
    cocos2d::EaseQuarticActionInOut* cobj = (cocos2d::EaseQuarticActionInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuarticActionInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuarticActionInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuarticActionInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuarticActionInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuarticActionInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuarticActionInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuarticActionInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuarticActionInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuarticActionInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuinticActionIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuinticActionIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuinticActionIn_create : Error processing arguments");
        auto result = cocos2d::EaseQuinticActionIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuinticActionIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuinticActionIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuinticActionIn_constructor, __jsb_cocos2dx_EaseQuinticActionIn_class, js_cocos2dx_EaseQuinticActionIn_finalize)
{
    cocos2d::EaseQuinticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuinticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuinticActionIn_ctor, __jsb_cocos2dx_EaseQuinticActionIn_class, js_cocos2dx_EaseQuinticActionIn_finalize)
{
    cocos2d::EaseQuinticActionIn* cobj = new (std::nothrow) cocos2d::EaseQuinticActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuinticActionIn)", nativeThisObject);
    cocos2d::EaseQuinticActionIn* cobj = (cocos2d::EaseQuinticActionIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuinticActionIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuinticActionIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuinticActionIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuinticActionIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuinticActionIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuinticActionIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuinticActionIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuinticActionIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuinticActionIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuinticActionOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuinticActionOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuinticActionOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuinticActionOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuinticActionOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuinticActionOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuinticActionOut_constructor, __jsb_cocos2dx_EaseQuinticActionOut_class, js_cocos2dx_EaseQuinticActionOut_finalize)
{
    cocos2d::EaseQuinticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuinticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuinticActionOut_ctor, __jsb_cocos2dx_EaseQuinticActionOut_class, js_cocos2dx_EaseQuinticActionOut_finalize)
{
    cocos2d::EaseQuinticActionOut* cobj = new (std::nothrow) cocos2d::EaseQuinticActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuinticActionOut)", nativeThisObject);
    cocos2d::EaseQuinticActionOut* cobj = (cocos2d::EaseQuinticActionOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuinticActionOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuinticActionOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuinticActionOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuinticActionOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuinticActionOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuinticActionOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuinticActionOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuinticActionOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuinticActionOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseQuinticActionInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseQuinticActionInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseQuinticActionInOut_create : Error processing arguments");
        auto result = cocos2d::EaseQuinticActionInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseQuinticActionInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseQuinticActionInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseQuinticActionInOut_constructor, __jsb_cocos2dx_EaseQuinticActionInOut_class, js_cocos2dx_EaseQuinticActionInOut_finalize)
{
    cocos2d::EaseQuinticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuinticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseQuinticActionInOut_ctor, __jsb_cocos2dx_EaseQuinticActionInOut_class, js_cocos2dx_EaseQuinticActionInOut_finalize)
{
    cocos2d::EaseQuinticActionInOut* cobj = new (std::nothrow) cocos2d::EaseQuinticActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseQuinticActionInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseQuinticActionInOut)", nativeThisObject);
    cocos2d::EaseQuinticActionInOut* cobj = (cocos2d::EaseQuinticActionInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseQuinticActionInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseQuinticActionInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseQuinticActionInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseQuinticActionInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseQuinticActionInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseQuinticActionInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseQuinticActionInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseQuinticActionInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseQuinticActionInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCircleActionIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCircleActionIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCircleActionIn_create : Error processing arguments");
        auto result = cocos2d::EaseCircleActionIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCircleActionIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCircleActionIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCircleActionIn_constructor, __jsb_cocos2dx_EaseCircleActionIn_class, js_cocos2dx_EaseCircleActionIn_finalize)
{
    cocos2d::EaseCircleActionIn* cobj = new (std::nothrow) cocos2d::EaseCircleActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCircleActionIn_ctor, __jsb_cocos2dx_EaseCircleActionIn_class, js_cocos2dx_EaseCircleActionIn_finalize)
{
    cocos2d::EaseCircleActionIn* cobj = new (std::nothrow) cocos2d::EaseCircleActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCircleActionIn)", nativeThisObject);
    cocos2d::EaseCircleActionIn* cobj = (cocos2d::EaseCircleActionIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCircleActionIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseCircleActionIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCircleActionIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCircleActionIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCircleActionIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCircleActionIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCircleActionIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseCircleActionIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCircleActionIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCircleActionOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCircleActionOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCircleActionOut_create : Error processing arguments");
        auto result = cocos2d::EaseCircleActionOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCircleActionOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCircleActionOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCircleActionOut_constructor, __jsb_cocos2dx_EaseCircleActionOut_class, js_cocos2dx_EaseCircleActionOut_finalize)
{
    cocos2d::EaseCircleActionOut* cobj = new (std::nothrow) cocos2d::EaseCircleActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCircleActionOut_ctor, __jsb_cocos2dx_EaseCircleActionOut_class, js_cocos2dx_EaseCircleActionOut_finalize)
{
    cocos2d::EaseCircleActionOut* cobj = new (std::nothrow) cocos2d::EaseCircleActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCircleActionOut)", nativeThisObject);
    cocos2d::EaseCircleActionOut* cobj = (cocos2d::EaseCircleActionOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCircleActionOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseCircleActionOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCircleActionOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCircleActionOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCircleActionOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCircleActionOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCircleActionOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseCircleActionOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCircleActionOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCircleActionInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCircleActionInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCircleActionInOut_create : Error processing arguments");
        auto result = cocos2d::EaseCircleActionInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCircleActionInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCircleActionInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCircleActionInOut_constructor, __jsb_cocos2dx_EaseCircleActionInOut_class, js_cocos2dx_EaseCircleActionInOut_finalize)
{
    cocos2d::EaseCircleActionInOut* cobj = new (std::nothrow) cocos2d::EaseCircleActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCircleActionInOut_ctor, __jsb_cocos2dx_EaseCircleActionInOut_class, js_cocos2dx_EaseCircleActionInOut_finalize)
{
    cocos2d::EaseCircleActionInOut* cobj = new (std::nothrow) cocos2d::EaseCircleActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCircleActionInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCircleActionInOut)", nativeThisObject);
    cocos2d::EaseCircleActionInOut* cobj = (cocos2d::EaseCircleActionInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCircleActionInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseCircleActionInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCircleActionInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCircleActionInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCircleActionInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCircleActionInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCircleActionInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseCircleActionInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCircleActionInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCubicActionIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCubicActionIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCubicActionIn_create : Error processing arguments");
        auto result = cocos2d::EaseCubicActionIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCubicActionIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCubicActionIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCubicActionIn_constructor, __jsb_cocos2dx_EaseCubicActionIn_class, js_cocos2dx_EaseCubicActionIn_finalize)
{
    cocos2d::EaseCubicActionIn* cobj = new (std::nothrow) cocos2d::EaseCubicActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCubicActionIn_ctor, __jsb_cocos2dx_EaseCubicActionIn_class, js_cocos2dx_EaseCubicActionIn_finalize)
{
    cocos2d::EaseCubicActionIn* cobj = new (std::nothrow) cocos2d::EaseCubicActionIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCubicActionIn)", nativeThisObject);
    cocos2d::EaseCubicActionIn* cobj = (cocos2d::EaseCubicActionIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCubicActionIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseCubicActionIn", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCubicActionIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCubicActionIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCubicActionIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCubicActionIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCubicActionIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseCubicActionIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCubicActionIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCubicActionOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCubicActionOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCubicActionOut_create : Error processing arguments");
        auto result = cocos2d::EaseCubicActionOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCubicActionOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCubicActionOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCubicActionOut_constructor, __jsb_cocos2dx_EaseCubicActionOut_class, js_cocos2dx_EaseCubicActionOut_finalize)
{
    cocos2d::EaseCubicActionOut* cobj = new (std::nothrow) cocos2d::EaseCubicActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCubicActionOut_ctor, __jsb_cocos2dx_EaseCubicActionOut_class, js_cocos2dx_EaseCubicActionOut_finalize)
{
    cocos2d::EaseCubicActionOut* cobj = new (std::nothrow) cocos2d::EaseCubicActionOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCubicActionOut)", nativeThisObject);
    cocos2d::EaseCubicActionOut* cobj = (cocos2d::EaseCubicActionOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCubicActionOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseCubicActionOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCubicActionOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCubicActionOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCubicActionOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCubicActionOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCubicActionOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseCubicActionOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCubicActionOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseCubicActionInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseCubicActionInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseCubicActionInOut_create : Error processing arguments");
        auto result = cocos2d::EaseCubicActionInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseCubicActionInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseCubicActionInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseCubicActionInOut_constructor, __jsb_cocos2dx_EaseCubicActionInOut_class, js_cocos2dx_EaseCubicActionInOut_finalize)
{
    cocos2d::EaseCubicActionInOut* cobj = new (std::nothrow) cocos2d::EaseCubicActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseCubicActionInOut_ctor, __jsb_cocos2dx_EaseCubicActionInOut_class, js_cocos2dx_EaseCubicActionInOut_finalize)
{
    cocos2d::EaseCubicActionInOut* cobj = new (std::nothrow) cocos2d::EaseCubicActionInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseCubicActionInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseCubicActionInOut)", nativeThisObject);
    cocos2d::EaseCubicActionInOut* cobj = (cocos2d::EaseCubicActionInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseCubicActionInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseCubicActionInOut", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseCubicActionInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseCubicActionInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseCubicActionInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseCubicActionInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseCubicActionInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseCubicActionInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseCubicActionInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseIn_create : Error processing arguments");
        auto result = cocos2d::EaseIn::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseIn_constructor, __jsb_cocos2dx_EaseIn_class, js_cocos2dx_EaseIn_finalize)
{
    cocos2d::EaseIn* cobj = new (std::nothrow) cocos2d::EaseIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseIn_ctor, __jsb_cocos2dx_EaseIn_class, js_cocos2dx_EaseIn_finalize)
{
    cocos2d::EaseIn* cobj = new (std::nothrow) cocos2d::EaseIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseIn)", nativeThisObject);
    cocos2d::EaseIn* cobj = (cocos2d::EaseIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseIn", obj, __jsb_cocos2dx_EaseRateAction_proto, js_cocos2dx_EaseIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseOut_create : Error processing arguments");
        auto result = cocos2d::EaseOut::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseOut_constructor, __jsb_cocos2dx_EaseOut_class, js_cocos2dx_EaseOut_finalize)
{
    cocos2d::EaseOut* cobj = new (std::nothrow) cocos2d::EaseOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseOut_ctor, __jsb_cocos2dx_EaseOut_class, js_cocos2dx_EaseOut_finalize)
{
    cocos2d::EaseOut* cobj = new (std::nothrow) cocos2d::EaseOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseOut)", nativeThisObject);
    cocos2d::EaseOut* cobj = (cocos2d::EaseOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseOut", obj, __jsb_cocos2dx_EaseRateAction_proto, js_cocos2dx_EaseOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseInOut_create : Error processing arguments");
        auto result = cocos2d::EaseInOut::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseInOut_constructor, __jsb_cocos2dx_EaseInOut_class, js_cocos2dx_EaseInOut_finalize)
{
    cocos2d::EaseInOut* cobj = new (std::nothrow) cocos2d::EaseInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseInOut_ctor, __jsb_cocos2dx_EaseInOut_class, js_cocos2dx_EaseInOut_finalize)
{
    cocos2d::EaseInOut* cobj = new (std::nothrow) cocos2d::EaseInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseInOut)", nativeThisObject);
    cocos2d::EaseInOut* cobj = (cocos2d::EaseInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseInOut", obj, __jsb_cocos2dx_EaseRateAction_proto, js_cocos2dx_EaseInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseElastic_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseElastic_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseElastic_setPeriod, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseElastic* cobj = (cocos2d::EaseElastic*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseElastic_setPeriod : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElastic_setPeriod : Error processing arguments");
        cobj->setPeriod(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseElastic_initWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseElastic* cobj = (cocos2d::EaseElastic*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseElastic_initWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElastic_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElastic_initWithAction : Error processing arguments");
        bool result = cobj->initWithAction(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseElastic_getPeriod, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseElastic* cobj = (cocos2d::EaseElastic*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseElastic_getPeriod : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getPeriod();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_EaseElastic(se::Object* obj)
{
    auto cls = se::Class::create("EaseElastic", obj, __jsb_cocos2dx_ActionEase_proto, nullptr);

    cls->defineFunction("setPeriod", js_cocos2dx_EaseElastic_setPeriod);
    cls->defineFunction("initWithAction", js_cocos2dx_EaseElastic_initWithAction);
    cls->defineFunction("getPeriod", js_cocos2dx_EaseElastic_getPeriod);
    cls->install();

    __jsb_cocos2dx_EaseElastic_proto = cls->getProto();
    __jsb_cocos2dx_EaseElastic_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_EaseElasticIn_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseElasticIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseElasticIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticIn_create : Error processing arguments");
        auto result = cocos2d::EaseElasticIn::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticIn_create : Error processing arguments");
        auto result = cocos2d::EaseElasticIn::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseElasticIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseElasticIn_constructor, __jsb_cocos2dx_EaseElasticIn_class, js_cocos2dx_EaseElasticIn_finalize)
{
    cocos2d::EaseElasticIn* cobj = new (std::nothrow) cocos2d::EaseElasticIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseElasticIn_ctor, __jsb_cocos2dx_EaseElasticIn_class, js_cocos2dx_EaseElasticIn_finalize)
{
    cocos2d::EaseElasticIn* cobj = new (std::nothrow) cocos2d::EaseElasticIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseElasticIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseElasticIn)", nativeThisObject);
    cocos2d::EaseElasticIn* cobj = (cocos2d::EaseElasticIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseElasticIn(se::Object* obj)
{
    auto cls = se::Class::create("EaseElasticIn", obj, __jsb_cocos2dx_EaseElastic_proto, js_cocos2dx_EaseElasticIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseElasticIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseElasticIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseElasticIn_finalize);
    cls->install();

    __jsb_cocos2dx_EaseElasticIn_proto = cls->getProto();
    __jsb_cocos2dx_EaseElasticIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseElasticIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseElasticOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseElasticOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseElasticOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticOut_create : Error processing arguments");
        auto result = cocos2d::EaseElasticOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticOut_create : Error processing arguments");
        auto result = cocos2d::EaseElasticOut::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseElasticOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseElasticOut_constructor, __jsb_cocos2dx_EaseElasticOut_class, js_cocos2dx_EaseElasticOut_finalize)
{
    cocos2d::EaseElasticOut* cobj = new (std::nothrow) cocos2d::EaseElasticOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseElasticOut_ctor, __jsb_cocos2dx_EaseElasticOut_class, js_cocos2dx_EaseElasticOut_finalize)
{
    cocos2d::EaseElasticOut* cobj = new (std::nothrow) cocos2d::EaseElasticOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseElasticOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseElasticOut)", nativeThisObject);
    cocos2d::EaseElasticOut* cobj = (cocos2d::EaseElasticOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseElasticOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseElasticOut", obj, __jsb_cocos2dx_EaseElastic_proto, js_cocos2dx_EaseElasticOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseElasticOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseElasticOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseElasticOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseElasticOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseElasticOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseElasticOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseElasticInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseElasticInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseElasticInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticInOut_create : Error processing arguments");
        auto result = cocos2d::EaseElasticInOut::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::ActionInterval* arg0 = nullptr;
        float arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseElasticInOut_create : Error processing arguments");
        auto result = cocos2d::EaseElasticInOut::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseElasticInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseElasticInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseElasticInOut_constructor, __jsb_cocos2dx_EaseElasticInOut_class, js_cocos2dx_EaseElasticInOut_finalize)
{
    cocos2d::EaseElasticInOut* cobj = new (std::nothrow) cocos2d::EaseElasticInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseElasticInOut_ctor, __jsb_cocos2dx_EaseElasticInOut_class, js_cocos2dx_EaseElasticInOut_finalize)
{
    cocos2d::EaseElasticInOut* cobj = new (std::nothrow) cocos2d::EaseElasticInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseElasticInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseElasticInOut)", nativeThisObject);
    cocos2d::EaseElasticInOut* cobj = (cocos2d::EaseElasticInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseElasticInOut(se::Object* obj)
{
    auto cls = se::Class::create("EaseElasticInOut", obj, __jsb_cocos2dx_EaseElastic_proto, js_cocos2dx_EaseElasticInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_EaseElasticInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseElasticInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseElasticInOut_finalize);
    cls->install();

    __jsb_cocos2dx_EaseElasticInOut_proto = cls->getProto();
    __jsb_cocos2dx_EaseElasticInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseElasticInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_EaseBezierAction_proto = nullptr;
se::Class* __jsb_cocos2dx_EaseBezierAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_EaseBezierAction_setBezierParamer, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::EaseBezierAction* cobj = (cocos2d::EaseBezierAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_EaseBezierAction_setBezierParamer : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBezierAction_setBezierParamer : Error processing arguments");
        cobj->setBezierParamer(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_EaseBezierAction_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_EaseBezierAction_create : Error processing arguments");
        auto result = cocos2d::EaseBezierAction::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_EaseBezierAction_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_EaseBezierAction_finalize)

SE_CTOR_BEGIN(js_cocos2dx_EaseBezierAction_constructor, __jsb_cocos2dx_EaseBezierAction_class, js_cocos2dx_EaseBezierAction_finalize)
{
    cocos2d::EaseBezierAction* cobj = new (std::nothrow) cocos2d::EaseBezierAction();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_EaseBezierAction_ctor, __jsb_cocos2dx_EaseBezierAction_class, js_cocos2dx_EaseBezierAction_finalize)
{
    cocos2d::EaseBezierAction* cobj = new (std::nothrow) cocos2d::EaseBezierAction();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_EaseBezierAction_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::EaseBezierAction)", nativeThisObject);
    cocos2d::EaseBezierAction* cobj = (cocos2d::EaseBezierAction*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_EaseBezierAction(se::Object* obj)
{
    auto cls = se::Class::create("EaseBezierAction", obj, __jsb_cocos2dx_ActionEase_proto, js_cocos2dx_EaseBezierAction_constructor);

    cls->defineFunction("setBezierParamer", js_cocos2dx_EaseBezierAction_setBezierParamer);
    cls->defineFunction("ctor", js_cocos2dx_EaseBezierAction_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_EaseBezierAction_create);
    cls->defineFinalizedFunction(js_cocos2dx_EaseBezierAction_finalize);
    cls->install();

    __jsb_cocos2dx_EaseBezierAction_proto = cls->getProto();
    __jsb_cocos2dx_EaseBezierAction_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.EaseBezierAction.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ActionInstant_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionInstant_class = nullptr;

bool js_register_cocos2dx_ActionInstant(se::Object* obj)
{
    auto cls = se::Class::create("ActionInstant", obj, __jsb_cocos2dx_FiniteTimeAction_proto, nullptr);

    cls->install();

    __jsb_cocos2dx_ActionInstant_proto = cls->getProto();
    __jsb_cocos2dx_ActionInstant_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Show_proto = nullptr;
se::Class* __jsb_cocos2dx_Show_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Show_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Show::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Show_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Show_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Show_constructor, __jsb_cocos2dx_Show_class, js_cocos2dx_Show_finalize)
{
    cocos2d::Show* cobj = new (std::nothrow) cocos2d::Show();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Show_ctor, __jsb_cocos2dx_Show_class, js_cocos2dx_Show_finalize)
{
    cocos2d::Show* cobj = new (std::nothrow) cocos2d::Show();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Show_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Show)", nativeThisObject);
    cocos2d::Show* cobj = (cocos2d::Show*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Show(se::Object* obj)
{
    auto cls = se::Class::create("Show", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_Show_constructor);

    cls->defineFunction("ctor", js_cocos2dx_Show_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Show_create);
    cls->defineFinalizedFunction(js_cocos2dx_Show_finalize);
    cls->install();

    __jsb_cocos2dx_Show_proto = cls->getProto();
    __jsb_cocos2dx_Show_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Show.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Hide_proto = nullptr;
se::Class* __jsb_cocos2dx_Hide_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Hide_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Hide::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Hide_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Hide_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Hide_constructor, __jsb_cocos2dx_Hide_class, js_cocos2dx_Hide_finalize)
{
    cocos2d::Hide* cobj = new (std::nothrow) cocos2d::Hide();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Hide_ctor, __jsb_cocos2dx_Hide_class, js_cocos2dx_Hide_finalize)
{
    cocos2d::Hide* cobj = new (std::nothrow) cocos2d::Hide();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Hide_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Hide)", nativeThisObject);
    cocos2d::Hide* cobj = (cocos2d::Hide*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Hide(se::Object* obj)
{
    auto cls = se::Class::create("Hide", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_Hide_constructor);

    cls->defineFunction("ctor", js_cocos2dx_Hide_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Hide_create);
    cls->defineFinalizedFunction(js_cocos2dx_Hide_finalize);
    cls->install();

    __jsb_cocos2dx_Hide_proto = cls->getProto();
    __jsb_cocos2dx_Hide_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Hide.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ToggleVisibility_proto = nullptr;
se::Class* __jsb_cocos2dx_ToggleVisibility_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ToggleVisibility_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ToggleVisibility::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ToggleVisibility_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ToggleVisibility_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ToggleVisibility_constructor, __jsb_cocos2dx_ToggleVisibility_class, js_cocos2dx_ToggleVisibility_finalize)
{
    cocos2d::ToggleVisibility* cobj = new (std::nothrow) cocos2d::ToggleVisibility();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ToggleVisibility_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ToggleVisibility)", nativeThisObject);
    cocos2d::ToggleVisibility* cobj = (cocos2d::ToggleVisibility*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ToggleVisibility(se::Object* obj)
{
    auto cls = se::Class::create("ToggleVisibility", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_ToggleVisibility_constructor);

    cls->defineStaticFunction("create", js_cocos2dx_ToggleVisibility_create);
    cls->defineFinalizedFunction(js_cocos2dx_ToggleVisibility_finalize);
    cls->install();

    __jsb_cocos2dx_ToggleVisibility_proto = cls->getProto();
    __jsb_cocos2dx_ToggleVisibility_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_RemoveSelf_proto = nullptr;
se::Class* __jsb_cocos2dx_RemoveSelf_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RemoveSelf_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RemoveSelf* cobj = (cocos2d::RemoveSelf*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RemoveSelf_init : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RemoveSelf_init : Error processing arguments");
        bool result = cobj->init(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RemoveSelf_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::RemoveSelf::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_RemoveSelf_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RemoveSelf_create : Error processing arguments");
        auto result = cocos2d::RemoveSelf::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_RemoveSelf_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_RemoveSelf_finalize)

SE_CTOR_BEGIN(js_cocos2dx_RemoveSelf_constructor, __jsb_cocos2dx_RemoveSelf_class, js_cocos2dx_RemoveSelf_finalize)
{
    cocos2d::RemoveSelf* cobj = new (std::nothrow) cocos2d::RemoveSelf();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_RemoveSelf_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::RemoveSelf)", nativeThisObject);
    cocos2d::RemoveSelf* cobj = (cocos2d::RemoveSelf*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_RemoveSelf(se::Object* obj)
{
    auto cls = se::Class::create("RemoveSelf", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_RemoveSelf_constructor);

    cls->defineFunction("init", js_cocos2dx_RemoveSelf_init);
    cls->defineStaticFunction("create", js_cocos2dx_RemoveSelf_create);
    cls->defineFinalizedFunction(js_cocos2dx_RemoveSelf_finalize);
    cls->install();

    __jsb_cocos2dx_RemoveSelf_proto = cls->getProto();
    __jsb_cocos2dx_RemoveSelf_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_FlipX_proto = nullptr;
se::Class* __jsb_cocos2dx_FlipX_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FlipX_initWithFlipX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FlipX* cobj = (cocos2d::FlipX*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FlipX_initWithFlipX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipX_initWithFlipX : Error processing arguments");
        bool result = cobj->initWithFlipX(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FlipX_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipX_create : Error processing arguments");
        auto result = cocos2d::FlipX::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FlipX_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FlipX_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FlipX_constructor, __jsb_cocos2dx_FlipX_class, js_cocos2dx_FlipX_finalize)
{
    cocos2d::FlipX* cobj = new (std::nothrow) cocos2d::FlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FlipX_ctor, __jsb_cocos2dx_FlipX_class, js_cocos2dx_FlipX_finalize)
{
    cocos2d::FlipX* cobj = new (std::nothrow) cocos2d::FlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FlipX_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FlipX)", nativeThisObject);
    cocos2d::FlipX* cobj = (cocos2d::FlipX*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FlipX(se::Object* obj)
{
    auto cls = se::Class::create("FlipX", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_FlipX_constructor);

    cls->defineFunction("initWithFlipX", js_cocos2dx_FlipX_initWithFlipX);
    cls->defineFunction("ctor", js_cocos2dx_FlipX_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FlipX_create);
    cls->defineFinalizedFunction(js_cocos2dx_FlipX_finalize);
    cls->install();

    __jsb_cocos2dx_FlipX_proto = cls->getProto();
    __jsb_cocos2dx_FlipX_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FlipX.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FlipY_proto = nullptr;
se::Class* __jsb_cocos2dx_FlipY_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FlipY_initWithFlipY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FlipY* cobj = (cocos2d::FlipY*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FlipY_initWithFlipY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipY_initWithFlipY : Error processing arguments");
        bool result = cobj->initWithFlipY(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FlipY_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipY_create : Error processing arguments");
        auto result = cocos2d::FlipY::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FlipY_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FlipY_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FlipY_constructor, __jsb_cocos2dx_FlipY_class, js_cocos2dx_FlipY_finalize)
{
    cocos2d::FlipY* cobj = new (std::nothrow) cocos2d::FlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FlipY_ctor, __jsb_cocos2dx_FlipY_class, js_cocos2dx_FlipY_finalize)
{
    cocos2d::FlipY* cobj = new (std::nothrow) cocos2d::FlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FlipY_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FlipY)", nativeThisObject);
    cocos2d::FlipY* cobj = (cocos2d::FlipY*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FlipY(se::Object* obj)
{
    auto cls = se::Class::create("FlipY", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_FlipY_constructor);

    cls->defineFunction("initWithFlipY", js_cocos2dx_FlipY_initWithFlipY);
    cls->defineFunction("ctor", js_cocos2dx_FlipY_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FlipY_create);
    cls->defineFinalizedFunction(js_cocos2dx_FlipY_finalize);
    cls->install();

    __jsb_cocos2dx_FlipY_proto = cls->getProto();
    __jsb_cocos2dx_FlipY_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FlipY.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Place_proto = nullptr;
se::Class* __jsb_cocos2dx_Place_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Place_initWithPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Place* cobj = (cocos2d::Place*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Place_initWithPosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Place_initWithPosition : Error processing arguments");
        bool result = cobj->initWithPosition(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Place_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Place_create : Error processing arguments");
        auto result = cocos2d::Place::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Place_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Place_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Place_constructor, __jsb_cocos2dx_Place_class, js_cocos2dx_Place_finalize)
{
    cocos2d::Place* cobj = new (std::nothrow) cocos2d::Place();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Place_ctor, __jsb_cocos2dx_Place_class, js_cocos2dx_Place_finalize)
{
    cocos2d::Place* cobj = new (std::nothrow) cocos2d::Place();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Place_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Place)", nativeThisObject);
    cocos2d::Place* cobj = (cocos2d::Place*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Place(se::Object* obj)
{
    auto cls = se::Class::create("Place", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_Place_constructor);

    cls->defineFunction("initWithPosition", js_cocos2dx_Place_initWithPosition);
    cls->defineFunction("ctor", js_cocos2dx_Place_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Place_create);
    cls->defineFinalizedFunction(js_cocos2dx_Place_finalize);
    cls->install();

    __jsb_cocos2dx_Place_proto = cls->getProto();
    __jsb_cocos2dx_Place_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Place.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_CallFunc_proto = nullptr;
se::Class* __jsb_cocos2dx_CallFunc_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CallFunc_execute, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CallFunc* cobj = (cocos2d::CallFunc*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CallFunc_execute : Invalid Native Object");
    if (argc == 0) {
        cobj->execute();
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CallFunc_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CallFunc_constructor, __jsb_cocos2dx_CallFunc_class, js_cocos2dx_CallFunc_finalize)
{
    cocos2d::CallFunc* cobj = new (std::nothrow) cocos2d::CallFunc();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_CallFunc_ctor, __jsb_cocos2dx_CallFunc_class, js_cocos2dx_CallFunc_finalize)
{
    cocos2d::CallFunc* cobj = new (std::nothrow) cocos2d::CallFunc();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CallFunc_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CallFunc)", nativeThisObject);
    cocos2d::CallFunc* cobj = (cocos2d::CallFunc*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_CallFunc(se::Object* obj)
{
    auto cls = se::Class::create("_CallFunc", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_CallFunc_constructor);

    cls->defineFunction("execute", js_cocos2dx_CallFunc_execute);
    cls->defineFunction("ctor", js_cocos2dx_CallFunc_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_CallFunc_finalize);
    cls->install();

    __jsb_cocos2dx_CallFunc_proto = cls->getProto();
    __jsb_cocos2dx_CallFunc_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc._CallFunc.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_CallFuncN_proto = nullptr;
se::Class* __jsb_cocos2dx_CallFuncN_class = nullptr;

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CallFuncN_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CallFuncN_constructor, __jsb_cocos2dx_CallFuncN_class, js_cocos2dx_CallFuncN_finalize)
{
    cocos2d::CallFuncN* cobj = new (std::nothrow) cocos2d::CallFuncN();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_CallFuncN_ctor, __jsb_cocos2dx_CallFuncN_class, js_cocos2dx_CallFuncN_finalize)
{
    cocos2d::CallFuncN* cobj = new (std::nothrow) cocos2d::CallFuncN();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CallFuncN_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CallFuncN)", nativeThisObject);
    cocos2d::CallFuncN* cobj = (cocos2d::CallFuncN*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_CallFuncN(se::Object* obj)
{
    auto cls = se::Class::create("CallFunc", obj, __jsb_cocos2dx_CallFunc_proto, js_cocos2dx_CallFuncN_constructor);

    cls->defineFunction("ctor", js_cocos2dx_CallFuncN_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_CallFuncN_finalize);
    cls->install();

    __jsb_cocos2dx_CallFuncN_proto = cls->getProto();
    __jsb_cocos2dx_CallFuncN_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.CallFunc.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_GridAction_proto = nullptr;
se::Class* __jsb_cocos2dx_GridAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GridAction_getGrid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridAction* cobj = (cocos2d::GridAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridAction_getGrid : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GridBase* result = cobj->getGrid();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GridBase>((cocos2d::GridBase*)result, __jsb_cocos2dx_GridBase_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridAction_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridAction* cobj = (cocos2d::GridAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridAction_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridAction_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_GridAction(se::Object* obj)
{
    auto cls = se::Class::create("GridAction", obj, __jsb_cocos2dx_ActionInterval_proto, nullptr);

    cls->defineFunction("getGrid", js_cocos2dx_GridAction_getGrid);
    cls->defineFunction("initWithDuration", js_cocos2dx_GridAction_initWithDuration);
    cls->install();

    __jsb_cocos2dx_GridAction_proto = cls->getProto();
    __jsb_cocos2dx_GridAction_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Grid3DAction_proto = nullptr;
se::Class* __jsb_cocos2dx_Grid3DAction_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Grid3DAction_getGridRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Grid3DAction* cobj = (cocos2d::Grid3DAction*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Grid3DAction_getGridRect : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getGridRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Grid3DAction(se::Object* obj)
{
    auto cls = se::Class::create("Grid3DAction", obj, __jsb_cocos2dx_GridAction_proto, nullptr);

    cls->defineFunction("getGridRect", js_cocos2dx_Grid3DAction_getGridRect);
    cls->install();

    __jsb_cocos2dx_Grid3DAction_proto = cls->getProto();
    __jsb_cocos2dx_Grid3DAction_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TiledGrid3DAction_proto = nullptr;
se::Class* __jsb_cocos2dx_TiledGrid3DAction_class = nullptr;

bool js_register_cocos2dx_TiledGrid3DAction(se::Object* obj)
{
    auto cls = se::Class::create("TiledGrid3DAction", obj, __jsb_cocos2dx_GridAction_proto, nullptr);

    cls->install();

    __jsb_cocos2dx_TiledGrid3DAction_proto = cls->getProto();
    __jsb_cocos2dx_TiledGrid3DAction_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_StopGrid_proto = nullptr;
se::Class* __jsb_cocos2dx_StopGrid_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_StopGrid_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::StopGrid::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_StopGrid_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_StopGrid_finalize)

SE_CTOR_BEGIN(js_cocos2dx_StopGrid_constructor, __jsb_cocos2dx_StopGrid_class, js_cocos2dx_StopGrid_finalize)
{
    cocos2d::StopGrid* cobj = new (std::nothrow) cocos2d::StopGrid();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_StopGrid_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::StopGrid)", nativeThisObject);
    cocos2d::StopGrid* cobj = (cocos2d::StopGrid*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_StopGrid(se::Object* obj)
{
    auto cls = se::Class::create("StopGrid", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_StopGrid_constructor);

    cls->defineStaticFunction("create", js_cocos2dx_StopGrid_create);
    cls->defineFinalizedFunction(js_cocos2dx_StopGrid_finalize);
    cls->install();

    __jsb_cocos2dx_StopGrid_proto = cls->getProto();
    __jsb_cocos2dx_StopGrid_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ReuseGrid_proto = nullptr;
se::Class* __jsb_cocos2dx_ReuseGrid_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ReuseGrid_initWithTimes, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ReuseGrid* cobj = (cocos2d::ReuseGrid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ReuseGrid_initWithTimes : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ReuseGrid_initWithTimes : Error processing arguments");
        bool result = cobj->initWithTimes(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ReuseGrid_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ReuseGrid_create : Error processing arguments");
        auto result = cocos2d::ReuseGrid::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ReuseGrid_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ReuseGrid_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ReuseGrid_constructor, __jsb_cocos2dx_ReuseGrid_class, js_cocos2dx_ReuseGrid_finalize)
{
    cocos2d::ReuseGrid* cobj = new (std::nothrow) cocos2d::ReuseGrid();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ReuseGrid_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ReuseGrid)", nativeThisObject);
    cocos2d::ReuseGrid* cobj = (cocos2d::ReuseGrid*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ReuseGrid(se::Object* obj)
{
    auto cls = se::Class::create("ReuseGrid", obj, __jsb_cocos2dx_ActionInstant_proto, js_cocos2dx_ReuseGrid_constructor);

    cls->defineFunction("initWithTimes", js_cocos2dx_ReuseGrid_initWithTimes);
    cls->defineStaticFunction("create", js_cocos2dx_ReuseGrid_create);
    cls->defineFinalizedFunction(js_cocos2dx_ReuseGrid_finalize);
    cls->install();

    __jsb_cocos2dx_ReuseGrid_proto = cls->getProto();
    __jsb_cocos2dx_ReuseGrid_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Waves3D_proto = nullptr;
se::Class* __jsb_cocos2dx_Waves3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves3D_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves3D_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves3D_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves3D_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves3D_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves3D_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves3D_create : Error processing arguments");
        auto result = cocos2d::Waves3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Waves3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Waves3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Waves3D_constructor, __jsb_cocos2dx_Waves3D_class, js_cocos2dx_Waves3D_finalize)
{
    cocos2d::Waves3D* cobj = new (std::nothrow) cocos2d::Waves3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Waves3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Waves3D)", nativeThisObject);
    cocos2d::Waves3D* cobj = (cocos2d::Waves3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Waves3D(se::Object* obj)
{
    auto cls = se::Class::create("Waves3D", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Waves3D_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_Waves3D_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_Waves3D_initWithDuration);
    cls->defineFunction("getAmplitude", js_cocos2dx_Waves3D_getAmplitude);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_Waves3D_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_Waves3D_setAmplitude);
    cls->defineStaticFunction("create", js_cocos2dx_Waves3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_Waves3D_finalize);
    cls->install();

    __jsb_cocos2dx_Waves3D_proto = cls->getProto();
    __jsb_cocos2dx_Waves3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_FlipX3D_proto = nullptr;
se::Class* __jsb_cocos2dx_FlipX3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FlipX3D_initWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FlipX3D* cobj = (cocos2d::FlipX3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FlipX3D_initWithSize : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Size arg0;
        float arg1 = 0;
        ok &= seval_to_Size(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipX3D_initWithSize : Error processing arguments");
        bool result = cobj->initWithSize(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FlipX3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FlipX3D* cobj = (cocos2d::FlipX3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FlipX3D_initWithDuration : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipX3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FlipX3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipX3D_create : Error processing arguments");
        auto result = cocos2d::FlipX3D::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FlipX3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FlipX3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FlipX3D_constructor, __jsb_cocos2dx_FlipX3D_class, js_cocos2dx_FlipX3D_finalize)
{
    cocos2d::FlipX3D* cobj = new (std::nothrow) cocos2d::FlipX3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FlipX3D_ctor, __jsb_cocos2dx_FlipX3D_class, js_cocos2dx_FlipX3D_finalize)
{
    cocos2d::FlipX3D* cobj = new (std::nothrow) cocos2d::FlipX3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FlipX3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FlipX3D)", nativeThisObject);
    cocos2d::FlipX3D* cobj = (cocos2d::FlipX3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FlipX3D(se::Object* obj)
{
    auto cls = se::Class::create("FlipX3D", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_FlipX3D_constructor);

    cls->defineFunction("initWithSize", js_cocos2dx_FlipX3D_initWithSize);
    cls->defineFunction("initWithDuration", js_cocos2dx_FlipX3D_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_FlipX3D_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FlipX3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_FlipX3D_finalize);
    cls->install();

    __jsb_cocos2dx_FlipX3D_proto = cls->getProto();
    __jsb_cocos2dx_FlipX3D_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FlipX3D.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FlipY3D_proto = nullptr;
se::Class* __jsb_cocos2dx_FlipY3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FlipY3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FlipY3D_create : Error processing arguments");
        auto result = cocos2d::FlipY3D::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FlipY3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FlipY3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FlipY3D_constructor, __jsb_cocos2dx_FlipY3D_class, js_cocos2dx_FlipY3D_finalize)
{
    cocos2d::FlipY3D* cobj = new (std::nothrow) cocos2d::FlipY3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FlipY3D_ctor, __jsb_cocos2dx_FlipY3D_class, js_cocos2dx_FlipY3D_finalize)
{
    cocos2d::FlipY3D* cobj = new (std::nothrow) cocos2d::FlipY3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FlipY3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FlipY3D)", nativeThisObject);
    cocos2d::FlipY3D* cobj = (cocos2d::FlipY3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FlipY3D(se::Object* obj)
{
    auto cls = se::Class::create("FlipY3D", obj, __jsb_cocos2dx_FlipX3D_proto, js_cocos2dx_FlipY3D_constructor);

    cls->defineFunction("ctor", js_cocos2dx_FlipY3D_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FlipY3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_FlipY3D_finalize);
    cls->install();

    __jsb_cocos2dx_FlipY3D_proto = cls->getProto();
    __jsb_cocos2dx_FlipY3D_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FlipY3D.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Lens3D_proto = nullptr;
se::Class* __jsb_cocos2dx_Lens3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_setConcave, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_setConcave : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Lens3D_setConcave : Error processing arguments");
        cobj->setConcave(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Lens3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_setLensEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_setLensEffect : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Lens3D_setLensEffect : Error processing arguments");
        cobj->setLensEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_getLensEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_getLensEffect : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLensEffect();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_setPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_setPosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Lens3D_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_getPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Lens3D_getPosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Lens3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Lens3D_create : Error processing arguments");
        auto result = cocos2d::Lens3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Lens3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Lens3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Lens3D_constructor, __jsb_cocos2dx_Lens3D_class, js_cocos2dx_Lens3D_finalize)
{
    cocos2d::Lens3D* cobj = new (std::nothrow) cocos2d::Lens3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Lens3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Lens3D)", nativeThisObject);
    cocos2d::Lens3D* cobj = (cocos2d::Lens3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Lens3D(se::Object* obj)
{
    auto cls = se::Class::create("Lens3D", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Lens3D_constructor);

    cls->defineFunction("setConcave", js_cocos2dx_Lens3D_setConcave);
    cls->defineFunction("initWithDuration", js_cocos2dx_Lens3D_initWithDuration);
    cls->defineFunction("setLensEffect", js_cocos2dx_Lens3D_setLensEffect);
    cls->defineFunction("getLensEffect", js_cocos2dx_Lens3D_getLensEffect);
    cls->defineFunction("setPosition", js_cocos2dx_Lens3D_setPosition);
    cls->defineFunction("getPosition", js_cocos2dx_Lens3D_getPosition);
    cls->defineStaticFunction("create", js_cocos2dx_Lens3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_Lens3D_finalize);
    cls->install();

    __jsb_cocos2dx_Lens3D_proto = cls->getProto();
    __jsb_cocos2dx_Lens3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Ripple3D_proto = nullptr;
se::Class* __jsb_cocos2dx_Ripple3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Ripple3D_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_initWithDuration : Invalid Native Object");
    if (argc == 6) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3 = 0;
        unsigned int arg4 = 0;
        float arg5 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_uint32(args[4], &arg4);
        ok &= seval_to_float(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Ripple3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Ripple3D_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_setPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_setPosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Ripple3D_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_getPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Ripple3D_getPosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Ripple3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 6) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3 = 0;
        unsigned int arg4 = 0;
        float arg5 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_uint32(args[4], &arg4);
        ok &= seval_to_float(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Ripple3D_create : Error processing arguments");
        auto result = cocos2d::Ripple3D::create(arg0, arg1, arg2, arg3, arg4, arg5);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Ripple3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Ripple3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Ripple3D_constructor, __jsb_cocos2dx_Ripple3D_class, js_cocos2dx_Ripple3D_finalize)
{
    cocos2d::Ripple3D* cobj = new (std::nothrow) cocos2d::Ripple3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Ripple3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Ripple3D)", nativeThisObject);
    cocos2d::Ripple3D* cobj = (cocos2d::Ripple3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Ripple3D(se::Object* obj)
{
    auto cls = se::Class::create("Ripple3D", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Ripple3D_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_Ripple3D_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_Ripple3D_initWithDuration);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_Ripple3D_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_Ripple3D_setAmplitude);
    cls->defineFunction("getAmplitude", js_cocos2dx_Ripple3D_getAmplitude);
    cls->defineFunction("setPosition", js_cocos2dx_Ripple3D_setPosition);
    cls->defineFunction("getPosition", js_cocos2dx_Ripple3D_getPosition);
    cls->defineStaticFunction("create", js_cocos2dx_Ripple3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_Ripple3D_finalize);
    cls->install();

    __jsb_cocos2dx_Ripple3D_proto = cls->getProto();
    __jsb_cocos2dx_Ripple3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Shaky3D_proto = nullptr;
se::Class* __jsb_cocos2dx_Shaky3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Shaky3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Shaky3D* cobj = (cocos2d::Shaky3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Shaky3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Shaky3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Shaky3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Shaky3D_create : Error processing arguments");
        auto result = cocos2d::Shaky3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Shaky3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Shaky3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Shaky3D_constructor, __jsb_cocos2dx_Shaky3D_class, js_cocos2dx_Shaky3D_finalize)
{
    cocos2d::Shaky3D* cobj = new (std::nothrow) cocos2d::Shaky3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Shaky3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Shaky3D)", nativeThisObject);
    cocos2d::Shaky3D* cobj = (cocos2d::Shaky3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Shaky3D(se::Object* obj)
{
    auto cls = se::Class::create("Shaky3D", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Shaky3D_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_Shaky3D_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_Shaky3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_Shaky3D_finalize);
    cls->install();

    __jsb_cocos2dx_Shaky3D_proto = cls->getProto();
    __jsb_cocos2dx_Shaky3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Liquid_proto = nullptr;
se::Class* __jsb_cocos2dx_Liquid_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Liquid_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Liquid_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Liquid_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Liquid_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Liquid_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Liquid_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Liquid_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Liquid_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Liquid_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Liquid_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Liquid_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Liquid_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Liquid_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Liquid_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Liquid_create : Error processing arguments");
        auto result = cocos2d::Liquid::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Liquid_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Liquid_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Liquid_constructor, __jsb_cocos2dx_Liquid_class, js_cocos2dx_Liquid_finalize)
{
    cocos2d::Liquid* cobj = new (std::nothrow) cocos2d::Liquid();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Liquid_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Liquid)", nativeThisObject);
    cocos2d::Liquid* cobj = (cocos2d::Liquid*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Liquid(se::Object* obj)
{
    auto cls = se::Class::create("Liquid", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Liquid_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_Liquid_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_Liquid_initWithDuration);
    cls->defineFunction("getAmplitude", js_cocos2dx_Liquid_getAmplitude);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_Liquid_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_Liquid_setAmplitude);
    cls->defineStaticFunction("create", js_cocos2dx_Liquid_create);
    cls->defineFinalizedFunction(js_cocos2dx_Liquid_finalize);
    cls->install();

    __jsb_cocos2dx_Liquid_proto = cls->getProto();
    __jsb_cocos2dx_Liquid_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Waves_proto = nullptr;
se::Class* __jsb_cocos2dx_Waves_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Waves_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves_initWithDuration : Invalid Native Object");
    if (argc == 6) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        bool arg4;
        bool arg5;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_boolean(args[4], &arg4);
        ok &= seval_to_boolean(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Waves_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Waves_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 6) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        bool arg4;
        bool arg5;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_boolean(args[4], &arg4);
        ok &= seval_to_boolean(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Waves_create : Error processing arguments");
        auto result = cocos2d::Waves::create(arg0, arg1, arg2, arg3, arg4, arg5);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Waves_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Waves_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Waves_constructor, __jsb_cocos2dx_Waves_class, js_cocos2dx_Waves_finalize)
{
    cocos2d::Waves* cobj = new (std::nothrow) cocos2d::Waves();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Waves_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Waves)", nativeThisObject);
    cocos2d::Waves* cobj = (cocos2d::Waves*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Waves(se::Object* obj)
{
    auto cls = se::Class::create("Waves", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Waves_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_Waves_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_Waves_initWithDuration);
    cls->defineFunction("getAmplitude", js_cocos2dx_Waves_getAmplitude);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_Waves_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_Waves_setAmplitude);
    cls->defineStaticFunction("create", js_cocos2dx_Waves_create);
    cls->defineFinalizedFunction(js_cocos2dx_Waves_finalize);
    cls->install();

    __jsb_cocos2dx_Waves_proto = cls->getProto();
    __jsb_cocos2dx_Waves_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Twirl_proto = nullptr;
se::Class* __jsb_cocos2dx_Twirl_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Twirl_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Twirl_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_initWithDuration : Invalid Native Object");
    if (argc == 5) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        unsigned int arg3 = 0;
        float arg4 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_uint32(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Twirl_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Twirl_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_setPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_setPosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Twirl_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_getPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Twirl_getPosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Twirl_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 5) {
        float arg0 = 0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        unsigned int arg3 = 0;
        float arg4 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_uint32(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Twirl_create : Error processing arguments");
        auto result = cocos2d::Twirl::create(arg0, arg1, arg2, arg3, arg4);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Twirl_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Twirl_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Twirl_constructor, __jsb_cocos2dx_Twirl_class, js_cocos2dx_Twirl_finalize)
{
    cocos2d::Twirl* cobj = new (std::nothrow) cocos2d::Twirl();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Twirl_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Twirl)", nativeThisObject);
    cocos2d::Twirl* cobj = (cocos2d::Twirl*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Twirl(se::Object* obj)
{
    auto cls = se::Class::create("Twirl", obj, __jsb_cocos2dx_Grid3DAction_proto, js_cocos2dx_Twirl_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_Twirl_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_Twirl_initWithDuration);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_Twirl_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_Twirl_setAmplitude);
    cls->defineFunction("getAmplitude", js_cocos2dx_Twirl_getAmplitude);
    cls->defineFunction("setPosition", js_cocos2dx_Twirl_setPosition);
    cls->defineFunction("getPosition", js_cocos2dx_Twirl_getPosition);
    cls->defineStaticFunction("create", js_cocos2dx_Twirl_create);
    cls->defineFinalizedFunction(js_cocos2dx_Twirl_finalize);
    cls->install();

    __jsb_cocos2dx_Twirl_proto = cls->getProto();
    __jsb_cocos2dx_Twirl_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ActionManager_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionManager_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_getActionByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_getActionByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        const cocos2d::Node* arg1 = nullptr;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_getActionByTag : Error processing arguments");
        cocos2d::Action* result = cobj->getActionByTag(arg0, arg1);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Action>((cocos2d::Action*)result, __jsb_cocos2dx_Action_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeActionByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeActionByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        cocos2d::Node* arg1 = nullptr;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_removeActionByTag : Error processing arguments");
        cobj->removeActionByTag(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeActionsByFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeActionsByFlags : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        cocos2d::Node* arg1 = nullptr;
        ok &= seval_to_uint32(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_removeActionsByFlags : Error processing arguments");
        cobj->removeActionsByFlags(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeAllActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeAllActions : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllActions();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_addAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_addAction : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Action* arg0 = nullptr;
        cocos2d::Node* arg1 = nullptr;
        bool arg2;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_boolean(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_addAction : Error processing arguments");
        cobj->addAction(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_resumeTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_resumeTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_resumeTarget : Error processing arguments");
        cobj->resumeTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_update, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_update : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_update : Error processing arguments");
        cobj->update(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_pauseTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_pauseTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_pauseTarget : Error processing arguments");
        cobj->pauseTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget : Invalid Native Object");
    if (argc == 1) {
        const cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget : Error processing arguments");
        ssize_t result = cobj->getNumberOfRunningActionsInTarget(arg0);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeAllActionsFromTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeAllActionsFromTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_removeAllActionsFromTarget : Error processing arguments");
        cobj->removeAllActionsFromTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_resumeTargets, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_resumeTargets : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::Node *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_resumeTargets : Error processing arguments");
        cobj->resumeTargets(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Action* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_removeAction : Error processing arguments");
        cobj->removeAction(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_pauseAllRunningActions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_pauseAllRunningActions : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vector<cocos2d::Node *> result = cobj->pauseAllRunningActions();
        se::Value jsret;
        ok &= Vector_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_removeAllActionsByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_removeAllActionsByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        cocos2d::Node* arg1 = nullptr;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_removeAllActionsByTag : Error processing arguments");
        cobj->removeAllActionsByTag(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionManager_getNumberOfRunningActionsInTargetByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionManager_getNumberOfRunningActionsInTargetByTag : Invalid Native Object");
    if (argc == 2) {
        const cocos2d::Node* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionManager_getNumberOfRunningActionsInTargetByTag : Error processing arguments");
        unsigned long result = cobj->getNumberOfRunningActionsInTargetByTag(arg0, arg1);
        se::Value jsret;
        ok &= ulong_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ActionManager_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ActionManager_constructor, __jsb_cocos2dx_ActionManager_class, js_cocos2dx_ActionManager_finalize)
{
    cocos2d::ActionManager* cobj = new (std::nothrow) cocos2d::ActionManager();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ActionManager_ctor, __jsb_cocos2dx_ActionManager_class, js_cocos2dx_ActionManager_finalize)
{
    cocos2d::ActionManager* cobj = new (std::nothrow) cocos2d::ActionManager();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ActionManager_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ActionManager)", nativeThisObject);
    cocos2d::ActionManager* cobj = (cocos2d::ActionManager*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ActionManager(se::Object* obj)
{
    auto cls = se::Class::create("ActionManager", obj, nullptr, js_cocos2dx_ActionManager_constructor);

    cls->defineFunction("getActionByTag", js_cocos2dx_ActionManager_getActionByTag);
    cls->defineFunction("removeActionByTag", js_cocos2dx_ActionManager_removeActionByTag);
    cls->defineFunction("removeActionsByFlags", js_cocos2dx_ActionManager_removeActionsByFlags);
    cls->defineFunction("removeAllActions", js_cocos2dx_ActionManager_removeAllActions);
    cls->defineFunction("addAction", js_cocos2dx_ActionManager_addAction);
    cls->defineFunction("resumeTarget", js_cocos2dx_ActionManager_resumeTarget);
    cls->defineFunction("update", js_cocos2dx_ActionManager_update);
    cls->defineFunction("pauseTarget", js_cocos2dx_ActionManager_pauseTarget);
    cls->defineFunction("getNumberOfRunningActionsInTarget", js_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget);
    cls->defineFunction("removeAllActionsFromTarget", js_cocos2dx_ActionManager_removeAllActionsFromTarget);
    cls->defineFunction("resumeTargets", js_cocos2dx_ActionManager_resumeTargets);
    cls->defineFunction("removeAction", js_cocos2dx_ActionManager_removeAction);
    cls->defineFunction("pauseAllRunningActions", js_cocos2dx_ActionManager_pauseAllRunningActions);
    cls->defineFunction("removeAllActionsByTag", js_cocos2dx_ActionManager_removeAllActionsByTag);
    cls->defineFunction("getNumberOfRunningActionsInTargetByTag", js_cocos2dx_ActionManager_getNumberOfRunningActionsInTargetByTag);
    cls->defineFunction("ctor", js_cocos2dx_ActionManager_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_ActionManager_finalize);
    cls->install();

    __jsb_cocos2dx_ActionManager_proto = cls->getProto();
    __jsb_cocos2dx_ActionManager_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ActionManager.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_PageTurn3D_proto = nullptr;
se::Class* __jsb_cocos2dx_PageTurn3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_PageTurn3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_PageTurn3D_create : Error processing arguments");
        auto result = cocos2d::PageTurn3D::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_PageTurn3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_PageTurn3D(se::Object* obj)
{
    auto cls = se::Class::create("PageTurn3D", obj, __jsb_cocos2dx_Grid3DAction_proto, nullptr);

    cls->defineStaticFunction("create", js_cocos2dx_PageTurn3D_create);
    cls->install();

    __jsb_cocos2dx_PageTurn3D_proto = cls->getProto();
    __jsb_cocos2dx_PageTurn3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ProgressTo_proto = nullptr;
se::Class* __jsb_cocos2dx_ProgressTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ProgressTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTo* cobj = (cocos2d::ProgressTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTo_create : Error processing arguments");
        auto result = cocos2d::ProgressTo::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ProgressTo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ProgressTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ProgressTo_constructor, __jsb_cocos2dx_ProgressTo_class, js_cocos2dx_ProgressTo_finalize)
{
    cocos2d::ProgressTo* cobj = new (std::nothrow) cocos2d::ProgressTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ProgressTo_ctor, __jsb_cocos2dx_ProgressTo_class, js_cocos2dx_ProgressTo_finalize)
{
    cocos2d::ProgressTo* cobj = new (std::nothrow) cocos2d::ProgressTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ProgressTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ProgressTo)", nativeThisObject);
    cocos2d::ProgressTo* cobj = (cocos2d::ProgressTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ProgressTo(se::Object* obj)
{
    auto cls = se::Class::create("ProgressTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ProgressTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ProgressTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_ProgressTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ProgressTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_ProgressTo_finalize);
    cls->install();

    __jsb_cocos2dx_ProgressTo_proto = cls->getProto();
    __jsb_cocos2dx_ProgressTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ProgressTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ProgressFromTo_proto = nullptr;
se::Class* __jsb_cocos2dx_ProgressFromTo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ProgressFromTo_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressFromTo* cobj = (cocos2d::ProgressFromTo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressFromTo_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressFromTo_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressFromTo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressFromTo_create : Error processing arguments");
        auto result = cocos2d::ProgressFromTo::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ProgressFromTo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ProgressFromTo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ProgressFromTo_constructor, __jsb_cocos2dx_ProgressFromTo_class, js_cocos2dx_ProgressFromTo_finalize)
{
    cocos2d::ProgressFromTo* cobj = new (std::nothrow) cocos2d::ProgressFromTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ProgressFromTo_ctor, __jsb_cocos2dx_ProgressFromTo_class, js_cocos2dx_ProgressFromTo_finalize)
{
    cocos2d::ProgressFromTo* cobj = new (std::nothrow) cocos2d::ProgressFromTo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ProgressFromTo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ProgressFromTo)", nativeThisObject);
    cocos2d::ProgressFromTo* cobj = (cocos2d::ProgressFromTo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ProgressFromTo(se::Object* obj)
{
    auto cls = se::Class::create("ProgressFromTo", obj, __jsb_cocos2dx_ActionInterval_proto, js_cocos2dx_ProgressFromTo_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ProgressFromTo_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_ProgressFromTo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ProgressFromTo_create);
    cls->defineFinalizedFunction(js_cocos2dx_ProgressFromTo_finalize);
    cls->install();

    __jsb_cocos2dx_ProgressFromTo_proto = cls->getProto();
    __jsb_cocos2dx_ProgressFromTo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ProgressFromTo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ShakyTiles3D_proto = nullptr;
se::Class* __jsb_cocos2dx_ShakyTiles3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ShakyTiles3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShakyTiles3D* cobj = (cocos2d::ShakyTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShakyTiles3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShakyTiles3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShakyTiles3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShakyTiles3D_create : Error processing arguments");
        auto result = cocos2d::ShakyTiles3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ShakyTiles3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ShakyTiles3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ShakyTiles3D_constructor, __jsb_cocos2dx_ShakyTiles3D_class, js_cocos2dx_ShakyTiles3D_finalize)
{
    cocos2d::ShakyTiles3D* cobj = new (std::nothrow) cocos2d::ShakyTiles3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ShakyTiles3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ShakyTiles3D)", nativeThisObject);
    cocos2d::ShakyTiles3D* cobj = (cocos2d::ShakyTiles3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ShakyTiles3D(se::Object* obj)
{
    auto cls = se::Class::create("ShakyTiles3D", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_ShakyTiles3D_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ShakyTiles3D_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_ShakyTiles3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_ShakyTiles3D_finalize);
    cls->install();

    __jsb_cocos2dx_ShakyTiles3D_proto = cls->getProto();
    __jsb_cocos2dx_ShakyTiles3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ShatteredTiles3D_proto = nullptr;
se::Class* __jsb_cocos2dx_ShatteredTiles3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ShatteredTiles3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShatteredTiles3D* cobj = (cocos2d::ShatteredTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShatteredTiles3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShatteredTiles3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShatteredTiles3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        int arg2 = 0;
        bool arg3;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShatteredTiles3D_create : Error processing arguments");
        auto result = cocos2d::ShatteredTiles3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ShatteredTiles3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ShatteredTiles3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ShatteredTiles3D_constructor, __jsb_cocos2dx_ShatteredTiles3D_class, js_cocos2dx_ShatteredTiles3D_finalize)
{
    cocos2d::ShatteredTiles3D* cobj = new (std::nothrow) cocos2d::ShatteredTiles3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ShatteredTiles3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ShatteredTiles3D)", nativeThisObject);
    cocos2d::ShatteredTiles3D* cobj = (cocos2d::ShatteredTiles3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ShatteredTiles3D(se::Object* obj)
{
    auto cls = se::Class::create("ShatteredTiles3D", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_ShatteredTiles3D_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_ShatteredTiles3D_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_ShatteredTiles3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_ShatteredTiles3D_finalize);
    cls->install();

    __jsb_cocos2dx_ShatteredTiles3D_proto = cls->getProto();
    __jsb_cocos2dx_ShatteredTiles3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ShuffleTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_ShuffleTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_placeTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShuffleTiles* cobj = (cocos2d::ShuffleTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShuffleTiles_placeTile : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Vec2 arg0;
        cocos2d::Tile* arg1 = nullptr;
        ok &= seval_to_Vec2(args[0], &arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR Tile*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShuffleTiles_placeTile : Error processing arguments");
        cobj->placeTile(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_shuffle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShuffleTiles* cobj = (cocos2d::ShuffleTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShuffleTiles_shuffle : Invalid Native Object");
    if (argc == 2) {
        unsigned int* arg0 = 0;
        unsigned int arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned int*
		ok = false;
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShuffleTiles_shuffle : Error processing arguments");
        cobj->shuffle(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShuffleTiles* cobj = (cocos2d::ShuffleTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShuffleTiles_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShuffleTiles_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_getDelta, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ShuffleTiles* cobj = (cocos2d::ShuffleTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ShuffleTiles_getDelta : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShuffleTiles_getDelta : Error processing arguments");
        cocos2d::Size result = cobj->getDelta(arg0);
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ShuffleTiles_create : Error processing arguments");
        auto result = cocos2d::ShuffleTiles::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ShuffleTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ShuffleTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ShuffleTiles_constructor, __jsb_cocos2dx_ShuffleTiles_class, js_cocos2dx_ShuffleTiles_finalize)
{
    cocos2d::ShuffleTiles* cobj = new (std::nothrow) cocos2d::ShuffleTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ShuffleTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ShuffleTiles)", nativeThisObject);
    cocos2d::ShuffleTiles* cobj = (cocos2d::ShuffleTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ShuffleTiles(se::Object* obj)
{
    auto cls = se::Class::create("ShuffleTiles", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_ShuffleTiles_constructor);

    cls->defineFunction("placeTile", js_cocos2dx_ShuffleTiles_placeTile);
    cls->defineFunction("shuffle", js_cocos2dx_ShuffleTiles_shuffle);
    cls->defineFunction("initWithDuration", js_cocos2dx_ShuffleTiles_initWithDuration);
    cls->defineFunction("getDelta", js_cocos2dx_ShuffleTiles_getDelta);
    cls->defineStaticFunction("create", js_cocos2dx_ShuffleTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_ShuffleTiles_finalize);
    cls->install();

    __jsb_cocos2dx_ShuffleTiles_proto = cls->getProto();
    __jsb_cocos2dx_ShuffleTiles_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_FadeOutTRTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeOutTRTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_turnOnTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeOutTRTiles* cobj = (cocos2d::FadeOutTRTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeOutTRTiles_turnOnTile : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutTRTiles_turnOnTile : Error processing arguments");
        cobj->turnOnTile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_turnOffTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeOutTRTiles* cobj = (cocos2d::FadeOutTRTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeOutTRTiles_turnOffTile : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutTRTiles_turnOffTile : Error processing arguments");
        cobj->turnOffTile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_transformTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeOutTRTiles* cobj = (cocos2d::FadeOutTRTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeOutTRTiles_transformTile : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Vec2 arg0;
        float arg1 = 0;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutTRTiles_transformTile : Error processing arguments");
        cobj->transformTile(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_testFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::FadeOutTRTiles* cobj = (cocos2d::FadeOutTRTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_FadeOutTRTiles_testFunc : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Size arg0;
        float arg1 = 0;
        ok &= seval_to_Size(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutTRTiles_testFunc : Error processing arguments");
        float result = cobj->testFunc(arg0, arg1);
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutTRTiles_create : Error processing arguments");
        auto result = cocos2d::FadeOutTRTiles::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeOutTRTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeOutTRTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeOutTRTiles_constructor, __jsb_cocos2dx_FadeOutTRTiles_class, js_cocos2dx_FadeOutTRTiles_finalize)
{
    cocos2d::FadeOutTRTiles* cobj = new (std::nothrow) cocos2d::FadeOutTRTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeOutTRTiles_ctor, __jsb_cocos2dx_FadeOutTRTiles_class, js_cocos2dx_FadeOutTRTiles_finalize)
{
    cocos2d::FadeOutTRTiles* cobj = new (std::nothrow) cocos2d::FadeOutTRTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeOutTRTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeOutTRTiles)", nativeThisObject);
    cocos2d::FadeOutTRTiles* cobj = (cocos2d::FadeOutTRTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeOutTRTiles(se::Object* obj)
{
    auto cls = se::Class::create("FadeOutTRTiles", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_FadeOutTRTiles_constructor);

    cls->defineFunction("turnOnTile", js_cocos2dx_FadeOutTRTiles_turnOnTile);
    cls->defineFunction("turnOffTile", js_cocos2dx_FadeOutTRTiles_turnOffTile);
    cls->defineFunction("transformTile", js_cocos2dx_FadeOutTRTiles_transformTile);
    cls->defineFunction("testFunc", js_cocos2dx_FadeOutTRTiles_testFunc);
    cls->defineFunction("ctor", js_cocos2dx_FadeOutTRTiles_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeOutTRTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeOutTRTiles_finalize);
    cls->install();

    __jsb_cocos2dx_FadeOutTRTiles_proto = cls->getProto();
    __jsb_cocos2dx_FadeOutTRTiles_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeOutTRTiles.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeOutBLTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeOutBLTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeOutBLTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutBLTiles_create : Error processing arguments");
        auto result = cocos2d::FadeOutBLTiles::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeOutBLTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeOutBLTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeOutBLTiles_constructor, __jsb_cocos2dx_FadeOutBLTiles_class, js_cocos2dx_FadeOutBLTiles_finalize)
{
    cocos2d::FadeOutBLTiles* cobj = new (std::nothrow) cocos2d::FadeOutBLTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeOutBLTiles_ctor, __jsb_cocos2dx_FadeOutBLTiles_class, js_cocos2dx_FadeOutBLTiles_finalize)
{
    cocos2d::FadeOutBLTiles* cobj = new (std::nothrow) cocos2d::FadeOutBLTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeOutBLTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeOutBLTiles)", nativeThisObject);
    cocos2d::FadeOutBLTiles* cobj = (cocos2d::FadeOutBLTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeOutBLTiles(se::Object* obj)
{
    auto cls = se::Class::create("FadeOutBLTiles", obj, __jsb_cocos2dx_FadeOutTRTiles_proto, js_cocos2dx_FadeOutBLTiles_constructor);

    cls->defineFunction("ctor", js_cocos2dx_FadeOutBLTiles_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeOutBLTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeOutBLTiles_finalize);
    cls->install();

    __jsb_cocos2dx_FadeOutBLTiles_proto = cls->getProto();
    __jsb_cocos2dx_FadeOutBLTiles_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeOutBLTiles.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeOutUpTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeOutUpTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeOutUpTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutUpTiles_create : Error processing arguments");
        auto result = cocos2d::FadeOutUpTiles::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeOutUpTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeOutUpTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeOutUpTiles_constructor, __jsb_cocos2dx_FadeOutUpTiles_class, js_cocos2dx_FadeOutUpTiles_finalize)
{
    cocos2d::FadeOutUpTiles* cobj = new (std::nothrow) cocos2d::FadeOutUpTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeOutUpTiles_ctor, __jsb_cocos2dx_FadeOutUpTiles_class, js_cocos2dx_FadeOutUpTiles_finalize)
{
    cocos2d::FadeOutUpTiles* cobj = new (std::nothrow) cocos2d::FadeOutUpTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeOutUpTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeOutUpTiles)", nativeThisObject);
    cocos2d::FadeOutUpTiles* cobj = (cocos2d::FadeOutUpTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeOutUpTiles(se::Object* obj)
{
    auto cls = se::Class::create("FadeOutUpTiles", obj, __jsb_cocos2dx_FadeOutTRTiles_proto, js_cocos2dx_FadeOutUpTiles_constructor);

    cls->defineFunction("ctor", js_cocos2dx_FadeOutUpTiles_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeOutUpTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeOutUpTiles_finalize);
    cls->install();

    __jsb_cocos2dx_FadeOutUpTiles_proto = cls->getProto();
    __jsb_cocos2dx_FadeOutUpTiles_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeOutUpTiles.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_FadeOutDownTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_FadeOutDownTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_FadeOutDownTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Size arg1;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_FadeOutDownTiles_create : Error processing arguments");
        auto result = cocos2d::FadeOutDownTiles::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_FadeOutDownTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_FadeOutDownTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_FadeOutDownTiles_constructor, __jsb_cocos2dx_FadeOutDownTiles_class, js_cocos2dx_FadeOutDownTiles_finalize)
{
    cocos2d::FadeOutDownTiles* cobj = new (std::nothrow) cocos2d::FadeOutDownTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_FadeOutDownTiles_ctor, __jsb_cocos2dx_FadeOutDownTiles_class, js_cocos2dx_FadeOutDownTiles_finalize)
{
    cocos2d::FadeOutDownTiles* cobj = new (std::nothrow) cocos2d::FadeOutDownTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_FadeOutDownTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::FadeOutDownTiles)", nativeThisObject);
    cocos2d::FadeOutDownTiles* cobj = (cocos2d::FadeOutDownTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_FadeOutDownTiles(se::Object* obj)
{
    auto cls = se::Class::create("FadeOutDownTiles", obj, __jsb_cocos2dx_FadeOutUpTiles_proto, js_cocos2dx_FadeOutDownTiles_constructor);

    cls->defineFunction("ctor", js_cocos2dx_FadeOutDownTiles_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_FadeOutDownTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_FadeOutDownTiles_finalize);
    cls->install();

    __jsb_cocos2dx_FadeOutDownTiles_proto = cls->getProto();
    __jsb_cocos2dx_FadeOutDownTiles_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.FadeOutDownTiles.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TurnOffTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_TurnOffTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_turnOnTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TurnOffTiles* cobj = (cocos2d::TurnOffTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TurnOffTiles_turnOnTile : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TurnOffTiles_turnOnTile : Error processing arguments");
        cobj->turnOnTile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_turnOffTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TurnOffTiles* cobj = (cocos2d::TurnOffTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TurnOffTiles_turnOffTile : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TurnOffTiles_turnOffTile : Error processing arguments");
        cobj->turnOffTile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_shuffle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TurnOffTiles* cobj = (cocos2d::TurnOffTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TurnOffTiles_shuffle : Invalid Native Object");
    if (argc == 2) {
        unsigned int* arg0 = 0;
        unsigned int arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned int*
		ok = false;
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TurnOffTiles_shuffle : Error processing arguments");
        cobj->shuffle(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TurnOffTiles* cobj = (cocos2d::TurnOffTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TurnOffTiles_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TurnOffTiles_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg1;
            ok &= seval_to_Size(args[1], &arg1);
            if (!ok) { ok = true; break; }
            unsigned int arg2 = 0;
            ok &= seval_to_uint32(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TurnOffTiles* result = cocos2d::TurnOffTiles::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TurnOffTiles>((cocos2d::TurnOffTiles*)result, __jsb_cocos2dx_TurnOffTiles_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg1;
            ok &= seval_to_Size(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TurnOffTiles* result = cocos2d::TurnOffTiles::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TurnOffTiles>((cocos2d::TurnOffTiles*)result, __jsb_cocos2dx_TurnOffTiles_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TurnOffTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TurnOffTiles_constructor, __jsb_cocos2dx_TurnOffTiles_class, js_cocos2dx_TurnOffTiles_finalize)
{
    cocos2d::TurnOffTiles* cobj = new (std::nothrow) cocos2d::TurnOffTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TurnOffTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TurnOffTiles)", nativeThisObject);
    cocos2d::TurnOffTiles* cobj = (cocos2d::TurnOffTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_TurnOffTiles(se::Object* obj)
{
    auto cls = se::Class::create("TurnOffTiles", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_TurnOffTiles_constructor);

    cls->defineFunction("turnOnTile", js_cocos2dx_TurnOffTiles_turnOnTile);
    cls->defineFunction("turnOffTile", js_cocos2dx_TurnOffTiles_turnOffTile);
    cls->defineFunction("shuffle", js_cocos2dx_TurnOffTiles_shuffle);
    cls->defineFunction("initWithDuration", js_cocos2dx_TurnOffTiles_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_TurnOffTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_TurnOffTiles_finalize);
    cls->install();

    __jsb_cocos2dx_TurnOffTiles_proto = cls->getProto();
    __jsb_cocos2dx_TurnOffTiles_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_WavesTiles3D_proto = nullptr;
se::Class* __jsb_cocos2dx_WavesTiles3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_WavesTiles3D_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_WavesTiles3D_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_WavesTiles3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_WavesTiles3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_WavesTiles3D_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_WavesTiles3D_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_WavesTiles3D_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_WavesTiles3D_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_WavesTiles3D_create : Error processing arguments");
        auto result = cocos2d::WavesTiles3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_WavesTiles3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_WavesTiles3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_WavesTiles3D_constructor, __jsb_cocos2dx_WavesTiles3D_class, js_cocos2dx_WavesTiles3D_finalize)
{
    cocos2d::WavesTiles3D* cobj = new (std::nothrow) cocos2d::WavesTiles3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_WavesTiles3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::WavesTiles3D)", nativeThisObject);
    cocos2d::WavesTiles3D* cobj = (cocos2d::WavesTiles3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_WavesTiles3D(se::Object* obj)
{
    auto cls = se::Class::create("WavesTiles3D", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_WavesTiles3D_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_WavesTiles3D_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_WavesTiles3D_initWithDuration);
    cls->defineFunction("getAmplitude", js_cocos2dx_WavesTiles3D_getAmplitude);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_WavesTiles3D_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_WavesTiles3D_setAmplitude);
    cls->defineStaticFunction("create", js_cocos2dx_WavesTiles3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_WavesTiles3D_finalize);
    cls->install();

    __jsb_cocos2dx_WavesTiles3D_proto = cls->getProto();
    __jsb_cocos2dx_WavesTiles3D_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_JumpTiles3D_proto = nullptr;
se::Class* __jsb_cocos2dx_JumpTiles3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_setAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTiles3D_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTiles3D_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTiles3D_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTiles3D_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_getAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTiles3D_getAmplitude : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitude();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_getAmplitudeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTiles3D_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAmplitudeRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_setAmplitude, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_JumpTiles3D_setAmplitude : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTiles3D_setAmplitude : Error processing arguments");
        cobj->setAmplitude(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        cocos2d::Size arg1;
        unsigned int arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_JumpTiles3D_create : Error processing arguments");
        auto result = cocos2d::JumpTiles3D::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_JumpTiles3D_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_JumpTiles3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_JumpTiles3D_constructor, __jsb_cocos2dx_JumpTiles3D_class, js_cocos2dx_JumpTiles3D_finalize)
{
    cocos2d::JumpTiles3D* cobj = new (std::nothrow) cocos2d::JumpTiles3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_JumpTiles3D_ctor, __jsb_cocos2dx_JumpTiles3D_class, js_cocos2dx_JumpTiles3D_finalize)
{
    cocos2d::JumpTiles3D* cobj = new (std::nothrow) cocos2d::JumpTiles3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_JumpTiles3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::JumpTiles3D)", nativeThisObject);
    cocos2d::JumpTiles3D* cobj = (cocos2d::JumpTiles3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_JumpTiles3D(se::Object* obj)
{
    auto cls = se::Class::create("JumpTiles3D", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_JumpTiles3D_constructor);

    cls->defineFunction("setAmplitudeRate", js_cocos2dx_JumpTiles3D_setAmplitudeRate);
    cls->defineFunction("initWithDuration", js_cocos2dx_JumpTiles3D_initWithDuration);
    cls->defineFunction("getAmplitude", js_cocos2dx_JumpTiles3D_getAmplitude);
    cls->defineFunction("getAmplitudeRate", js_cocos2dx_JumpTiles3D_getAmplitudeRate);
    cls->defineFunction("setAmplitude", js_cocos2dx_JumpTiles3D_setAmplitude);
    cls->defineFunction("ctor", js_cocos2dx_JumpTiles3D_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_JumpTiles3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_JumpTiles3D_finalize);
    cls->install();

    __jsb_cocos2dx_JumpTiles3D_proto = cls->getProto();
    __jsb_cocos2dx_JumpTiles3D_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.JumpTiles3D.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SplitRows_proto = nullptr;
se::Class* __jsb_cocos2dx_SplitRows_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SplitRows_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SplitRows* cobj = (cocos2d::SplitRows*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SplitRows_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        unsigned int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SplitRows_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SplitRows_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        unsigned int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SplitRows_create : Error processing arguments");
        auto result = cocos2d::SplitRows::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SplitRows_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SplitRows_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SplitRows_constructor, __jsb_cocos2dx_SplitRows_class, js_cocos2dx_SplitRows_finalize)
{
    cocos2d::SplitRows* cobj = new (std::nothrow) cocos2d::SplitRows();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SplitRows_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SplitRows)", nativeThisObject);
    cocos2d::SplitRows* cobj = (cocos2d::SplitRows*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_SplitRows(se::Object* obj)
{
    auto cls = se::Class::create("SplitRows", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_SplitRows_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_SplitRows_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_SplitRows_create);
    cls->defineFinalizedFunction(js_cocos2dx_SplitRows_finalize);
    cls->install();

    __jsb_cocos2dx_SplitRows_proto = cls->getProto();
    __jsb_cocos2dx_SplitRows_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_SplitCols_proto = nullptr;
se::Class* __jsb_cocos2dx_SplitCols_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SplitCols_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SplitCols* cobj = (cocos2d::SplitCols*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SplitCols_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        unsigned int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SplitCols_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SplitCols_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        unsigned int arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SplitCols_create : Error processing arguments");
        auto result = cocos2d::SplitCols::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SplitCols_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SplitCols_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SplitCols_constructor, __jsb_cocos2dx_SplitCols_class, js_cocos2dx_SplitCols_finalize)
{
    cocos2d::SplitCols* cobj = new (std::nothrow) cocos2d::SplitCols();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SplitCols_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SplitCols)", nativeThisObject);
    cocos2d::SplitCols* cobj = (cocos2d::SplitCols*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_SplitCols(se::Object* obj)
{
    auto cls = se::Class::create("SplitCols", obj, __jsb_cocos2dx_TiledGrid3DAction_proto, js_cocos2dx_SplitCols_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_SplitCols_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_SplitCols_create);
    cls->defineFinalizedFunction(js_cocos2dx_SplitCols_finalize);
    cls->install();

    __jsb_cocos2dx_SplitCols_proto = cls->getProto();
    __jsb_cocos2dx_SplitCols_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ActionTween_proto = nullptr;
se::Class* __jsb_cocos2dx_ActionTween_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ActionTween_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ActionTween* cobj = (cocos2d::ActionTween*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ActionTween_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        std::string arg1;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionTween_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ActionTween_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        std::string arg1;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ActionTween_create : Error processing arguments");
        auto result = cocos2d::ActionTween::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ActionTween_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_ActionTween(se::Object* obj)
{
    auto cls = se::Class::create("ActionTween", obj, __jsb_cocos2dx_ActionInterval_proto, nullptr);

    cls->defineFunction("initWithDuration", js_cocos2dx_ActionTween_initWithDuration);
    cls->defineStaticFunction("create", js_cocos2dx_ActionTween_create);
    cls->install();

    __jsb_cocos2dx_ActionTween_proto = cls->getProto();
    __jsb_cocos2dx_ActionTween_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ActionTween.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_AtlasNode_proto = nullptr;
se::Class* __jsb_cocos2dx_AtlasNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_updateAtlasValues, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_updateAtlasValues : Invalid Native Object");
    if (argc == 0) {
        cobj->updateAtlasValues();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_initWithTileFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_initWithTileFile : Invalid Native Object");
    if (argc == 4) {
        std::string arg0;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_initWithTileFile : Error processing arguments");
        bool result = cobj->initWithTileFile(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_setTextureAtlas, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_setTextureAtlas : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextureAtlas* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_setTextureAtlas : Error processing arguments");
        cobj->setTextureAtlas(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_getQuadsToDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_getQuadsToDraw : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getQuadsToDraw();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_initWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_initWithTexture : Invalid Native Object");
    if (argc == 4) {
        cocos2d::Texture2D* arg0 = nullptr;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_initWithTexture : Error processing arguments");
        bool result = cobj->initWithTexture(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_setQuadsToDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AtlasNode_setQuadsToDraw : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= seval_to_ssize(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_setQuadsToDraw : Error processing arguments");
        cobj->setQuadsToDraw(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AtlasNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        std::string arg0;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AtlasNode_create : Error processing arguments");
        auto result = cocos2d::AtlasNode::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_AtlasNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_AtlasNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_AtlasNode_constructor, __jsb_cocos2dx_AtlasNode_class, js_cocos2dx_AtlasNode_finalize)
{
    cocos2d::AtlasNode* cobj = new (std::nothrow) cocos2d::AtlasNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_AtlasNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::AtlasNode)", nativeThisObject);
    cocos2d::AtlasNode* cobj = (cocos2d::AtlasNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_AtlasNode(se::Object* obj)
{
    auto cls = se::Class::create("AtlasNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_AtlasNode_constructor);

    cls->defineFunction("updateAtlasValues", js_cocos2dx_AtlasNode_updateAtlasValues);
    cls->defineFunction("initWithTileFile", js_cocos2dx_AtlasNode_initWithTileFile);
    cls->defineFunction("getTexture", js_cocos2dx_AtlasNode_getTexture);
    cls->defineFunction("setTextureAtlas", js_cocos2dx_AtlasNode_setTextureAtlas);
    cls->defineFunction("setBlendFunc", js_cocos2dx_AtlasNode_setBlendFunc);
    cls->defineFunction("getBlendFunc", js_cocos2dx_AtlasNode_getBlendFunc);
    cls->defineFunction("getQuadsToDraw", js_cocos2dx_AtlasNode_getQuadsToDraw);
    cls->defineFunction("setTexture", js_cocos2dx_AtlasNode_setTexture);
    cls->defineFunction("initWithTexture", js_cocos2dx_AtlasNode_initWithTexture);
    cls->defineFunction("setQuadsToDraw", js_cocos2dx_AtlasNode_setQuadsToDraw);
    cls->defineStaticFunction("create", js_cocos2dx_AtlasNode_create);
    cls->defineFinalizedFunction(js_cocos2dx_AtlasNode_finalize);
    cls->install();

    __jsb_cocos2dx_AtlasNode_proto = cls->getProto();
    __jsb_cocos2dx_AtlasNode_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ClippingNode_proto = nullptr;
se::Class* __jsb_cocos2dx_ClippingNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_hasContent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_hasContent : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->hasContent();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_setInverted, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_setInverted : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ClippingNode_setInverted : Error processing arguments");
        cobj->setInverted(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_setStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_setStencil : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ClippingNode_setStencil : Error processing arguments");
        cobj->setStencil(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_getAlphaThreshold, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_getAlphaThreshold : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAlphaThreshold();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_getStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_getStencil : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getStencil();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_setAlphaThreshold, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_setAlphaThreshold : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ClippingNode_setAlphaThreshold : Error processing arguments");
        cobj->setAlphaThreshold(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_isInverted, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ClippingNode_isInverted : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isInverted();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ClippingNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::ClippingNode* result = cocos2d::ClippingNode::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ClippingNode>((cocos2d::ClippingNode*)result, __jsb_cocos2dx_ClippingNode_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::ClippingNode* result = cocos2d::ClippingNode::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ClippingNode>((cocos2d::ClippingNode*)result, __jsb_cocos2dx_ClippingNode_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ClippingNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ClippingNode_constructor, __jsb_cocos2dx_ClippingNode_class, js_cocos2dx_ClippingNode_finalize)
{
    cocos2d::ClippingNode* cobj = new (std::nothrow) cocos2d::ClippingNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ClippingNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ClippingNode)", nativeThisObject);
    cocos2d::ClippingNode* cobj = (cocos2d::ClippingNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ClippingNode(se::Object* obj)
{
    auto cls = se::Class::create("ClippingNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ClippingNode_constructor);

    cls->defineFunction("hasContent", js_cocos2dx_ClippingNode_hasContent);
    cls->defineFunction("setInverted", js_cocos2dx_ClippingNode_setInverted);
    cls->defineFunction("setStencil", js_cocos2dx_ClippingNode_setStencil);
    cls->defineFunction("getAlphaThreshold", js_cocos2dx_ClippingNode_getAlphaThreshold);
    cls->defineFunction("getStencil", js_cocos2dx_ClippingNode_getStencil);
    cls->defineFunction("setAlphaThreshold", js_cocos2dx_ClippingNode_setAlphaThreshold);
    cls->defineFunction("isInverted", js_cocos2dx_ClippingNode_isInverted);
    cls->defineStaticFunction("create", js_cocos2dx_ClippingNode_create);
    cls->defineFinalizedFunction(js_cocos2dx_ClippingNode_finalize);
    cls->install();

    __jsb_cocos2dx_ClippingNode_proto = cls->getProto();
    __jsb_cocos2dx_ClippingNode_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_DrawNode_proto = nullptr;
se::Class* __jsb_cocos2dx_DrawNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawLine, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawLine : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Color4F arg2;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawLine : Error processing arguments");
        cobj->drawLine(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawPoints, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_DrawNode_drawPoints : Invalid Native Object");

    do {
        if (argc == 4) {
            const cocos2d::Vec2* arg0 = nullptr;
            std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[0], &tempData);arg0=tempData.data();
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= seval_to_uint32(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg3;
            ok &= seval_to_Color4F(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cobj->drawPoints(arg0, arg1, arg2, arg3);
        }
    } while(0);

    do {
        if (argc == 3) {
            const cocos2d::Vec2* arg0 = nullptr;
            std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[0], &tempData);arg0=tempData.data();
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= seval_to_uint32(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg2;
            ok &= seval_to_Color4F(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->drawPoints(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_DrawNode_drawRect : Invalid Native Object");

    do {
        if (argc == 5) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg2;
            ok &= seval_to_Vec2(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg3;
            ok &= seval_to_Vec2(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg4;
            ok &= seval_to_Color4F(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cobj->drawRect(arg0, arg1, arg2, arg3, arg4);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg2;
            ok &= seval_to_Color4F(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->drawRect(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawSolidCircle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_DrawNode_drawSolidCircle : Invalid Native Object");

    do {
        if (argc == 5) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg4;
            ok &= seval_to_Color4F(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4);
        }
    } while(0);

    do {
        if (argc == 7) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            float arg5 = 0;
            ok &= seval_to_float(args[5], &arg5);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg6;
            ok &= seval_to_Color4F(args[6], &arg6);
            if (!ok) { ok = true; break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_setLineWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_setLineWidth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_setLineWidth : Error processing arguments");
        cobj->setLineWidth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_onDrawGLPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_onDrawGLPoint : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Mat4 arg0;
        unsigned int arg1 = 0;
        ok &= seval_to_Mat4(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_onDrawGLPoint : Error processing arguments");
        cobj->onDrawGLPoint(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawPolygon, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawPolygon : Invalid Native Object");
    if (argc == 5) {
        const cocos2d::Vec2* arg0 = nullptr;
        int arg1 = 0;
        cocos2d::Color4F arg2;
        float arg3 = 0;
        cocos2d::Color4F arg4;
        std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[0], &tempData);arg0=tempData.data();
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_Color4F(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawPolygon : Error processing arguments");
        cobj->drawPolygon(arg0, arg1, arg2, arg3, arg4);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawDot, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawDot : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vec2 arg0;
        float arg1 = 0;
        cocos2d::Color4F arg2;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawDot : Error processing arguments");
        cobj->drawDot(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawCatmullRom, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawCatmullRom : Invalid Native Object");
    if (argc == 3) {
        cocos2d::PointArray* arg0 = nullptr;
        unsigned int arg1 = 0;
        cocos2d::Color4F arg2;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawCatmullRom : Error processing arguments");
        cobj->drawCatmullRom(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawSegment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawSegment : Invalid Native Object");
    if (argc == 4) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        cocos2d::Color4F arg3;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Color4F(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawSegment : Error processing arguments");
        cobj->drawSegment(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_onDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_onDraw : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Mat4 arg0;
        unsigned int arg1 = 0;
        ok &= seval_to_Mat4(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_onDraw : Error processing arguments");
        cobj->onDraw(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawCircle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_DrawNode_drawCircle : Invalid Native Object");

    do {
        if (argc == 6) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool arg4;
            ok &= seval_to_boolean(args[4], &arg4);
            cocos2d::Color4F arg5;
            ok &= seval_to_Color4F(args[5], &arg5);
            if (!ok) { ok = true; break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5);
        }
    } while(0);

    do {
        if (argc == 8) {
            cocos2d::Vec2 arg0;
            ok &= seval_to_Vec2(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool arg4;
            ok &= seval_to_boolean(args[4], &arg4);
            float arg5 = 0;
            ok &= seval_to_float(args[5], &arg5);
            if (!ok) { ok = true; break; }
            float arg6 = 0;
            ok &= seval_to_float(args[6], &arg6);
            if (!ok) { ok = true; break; }
            cocos2d::Color4F arg7;
            ok &= seval_to_Color4F(args[7], &arg7);
            if (!ok) { ok = true; break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawQuadBezier, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawQuadBezier : Invalid Native Object");
    if (argc == 5) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        unsigned int arg3 = 0;
        cocos2d::Color4F arg4;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_uint32(args[3], &arg3);
        ok &= seval_to_Color4F(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawQuadBezier : Error processing arguments");
        cobj->drawQuadBezier(arg0, arg1, arg2, arg3, arg4);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_onDrawGLLine, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_onDrawGLLine : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Mat4 arg0;
        unsigned int arg1 = 0;
        ok &= seval_to_Mat4(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_onDrawGLLine : Error processing arguments");
        cobj->onDrawGLLine(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawSolidPoly, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawSolidPoly : Invalid Native Object");
    if (argc == 3) {
        const cocos2d::Vec2* arg0 = nullptr;
        unsigned int arg1 = 0;
        cocos2d::Color4F arg2;
        std::vector<cocos2d::Vec2> tempData;ok &= seval_to_std_vector_Vec2(args[0], &tempData);arg0=tempData.data();
        ok &= seval_to_uint32(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawSolidPoly : Error processing arguments");
        cobj->drawSolidPoly(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawTriangle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawTriangle : Invalid Native Object");
    if (argc == 4) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color4F arg3;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_Color4F(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawTriangle : Error processing arguments");
        cobj->drawTriangle(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_clear, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawCardinalSpline, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawCardinalSpline : Invalid Native Object");
    if (argc == 4) {
        cocos2d::PointArray* arg0 = nullptr;
        float arg1 = 0;
        unsigned int arg2 = 0;
        cocos2d::Color4F arg3;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_uint32(args[2], &arg2);
        ok &= seval_to_Color4F(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawCardinalSpline : Error processing arguments");
        cobj->drawCardinalSpline(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawSolidRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawSolidRect : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Color4F arg2;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawSolidRect : Error processing arguments");
        cobj->drawSolidRect(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_getLineWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_getLineWidth : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLineWidth();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawPoint : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vec2 arg0;
        float arg1 = 0;
        cocos2d::Color4F arg2;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_Color4F(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawPoint : Error processing arguments");
        cobj->drawPoint(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_drawCubicBezier, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DrawNode_drawCubicBezier : Invalid Native Object");
    if (argc == 6) {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        unsigned int arg4 = 0;
        cocos2d::Color4F arg5;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_Vec2(args[3], &arg3);
        ok &= seval_to_uint32(args[4], &arg4);
        ok &= seval_to_Color4F(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_drawCubicBezier : Error processing arguments");
        cobj->drawCubicBezier(arg0, arg1, arg2, arg3, arg4, arg5);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DrawNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::DrawNode::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_DrawNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DrawNode_create : Error processing arguments");
        auto result = cocos2d::DrawNode::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_DrawNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_DrawNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_DrawNode_constructor, __jsb_cocos2dx_DrawNode_class, js_cocos2dx_DrawNode_finalize)
{
    cocos2d::DrawNode* cobj = new (std::nothrow) cocos2d::DrawNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_DrawNode_ctor, __jsb_cocos2dx_DrawNode_class, js_cocos2dx_DrawNode_finalize)
{
    cocos2d::DrawNode* cobj = new (std::nothrow) cocos2d::DrawNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_DrawNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::DrawNode)", nativeThisObject);
    cocos2d::DrawNode* cobj = (cocos2d::DrawNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_DrawNode(se::Object* obj)
{
    auto cls = se::Class::create("DrawNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_DrawNode_constructor);

    cls->defineFunction("drawLine", js_cocos2dx_DrawNode_drawLine);
    cls->defineFunction("drawPoints", js_cocos2dx_DrawNode_drawPoints);
    cls->defineFunction("drawRect", js_cocos2dx_DrawNode_drawRect);
    cls->defineFunction("drawSolidCircle", js_cocos2dx_DrawNode_drawSolidCircle);
    cls->defineFunction("setLineWidth", js_cocos2dx_DrawNode_setLineWidth);
    cls->defineFunction("onDrawGLPoint", js_cocos2dx_DrawNode_onDrawGLPoint);
    cls->defineFunction("drawPolygon", js_cocos2dx_DrawNode_drawPolygon);
    cls->defineFunction("drawDot", js_cocos2dx_DrawNode_drawDot);
    cls->defineFunction("drawCatmullRom", js_cocos2dx_DrawNode_drawCatmullRom);
    cls->defineFunction("drawSegment", js_cocos2dx_DrawNode_drawSegment);
    cls->defineFunction("getBlendFunc", js_cocos2dx_DrawNode_getBlendFunc);
    cls->defineFunction("onDraw", js_cocos2dx_DrawNode_onDraw);
    cls->defineFunction("drawCircle", js_cocos2dx_DrawNode_drawCircle);
    cls->defineFunction("drawQuadBezier", js_cocos2dx_DrawNode_drawQuadBezier);
    cls->defineFunction("onDrawGLLine", js_cocos2dx_DrawNode_onDrawGLLine);
    cls->defineFunction("drawSolidPoly", js_cocos2dx_DrawNode_drawSolidPoly);
    cls->defineFunction("drawTriangle", js_cocos2dx_DrawNode_drawTriangle);
    cls->defineFunction("setBlendFunc", js_cocos2dx_DrawNode_setBlendFunc);
    cls->defineFunction("clear", js_cocos2dx_DrawNode_clear);
    cls->defineFunction("drawCardinalSpline", js_cocos2dx_DrawNode_drawCardinalSpline);
    cls->defineFunction("drawSolidRect", js_cocos2dx_DrawNode_drawSolidRect);
    cls->defineFunction("getLineWidth", js_cocos2dx_DrawNode_getLineWidth);
    cls->defineFunction("drawPoint", js_cocos2dx_DrawNode_drawPoint);
    cls->defineFunction("drawCubicBezier", js_cocos2dx_DrawNode_drawCubicBezier);
    cls->defineFunction("ctor", js_cocos2dx_DrawNode_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_DrawNode_create);
    cls->defineFinalizedFunction(js_cocos2dx_DrawNode_finalize);
    cls->install();

    __jsb_cocos2dx_DrawNode_proto = cls->getProto();
    __jsb_cocos2dx_DrawNode_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.DrawNode.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Label_proto = nullptr;
se::Class* __jsb_cocos2dx_Label_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Label_isClipMarginEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_isClipMarginEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isClipMarginEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableShadow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableShadow : Invalid Native Object");
    if (argc == 0) {
        cobj->enableShadow();
    }
    if (argc == 1) {
        cocos2d::Color4B arg0;
        ok &= seval_to_Color4B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableShadow : Error processing arguments");
        cobj->enableShadow(arg0);
    }
    if (argc == 2) {
        cocos2d::Color4B arg0;
        cocos2d::Size arg1;
        ok &= seval_to_Color4B(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableShadow : Error processing arguments");
        cobj->enableShadow(arg0, arg1);
    }
    if (argc == 3) {
        cocos2d::Color4B arg0;
        cocos2d::Size arg1;
        int arg2 = 0;
        ok &= seval_to_Color4B(args[0], &arg0);
        ok &= seval_to_Size(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableShadow : Error processing arguments");
        cobj->enableShadow(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setDimensions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setDimensions : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setDimensions : Error processing arguments");
        cobj->setDimensions(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getWidth : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getWidth();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getString : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getHeight : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getHeight();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_disableEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Label_disableEffect : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::LabelEffect arg0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cobj->disableEffect(arg0);
        }
    } while(0);

    do {
        if (argc == 0) {
            cobj->disableEffect();
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getTextColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getTextColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4B& result = cobj->getTextColor();
        se::Value jsret;
        ok &= Color4B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableWrap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableWrap : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableWrap : Error processing arguments");
        cobj->enableWrap(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setWidth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setWidth : Error processing arguments");
        cobj->setWidth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getAdditionalKerning, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getAdditionalKerning : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAdditionalKerning();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getBMFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getBMFontSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getBMFontSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getMaxLineWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getMaxLineWidth : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getMaxLineWidth();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getHorizontalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getHorizontalAlignment : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getHorizontalAlignment();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getShadowOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getShadowOffset : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Size result = cobj->getShadowOffset();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getLineSpacing, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getLineSpacing : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLineSpacing();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setClipMarginEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setClipMarginEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setClipMarginEnabled : Error processing arguments");
        cobj->setClipMarginEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setString : Error processing arguments");
        cobj->setString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setSystemFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setSystemFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setSystemFontName : Error processing arguments");
        cobj->setSystemFontName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_isWrapEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_isWrapEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isWrapEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getOutlineSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getOutlineSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getOutlineSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setBMFontFilePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setBMFontFilePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setBMFontFilePath : Error processing arguments");
        bool result = cobj->setBMFontFilePath(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        std::string arg0;
        cocos2d::Vec2 arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setBMFontFilePath : Error processing arguments");
        bool result = cobj->setBMFontFilePath(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 3) {
        std::string arg0;
        cocos2d::Vec2 arg1;
        float arg2 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setBMFontFilePath : Error processing arguments");
        bool result = cobj->setBMFontFilePath(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_initWithTTF, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Label_initWithTTF : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::_ttfConfig arg0;
            #pragma warning NO CONVERSION TO NATIVE FOR _ttfConfig
			ok = false;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::_ttfConfig arg0;
            #pragma warning NO CONVERSION TO NATIVE FOR _ttfConfig
			ok = false;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            cocos2d::_ttfConfig arg0;
            #pragma warning NO CONVERSION TO NATIVE FOR _ttfConfig
			ok = false;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 6) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg5;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTTF(arg0, arg1, arg2, arg3, arg4, arg5);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setLineHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setLineHeight : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setLineHeight : Error processing arguments");
        cobj->setLineHeight(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setSystemFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setSystemFontSize : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setSystemFontSize : Error processing arguments");
        cobj->setSystemFontSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setOverflow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setOverflow : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Label::Overflow arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setOverflow : Error processing arguments");
        cobj->setOverflow(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableStrikethrough, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableStrikethrough : Invalid Native Object");
    if (argc == 0) {
        cobj->enableStrikethrough();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_updateContent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_updateContent : Invalid Native Object");
    if (argc == 0) {
        cobj->updateContent();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getStringLength, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getStringLength : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getStringLength();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setLineBreakWithoutSpace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setLineBreakWithoutSpace : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setLineBreakWithoutSpace : Error processing arguments");
        cobj->setLineBreakWithoutSpace(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getStringNumLines, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getStringNumLines : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getStringNumLines();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableOutline, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableOutline : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4B arg0;
        ok &= seval_to_Color4B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableOutline : Error processing arguments");
        cobj->enableOutline(arg0);
    }
    if (argc == 2) {
        cocos2d::Color4B arg0;
        int arg1 = 0;
        ok &= seval_to_Color4B(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableOutline : Error processing arguments");
        cobj->enableOutline(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getShadowBlurRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getShadowBlurRadius : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getShadowBlurRadius();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getEffectColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getEffectColor : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Color4F result = cobj->getEffectColor();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_removeAllChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_removeAllChildrenWithCleanup : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_removeAllChildrenWithCleanup : Error processing arguments");
        cobj->removeAllChildrenWithCleanup(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setCharMap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Label_setCharMap : Invalid Native Object");

    do {
        if (argc == 4) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->setCharMap(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->setCharMap(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->setCharMap(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getDimensions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getDimensions : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getDimensions();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setMaxLineWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setMaxLineWidth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setMaxLineWidth : Error processing arguments");
        cobj->setMaxLineWidth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getSystemFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getSystemFontName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getSystemFontName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setVerticalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setVerticalAlignment : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextVAlignment arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setVerticalAlignment : Error processing arguments");
        cobj->setVerticalAlignment(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setLineSpacing, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setLineSpacing : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setLineSpacing : Error processing arguments");
        cobj->setLineSpacing(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getLineHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getLineHeight : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLineHeight();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getShadowColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getShadowColor : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Color4F result = cobj->getShadowColor();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getTTFConfig, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getTTFConfig : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::_ttfConfig& result = cobj->getTTFConfig();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ttfConfig;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableItalics, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableItalics : Invalid Native Object");
    if (argc == 0) {
        cobj->enableItalics();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setTextColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setTextColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4B arg0;
        ok &= seval_to_Color4B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setTextColor : Error processing arguments");
        cobj->setTextColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getLetter, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getLetter : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_getLetter : Error processing arguments");
        cocos2d::Sprite* result = cobj->getLetter(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Sprite>((cocos2d::Sprite*)result, __jsb_cocos2dx_Sprite_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setHeight : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setHeight : Error processing arguments");
        cobj->setHeight(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_isShadowEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_isShadowEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isShadowEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableGlow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableGlow : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4B arg0;
        ok &= seval_to_Color4B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_enableGlow : Error processing arguments");
        cobj->enableGlow(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getOverflow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getOverflow : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getOverflow();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getVerticalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getVerticalAlignment : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getVerticalAlignment();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setAdditionalKerning, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setAdditionalKerning : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setAdditionalKerning : Error processing arguments");
        cobj->setAdditionalKerning(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getSystemFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getSystemFontSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSystemFontSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getTextAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getTextAlignment : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getTextAlignment();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getBMFontFilePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getBMFontFilePath : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getBMFontFilePath();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setHorizontalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setHorizontalAlignment : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextHAlignment arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setHorizontalAlignment : Error processing arguments");
        cobj->setHorizontalAlignment(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableBold, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableBold : Invalid Native Object");
    if (argc == 0) {
        cobj->enableBold();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_enableUnderline, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_enableUnderline : Invalid Native Object");
    if (argc == 0) {
        cobj->enableUnderline();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_getLabelEffectType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_getLabelEffectType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getLabelEffectType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Label_setAlignment : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::TextHAlignment arg0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg1;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->setAlignment(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::TextHAlignment arg0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cobj->setAlignment(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_requestSystemFontRefresh, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_requestSystemFontRefresh : Invalid Native Object");
    if (argc == 0) {
        cobj->requestSystemFontRefresh();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_setBMFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Label_setBMFontSize : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_setBMFontSize : Error processing arguments");
        cobj->setBMFontSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_createWithBMFont, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithBMFont : Error processing arguments");
        auto result = cocos2d::Label::createWithBMFont(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithBMFont : Error processing arguments");
        auto result = cocos2d::Label::createWithBMFont(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        int arg3 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithBMFont : Error processing arguments");
        auto result = cocos2d::Label::createWithBMFont(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 5) {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        int arg3 = 0;
        cocos2d::Vec2 arg4;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_Vec2(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithBMFont : Error processing arguments");
        auto result = cocos2d::Label::createWithBMFont(arg0, arg1, arg2, arg3, arg4);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Label::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_createWithCharMap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 4) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Label* result = cocos2d::Label::createWithCharMap(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Label>((cocos2d::Label*)result, __jsb_cocos2dx_Label_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Label* result = cocos2d::Label::createWithCharMap(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Label>((cocos2d::Label*)result, __jsb_cocos2dx_Label_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Label* result = cocos2d::Label::createWithCharMap(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Label>((cocos2d::Label*)result, __jsb_cocos2dx_Label_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Label_createWithSystemFont, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithSystemFont : Error processing arguments");
        auto result = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithSystemFont : Error processing arguments");
        auto result = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 5) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithSystemFont : Error processing arguments");
        auto result = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3, arg4);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 6) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        cocos2d::TextVAlignment arg5;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        ok &= seval_to_int32(args[5], (int32_t *)&arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Label_createWithSystemFont : Error processing arguments");
        auto result = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3, arg4, arg5);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Label_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Label_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Label_constructor, __jsb_cocos2dx_Label_class, js_cocos2dx_Label_finalize)
{
    cocos2d::Label* cobj = new (std::nothrow) cocos2d::Label();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Label_ctor, __jsb_cocos2dx_Label_class, js_cocos2dx_Label_finalize)
{
    cocos2d::Label* cobj = new (std::nothrow) cocos2d::Label();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Label_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Label)", nativeThisObject);
    cocos2d::Label* cobj = (cocos2d::Label*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Label(se::Object* obj)
{
    auto cls = se::Class::create("Label", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_Label_constructor);

    cls->defineFunction("isClipMarginEnabled", js_cocos2dx_Label_isClipMarginEnabled);
    cls->defineFunction("enableShadow", js_cocos2dx_Label_enableShadow);
    cls->defineFunction("setDimensions", js_cocos2dx_Label_setDimensions);
    cls->defineFunction("getWidth", js_cocos2dx_Label_getWidth);
    cls->defineFunction("getString", js_cocos2dx_Label_getString);
    cls->defineFunction("getHeight", js_cocos2dx_Label_getHeight);
    cls->defineFunction("disableEffect", js_cocos2dx_Label_disableEffect);
    cls->defineFunction("getTextColor", js_cocos2dx_Label_getTextColor);
    cls->defineFunction("getBlendFunc", js_cocos2dx_Label_getBlendFunc);
    cls->defineFunction("enableWrap", js_cocos2dx_Label_enableWrap);
    cls->defineFunction("setWidth", js_cocos2dx_Label_setWidth);
    cls->defineFunction("getAdditionalKerning", js_cocos2dx_Label_getAdditionalKerning);
    cls->defineFunction("getBMFontSize", js_cocos2dx_Label_getBMFontSize);
    cls->defineFunction("getMaxLineWidth", js_cocos2dx_Label_getMaxLineWidth);
    cls->defineFunction("getHorizontalAlignment", js_cocos2dx_Label_getHorizontalAlignment);
    cls->defineFunction("getShadowOffset", js_cocos2dx_Label_getShadowOffset);
    cls->defineFunction("getLineSpacing", js_cocos2dx_Label_getLineSpacing);
    cls->defineFunction("setClipMarginEnabled", js_cocos2dx_Label_setClipMarginEnabled);
    cls->defineFunction("setString", js_cocos2dx_Label_setString);
    cls->defineFunction("setSystemFontName", js_cocos2dx_Label_setSystemFontName);
    cls->defineFunction("isWrapEnabled", js_cocos2dx_Label_isWrapEnabled);
    cls->defineFunction("getOutlineSize", js_cocos2dx_Label_getOutlineSize);
    cls->defineFunction("setBMFontFilePath", js_cocos2dx_Label_setBMFontFilePath);
    cls->defineFunction("initWithTTF", js_cocos2dx_Label_initWithTTF);
    cls->defineFunction("setLineHeight", js_cocos2dx_Label_setLineHeight);
    cls->defineFunction("setSystemFontSize", js_cocos2dx_Label_setSystemFontSize);
    cls->defineFunction("setOverflow", js_cocos2dx_Label_setOverflow);
    cls->defineFunction("enableStrikethrough", js_cocos2dx_Label_enableStrikethrough);
    cls->defineFunction("updateContent", js_cocos2dx_Label_updateContent);
    cls->defineFunction("getStringLength", js_cocos2dx_Label_getStringLength);
    cls->defineFunction("setLineBreakWithoutSpace", js_cocos2dx_Label_setLineBreakWithoutSpace);
    cls->defineFunction("getStringNumLines", js_cocos2dx_Label_getStringNumLines);
    cls->defineFunction("enableOutline", js_cocos2dx_Label_enableOutline);
    cls->defineFunction("getShadowBlurRadius", js_cocos2dx_Label_getShadowBlurRadius);
    cls->defineFunction("getEffectColor", js_cocos2dx_Label_getEffectColor);
    cls->defineFunction("removeAllChildrenWithCleanup", js_cocos2dx_Label_removeAllChildrenWithCleanup);
    cls->defineFunction("setCharMap", js_cocos2dx_Label_setCharMap);
    cls->defineFunction("getDimensions", js_cocos2dx_Label_getDimensions);
    cls->defineFunction("setMaxLineWidth", js_cocos2dx_Label_setMaxLineWidth);
    cls->defineFunction("getSystemFontName", js_cocos2dx_Label_getSystemFontName);
    cls->defineFunction("setVerticalAlignment", js_cocos2dx_Label_setVerticalAlignment);
    cls->defineFunction("setLineSpacing", js_cocos2dx_Label_setLineSpacing);
    cls->defineFunction("getLineHeight", js_cocos2dx_Label_getLineHeight);
    cls->defineFunction("getShadowColor", js_cocos2dx_Label_getShadowColor);
    cls->defineFunction("getTTFConfig", js_cocos2dx_Label_getTTFConfig);
    cls->defineFunction("enableItalics", js_cocos2dx_Label_enableItalics);
    cls->defineFunction("setTextColor", js_cocos2dx_Label_setTextColor);
    cls->defineFunction("getLetter", js_cocos2dx_Label_getLetter);
    cls->defineFunction("setHeight", js_cocos2dx_Label_setHeight);
    cls->defineFunction("isShadowEnabled", js_cocos2dx_Label_isShadowEnabled);
    cls->defineFunction("enableGlow", js_cocos2dx_Label_enableGlow);
    cls->defineFunction("getOverflow", js_cocos2dx_Label_getOverflow);
    cls->defineFunction("getVerticalAlignment", js_cocos2dx_Label_getVerticalAlignment);
    cls->defineFunction("setAdditionalKerning", js_cocos2dx_Label_setAdditionalKerning);
    cls->defineFunction("getSystemFontSize", js_cocos2dx_Label_getSystemFontSize);
    cls->defineFunction("setBlendFunc", js_cocos2dx_Label_setBlendFunc);
    cls->defineFunction("getTextAlignment", js_cocos2dx_Label_getTextAlignment);
    cls->defineFunction("getBMFontFilePath", js_cocos2dx_Label_getBMFontFilePath);
    cls->defineFunction("setHorizontalAlignment", js_cocos2dx_Label_setHorizontalAlignment);
    cls->defineFunction("enableBold", js_cocos2dx_Label_enableBold);
    cls->defineFunction("enableUnderline", js_cocos2dx_Label_enableUnderline);
    cls->defineFunction("getLabelEffectType", js_cocos2dx_Label_getLabelEffectType);
    cls->defineFunction("setAlignment", js_cocos2dx_Label_setAlignment);
    cls->defineFunction("requestSystemFontRefresh", js_cocos2dx_Label_requestSystemFontRefresh);
    cls->defineFunction("setBMFontSize", js_cocos2dx_Label_setBMFontSize);
    cls->defineFunction("ctor", js_cocos2dx_Label_ctor);
    cls->defineStaticFunction("createWithBMFont", js_cocos2dx_Label_createWithBMFont);
    cls->defineStaticFunction("create", js_cocos2dx_Label_create);
    cls->defineStaticFunction("createWithCharMap", js_cocos2dx_Label_createWithCharMap);
    cls->defineStaticFunction("createWithSystemFont", js_cocos2dx_Label_createWithSystemFont);
    cls->defineFinalizedFunction(js_cocos2dx_Label_finalize);
    cls->install();

    __jsb_cocos2dx_Label_proto = cls->getProto();
    __jsb_cocos2dx_Label_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Label.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_LabelAtlas_proto = nullptr;
se::Class* __jsb_cocos2dx_LabelAtlas_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LabelAtlas_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelAtlas* cobj = (cocos2d::LabelAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelAtlas_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelAtlas_setString : Error processing arguments");
        cobj->setString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelAtlas_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelAtlas* cobj = (cocos2d::LabelAtlas*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_LabelAtlas_initWithString : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            int arg4 = 0;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            int arg4 = 0;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelAtlas_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelAtlas* cobj = (cocos2d::LabelAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelAtlas_getString : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelAtlas_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            int arg3 = 0;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            int arg4 = 0;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::LabelAtlas* result = cocos2d::LabelAtlas::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelAtlas>((cocos2d::LabelAtlas*)result, __jsb_cocos2dx_LabelAtlas_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::LabelAtlas* result = cocos2d::LabelAtlas::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelAtlas>((cocos2d::LabelAtlas*)result, __jsb_cocos2dx_LabelAtlas_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::LabelAtlas* result = cocos2d::LabelAtlas::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelAtlas>((cocos2d::LabelAtlas*)result, __jsb_cocos2dx_LabelAtlas_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LabelAtlas_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LabelAtlas_constructor, __jsb_cocos2dx_LabelAtlas_class, js_cocos2dx_LabelAtlas_finalize)
{
    cocos2d::LabelAtlas* cobj = new (std::nothrow) cocos2d::LabelAtlas();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LabelAtlas_ctor, __jsb_cocos2dx_LabelAtlas_class, js_cocos2dx_LabelAtlas_finalize)
{
    cocos2d::LabelAtlas* cobj = new (std::nothrow) cocos2d::LabelAtlas();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LabelAtlas_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LabelAtlas)", nativeThisObject);
    cocos2d::LabelAtlas* cobj = (cocos2d::LabelAtlas*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LabelAtlas(se::Object* obj)
{
    auto cls = se::Class::create("LabelAtlas", obj, __jsb_cocos2dx_AtlasNode_proto, js_cocos2dx_LabelAtlas_constructor);

    cls->defineFunction("setString", js_cocos2dx_LabelAtlas_setString);
    cls->defineFunction("initWithString", js_cocos2dx_LabelAtlas_initWithString);
    cls->defineFunction("getString", js_cocos2dx_LabelAtlas_getString);
    cls->defineFunction("ctor", js_cocos2dx_LabelAtlas_ctor);
    cls->defineStaticFunction("_create", js_cocos2dx_LabelAtlas_create);
    cls->defineFinalizedFunction(js_cocos2dx_LabelAtlas_finalize);
    cls->install();

    __jsb_cocos2dx_LabelAtlas_proto = cls->getProto();
    __jsb_cocos2dx_LabelAtlas_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LabelAtlas.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_LabelBMFont_proto = nullptr;
se::Class* __jsb_cocos2dx_LabelBMFont_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setLineBreakWithoutSpace, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setLineBreakWithoutSpace : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setLineBreakWithoutSpace : Error processing arguments");
        cobj->setLineBreakWithoutSpace(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_getLetter, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_getLetter : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_getLetter : Error processing arguments");
        cocos2d::Sprite* result = cobj->getLetter(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Sprite>((cocos2d::Sprite*)result, __jsb_cocos2dx_Sprite_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_getString : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setString : Error processing arguments");
        cobj->setString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_initWithString : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::TextHAlignment arg3;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 5) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::TextHAlignment arg3;
        cocos2d::Vec2 arg4;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_Vec2(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_getFntFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_getFntFile : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getFntFile();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setFntFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setFntFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setFntFile : Error processing arguments");
        cobj->setFntFile(arg0);
    }
    if (argc == 2) {
        std::string arg0;
        cocos2d::Vec2 arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setFntFile : Error processing arguments");
        cobj->setFntFile(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setAlignment : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextHAlignment arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setAlignment : Error processing arguments");
        cobj->setAlignment(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_setWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelBMFont_setWidth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelBMFont_setWidth : Error processing arguments");
        cobj->setWidth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 0) {
            cocos2d::LabelBMFont* result = cocos2d::LabelBMFont::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelBMFont>((cocos2d::LabelBMFont*)result, __jsb_cocos2dx_LabelBMFont_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::LabelBMFont* result = cocos2d::LabelBMFont::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelBMFont>((cocos2d::LabelBMFont*)result, __jsb_cocos2dx_LabelBMFont_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::LabelBMFont* result = cocos2d::LabelBMFont::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelBMFont>((cocos2d::LabelBMFont*)result, __jsb_cocos2dx_LabelBMFont_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg3;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            cocos2d::LabelBMFont* result = cocos2d::LabelBMFont::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelBMFont>((cocos2d::LabelBMFont*)result, __jsb_cocos2dx_LabelBMFont_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg3;
            ok &= seval_to_int32(args[3], (int32_t *)&arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg4;
            ok &= seval_to_Vec2(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::LabelBMFont* result = cocos2d::LabelBMFont::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelBMFont>((cocos2d::LabelBMFont*)result, __jsb_cocos2dx_LabelBMFont_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LabelBMFont_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LabelBMFont_constructor, __jsb_cocos2dx_LabelBMFont_class, js_cocos2dx_LabelBMFont_finalize)
{
    cocos2d::LabelBMFont* cobj = new (std::nothrow) cocos2d::LabelBMFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LabelBMFont_ctor, __jsb_cocos2dx_LabelBMFont_class, js_cocos2dx_LabelBMFont_finalize)
{
    cocos2d::LabelBMFont* cobj = new (std::nothrow) cocos2d::LabelBMFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LabelBMFont_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LabelBMFont)", nativeThisObject);
    cocos2d::LabelBMFont* cobj = (cocos2d::LabelBMFont*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LabelBMFont(se::Object* obj)
{
    auto cls = se::Class::create("LabelBMFont", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_LabelBMFont_constructor);

    cls->defineFunction("setLineBreakWithoutSpace", js_cocos2dx_LabelBMFont_setLineBreakWithoutSpace);
    cls->defineFunction("getBlendFunc", js_cocos2dx_LabelBMFont_getBlendFunc);
    cls->defineFunction("getLetter", js_cocos2dx_LabelBMFont_getLetter);
    cls->defineFunction("getString", js_cocos2dx_LabelBMFont_getString);
    cls->defineFunction("setBlendFunc", js_cocos2dx_LabelBMFont_setBlendFunc);
    cls->defineFunction("setString", js_cocos2dx_LabelBMFont_setString);
    cls->defineFunction("initWithString", js_cocos2dx_LabelBMFont_initWithString);
    cls->defineFunction("getFntFile", js_cocos2dx_LabelBMFont_getFntFile);
    cls->defineFunction("setFntFile", js_cocos2dx_LabelBMFont_setFntFile);
    cls->defineFunction("setAlignment", js_cocos2dx_LabelBMFont_setAlignment);
    cls->defineFunction("setWidth", js_cocos2dx_LabelBMFont_setWidth);
    cls->defineFunction("ctor", js_cocos2dx_LabelBMFont_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_LabelBMFont_create);
    cls->defineFinalizedFunction(js_cocos2dx_LabelBMFont_finalize);
    cls->install();

    __jsb_cocos2dx_LabelBMFont_proto = cls->getProto();
    __jsb_cocos2dx_LabelBMFont_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LabelBMFont.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_LabelTTF_proto = nullptr;
se::Class* __jsb_cocos2dx_LabelTTF_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_enableShadow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_enableShadow : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Size arg0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_Size(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_enableShadow : Error processing arguments");
        cobj->enableShadow(arg0, arg1, arg2);
    }
    if (argc == 4) {
        cocos2d::Size arg0;
        float arg1 = 0;
        float arg2 = 0;
        bool arg3;
        ok &= seval_to_Size(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_boolean(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_enableShadow : Error processing arguments");
        cobj->enableShadow(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setDimensions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setDimensions : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setDimensions : Error processing arguments");
        cobj->setDimensions(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getFontSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getFontSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getString : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setFlippedY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setFlippedY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFlippedY : Error processing arguments");
        cobj->setFlippedY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setFlippedX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setFlippedX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFlippedX : Error processing arguments");
        cobj->setFlippedX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setTextDefinition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setTextDefinition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::FontDefinition arg0;
        ok &= seval_to_FontDefinition(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setTextDefinition : Error processing arguments");
        cobj->setTextDefinition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFontName : Error processing arguments");
        cobj->setFontName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getHorizontalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getHorizontalAlignment : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getHorizontalAlignment();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_initWithStringAndTextDefinition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_initWithStringAndTextDefinition : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        cocos2d::FontDefinition arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_FontDefinition(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_initWithStringAndTextDefinition : Error processing arguments");
        bool result = cobj->initWithStringAndTextDefinition(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setString : Error processing arguments");
        cobj->setString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_initWithString : Invalid Native Object");
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 5) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 6) {
        std::string arg0;
        std::string arg1;
        float arg2 = 0;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        cocos2d::TextVAlignment arg5;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_Size(args[3], &arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        ok &= seval_to_int32(args[5], (int32_t *)&arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setFontFillColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setFontFillColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFontFillColor : Error processing arguments");
        cobj->setFontFillColor(arg0);
    }
    if (argc == 2) {
        cocos2d::Color3B arg0;
        bool arg1;
        ok &= seval_to_Color3B(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFontFillColor : Error processing arguments");
        cobj->setFontFillColor(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_enableStroke, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_enableStroke : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Color3B arg0;
        float arg1 = 0;
        ok &= seval_to_Color3B(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_enableStroke : Error processing arguments");
        cobj->enableStroke(arg0, arg1);
    }
    if (argc == 3) {
        cocos2d::Color3B arg0;
        float arg1 = 0;
        bool arg2;
        ok &= seval_to_Color3B(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_boolean(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_enableStroke : Error processing arguments");
        cobj->enableStroke(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getDimensions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getDimensions : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getDimensions();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setVerticalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setVerticalAlignment : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextVAlignment arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setVerticalAlignment : Error processing arguments");
        cobj->setVerticalAlignment(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setFontSize : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getVerticalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getVerticalAlignment : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getVerticalAlignment();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getTextDefinition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getTextDefinition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::FontDefinition& result = cobj->getTextDefinition();
        se::Value jsret;
        ok &= FontDefinition_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_getFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_getFontName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getFontName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_setHorizontalAlignment, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_setHorizontalAlignment : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextHAlignment arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_setHorizontalAlignment : Error processing arguments");
        cobj->setHorizontalAlignment(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_disableShadow, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_disableShadow : Invalid Native Object");
    if (argc == 0) {
        cobj->disableShadow();
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_disableShadow : Error processing arguments");
        cobj->disableShadow(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_disableStroke, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LabelTTF_disableStroke : Invalid Native Object");
    if (argc == 0) {
        cobj->disableStroke();
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_disableStroke : Error processing arguments");
        cobj->disableStroke(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 0) {
            cocos2d::LabelTTF* result = cocos2d::LabelTTF::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelTTF>((cocos2d::LabelTTF*)result, __jsb_cocos2dx_LabelTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::LabelTTF* result = cocos2d::LabelTTF::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelTTF>((cocos2d::LabelTTF*)result, __jsb_cocos2dx_LabelTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::LabelTTF* result = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelTTF>((cocos2d::LabelTTF*)result, __jsb_cocos2dx_LabelTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::LabelTTF* result = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelTTF>((cocos2d::LabelTTF*)result, __jsb_cocos2dx_LabelTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    do {
        if (argc == 6) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg3;
            ok &= seval_to_Size(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg4;
            ok &= seval_to_int32(args[4], (int32_t *)&arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextVAlignment arg5;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            cocos2d::LabelTTF* result = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4, arg5);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LabelTTF>((cocos2d::LabelTTF*)result, __jsb_cocos2dx_LabelTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LabelTTF_createWithFontDefinition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        cocos2d::FontDefinition arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_FontDefinition(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LabelTTF_createWithFontDefinition : Error processing arguments");
        auto result = cocos2d::LabelTTF::createWithFontDefinition(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_LabelTTF_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LabelTTF_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LabelTTF_constructor, __jsb_cocos2dx_LabelTTF_class, js_cocos2dx_LabelTTF_finalize)
{
    cocos2d::LabelTTF* cobj = new (std::nothrow) cocos2d::LabelTTF();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LabelTTF_ctor, __jsb_cocos2dx_LabelTTF_class, js_cocos2dx_LabelTTF_finalize)
{
    cocos2d::LabelTTF* cobj = new (std::nothrow) cocos2d::LabelTTF();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LabelTTF_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LabelTTF)", nativeThisObject);
    cocos2d::LabelTTF* cobj = (cocos2d::LabelTTF*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LabelTTF(se::Object* obj)
{
    auto cls = se::Class::create("LabelTTF", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_LabelTTF_constructor);

    cls->defineFunction("enableShadow", js_cocos2dx_LabelTTF_enableShadow);
    cls->defineFunction("setDimensions", js_cocos2dx_LabelTTF_setDimensions);
    cls->defineFunction("getFontSize", js_cocos2dx_LabelTTF_getFontSize);
    cls->defineFunction("getString", js_cocos2dx_LabelTTF_getString);
    cls->defineFunction("setFlippedY", js_cocos2dx_LabelTTF_setFlippedY);
    cls->defineFunction("setFlippedX", js_cocos2dx_LabelTTF_setFlippedX);
    cls->defineFunction("setTextDefinition", js_cocos2dx_LabelTTF_setTextDefinition);
    cls->defineFunction("setFontName", js_cocos2dx_LabelTTF_setFontName);
    cls->defineFunction("getHorizontalAlignment", js_cocos2dx_LabelTTF_getHorizontalAlignment);
    cls->defineFunction("initWithStringAndTextDefinition", js_cocos2dx_LabelTTF_initWithStringAndTextDefinition);
    cls->defineFunction("setString", js_cocos2dx_LabelTTF_setString);
    cls->defineFunction("initWithString", js_cocos2dx_LabelTTF_initWithString);
    cls->defineFunction("setFontFillColor", js_cocos2dx_LabelTTF_setFontFillColor);
    cls->defineFunction("getBlendFunc", js_cocos2dx_LabelTTF_getBlendFunc);
    cls->defineFunction("enableStroke", js_cocos2dx_LabelTTF_enableStroke);
    cls->defineFunction("getDimensions", js_cocos2dx_LabelTTF_getDimensions);
    cls->defineFunction("setVerticalAlignment", js_cocos2dx_LabelTTF_setVerticalAlignment);
    cls->defineFunction("setFontSize", js_cocos2dx_LabelTTF_setFontSize);
    cls->defineFunction("getVerticalAlignment", js_cocos2dx_LabelTTF_getVerticalAlignment);
    cls->defineFunction("getTextDefinition", js_cocos2dx_LabelTTF_getTextDefinition);
    cls->defineFunction("setBlendFunc", js_cocos2dx_LabelTTF_setBlendFunc);
    cls->defineFunction("getFontName", js_cocos2dx_LabelTTF_getFontName);
    cls->defineFunction("setHorizontalAlignment", js_cocos2dx_LabelTTF_setHorizontalAlignment);
    cls->defineFunction("disableShadow", js_cocos2dx_LabelTTF_disableShadow);
    cls->defineFunction("disableStroke", js_cocos2dx_LabelTTF_disableStroke);
    cls->defineFunction("ctor", js_cocos2dx_LabelTTF_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_LabelTTF_create);
    cls->defineStaticFunction("createWithFontDefinition", js_cocos2dx_LabelTTF_createWithFontDefinition);
    cls->defineFinalizedFunction(js_cocos2dx_LabelTTF_finalize);
    cls->install();

    __jsb_cocos2dx_LabelTTF_proto = cls->getProto();
    __jsb_cocos2dx_LabelTTF_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LabelTTF.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Layer_proto = nullptr;
se::Class* __jsb_cocos2dx_Layer_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Layer_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Layer::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Layer_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Layer_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Layer_constructor, __jsb_cocos2dx_Layer_class, js_cocos2dx_Layer_finalize)
{
    cocos2d::Layer* cobj = new (std::nothrow) cocos2d::Layer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Layer_ctor, __jsb_cocos2dx_Layer_class, js_cocos2dx_Layer_finalize)
{
    cocos2d::Layer* cobj = new (std::nothrow) cocos2d::Layer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Layer_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Layer)", nativeThisObject);
    cocos2d::Layer* cobj = (cocos2d::Layer*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Layer(se::Object* obj)
{
    auto cls = se::Class::create("Layer", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_Layer_constructor);

    cls->defineFunction("ctor", js_cocos2dx_Layer_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Layer_create);
    cls->defineFinalizedFunction(js_cocos2dx_Layer_finalize);
    cls->install();

    __jsb_cocos2dx_Layer_proto = cls->getProto();
    __jsb_cocos2dx_Layer_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Layer.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx___LayerRGBA_proto = nullptr;
se::Class* __jsb_cocos2dx___LayerRGBA_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx___LayerRGBA_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::__LayerRGBA::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx___LayerRGBA_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx___LayerRGBA_finalize)

SE_CTOR_BEGIN(js_cocos2dx___LayerRGBA_constructor, __jsb_cocos2dx___LayerRGBA_class, js_cocos2dx___LayerRGBA_finalize)
{
    cocos2d::__LayerRGBA* cobj = new (std::nothrow) cocos2d::__LayerRGBA();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx___LayerRGBA_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::__LayerRGBA)", nativeThisObject);
    cocos2d::__LayerRGBA* cobj = (cocos2d::__LayerRGBA*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx___LayerRGBA(se::Object* obj)
{
    auto cls = se::Class::create("__LayerRGBA", obj, __jsb_cocos2dx_Layer_proto, js_cocos2dx___LayerRGBA_constructor);

    cls->defineStaticFunction("create", js_cocos2dx___LayerRGBA_create);
    cls->defineFinalizedFunction(js_cocos2dx___LayerRGBA_finalize);
    cls->install();

    __jsb_cocos2dx___LayerRGBA_proto = cls->getProto();
    __jsb_cocos2dx___LayerRGBA_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_LayerColor_proto = nullptr;
se::Class* __jsb_cocos2dx_LayerColor_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_changeWidthAndHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerColor_changeWidthAndHeight : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerColor_changeWidthAndHeight : Error processing arguments");
        cobj->changeWidthAndHeight(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerColor_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerColor_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerColor_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_changeWidth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerColor_changeWidth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerColor_changeWidth : Error processing arguments");
        cobj->changeWidth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_initWithColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_LayerColor_initWithColor : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithColor(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithColor(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_changeHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerColor_changeHeight : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerColor_changeHeight : Error processing arguments");
        cobj->changeHeight(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerColor_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::LayerColor* result = cocos2d::LayerColor::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerColor>((cocos2d::LayerColor*)result, __jsb_cocos2dx_LayerColor_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::LayerColor* result = cocos2d::LayerColor::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerColor>((cocos2d::LayerColor*)result, __jsb_cocos2dx_LayerColor_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::LayerColor* result = cocos2d::LayerColor::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerColor>((cocos2d::LayerColor*)result, __jsb_cocos2dx_LayerColor_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LayerColor_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LayerColor_constructor, __jsb_cocos2dx_LayerColor_class, js_cocos2dx_LayerColor_finalize)
{
    cocos2d::LayerColor* cobj = new (std::nothrow) cocos2d::LayerColor();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LayerColor_ctor, __jsb_cocos2dx_LayerColor_class, js_cocos2dx_LayerColor_finalize)
{
    cocos2d::LayerColor* cobj = new (std::nothrow) cocos2d::LayerColor();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LayerColor_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LayerColor)", nativeThisObject);
    cocos2d::LayerColor* cobj = (cocos2d::LayerColor*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LayerColor(se::Object* obj)
{
    auto cls = se::Class::create("LayerColor", obj, __jsb_cocos2dx_Layer_proto, js_cocos2dx_LayerColor_constructor);

    cls->defineFunction("changeWidthAndHeight", js_cocos2dx_LayerColor_changeWidthAndHeight);
    cls->defineFunction("getBlendFunc", js_cocos2dx_LayerColor_getBlendFunc);
    cls->defineFunction("setBlendFunc", js_cocos2dx_LayerColor_setBlendFunc);
    cls->defineFunction("changeWidth", js_cocos2dx_LayerColor_changeWidth);
    cls->defineFunction("init", js_cocos2dx_LayerColor_initWithColor);
    cls->defineFunction("changeHeight", js_cocos2dx_LayerColor_changeHeight);
    cls->defineFunction("ctor", js_cocos2dx_LayerColor_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_LayerColor_create);
    cls->defineFinalizedFunction(js_cocos2dx_LayerColor_finalize);
    cls->install();

    __jsb_cocos2dx_LayerColor_proto = cls->getProto();
    __jsb_cocos2dx_LayerColor_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LayerColor.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_LayerGradient_proto = nullptr;
se::Class* __jsb_cocos2dx_LayerGradient_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_getStartColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_getStartColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color3B& result = cobj->getStartColor();
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_isCompressedInterpolation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_isCompressedInterpolation : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isCompressedInterpolation();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_getStartOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_getStartOpacity : Invalid Native Object");
    if (argc == 0) {
        uint8_t result = cobj->getStartOpacity();
        se::Value jsret;
        ok &= uint8_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setVector, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setVector : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setVector : Error processing arguments");
        cobj->setVector(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setStartOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setStartOpacity : Invalid Native Object");
    if (argc == 1) {
        uint8_t arg0;
        ok &= seval_to_uint8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setStartOpacity : Error processing arguments");
        cobj->setStartOpacity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setCompressedInterpolation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setCompressedInterpolation : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setCompressedInterpolation : Error processing arguments");
        cobj->setCompressedInterpolation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setEndOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setEndOpacity : Invalid Native Object");
    if (argc == 1) {
        uint8_t arg0;
        ok &= seval_to_uint8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setEndOpacity : Error processing arguments");
        cobj->setEndOpacity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_getVector, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_getVector : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getVector();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setEndColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setEndColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setEndColor : Error processing arguments");
        cobj->setEndColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_initWithColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_LayerGradient_initWithColor : Invalid Native Object");

    do {
        if (argc == 3) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Color4B arg1;
            ok &= seval_to_Color4B(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg2;
            ok &= seval_to_Vec2(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithColor(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Color4B arg1;
            ok &= seval_to_Color4B(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithColor(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_getEndColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_getEndColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color3B& result = cobj->getEndColor();
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_getEndOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_getEndOpacity : Invalid Native Object");
    if (argc == 0) {
        uint8_t result = cobj->getEndOpacity();
        se::Value jsret;
        ok &= uint8_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_setStartColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerGradient_setStartColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerGradient_setStartColor : Error processing arguments");
        cobj->setStartColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerGradient_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Color4B arg1;
            ok &= seval_to_Color4B(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::LayerGradient* result = cocos2d::LayerGradient::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerGradient>((cocos2d::LayerGradient*)result, __jsb_cocos2dx_LayerGradient_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::LayerGradient* result = cocos2d::LayerGradient::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerGradient>((cocos2d::LayerGradient*)result, __jsb_cocos2dx_LayerGradient_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Color4B arg1;
            ok &= seval_to_Color4B(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg2;
            ok &= seval_to_Vec2(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::LayerGradient* result = cocos2d::LayerGradient::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::LayerGradient>((cocos2d::LayerGradient*)result, __jsb_cocos2dx_LayerGradient_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LayerGradient_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LayerGradient_constructor, __jsb_cocos2dx_LayerGradient_class, js_cocos2dx_LayerGradient_finalize)
{
    cocos2d::LayerGradient* cobj = new (std::nothrow) cocos2d::LayerGradient();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LayerGradient_ctor, __jsb_cocos2dx_LayerGradient_class, js_cocos2dx_LayerGradient_finalize)
{
    cocos2d::LayerGradient* cobj = new (std::nothrow) cocos2d::LayerGradient();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LayerGradient_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LayerGradient)", nativeThisObject);
    cocos2d::LayerGradient* cobj = (cocos2d::LayerGradient*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LayerGradient(se::Object* obj)
{
    auto cls = se::Class::create("LayerGradient", obj, __jsb_cocos2dx_LayerColor_proto, js_cocos2dx_LayerGradient_constructor);

    cls->defineFunction("getStartColor", js_cocos2dx_LayerGradient_getStartColor);
    cls->defineFunction("isCompressedInterpolation", js_cocos2dx_LayerGradient_isCompressedInterpolation);
    cls->defineFunction("getStartOpacity", js_cocos2dx_LayerGradient_getStartOpacity);
    cls->defineFunction("setVector", js_cocos2dx_LayerGradient_setVector);
    cls->defineFunction("setStartOpacity", js_cocos2dx_LayerGradient_setStartOpacity);
    cls->defineFunction("setCompressedInterpolation", js_cocos2dx_LayerGradient_setCompressedInterpolation);
    cls->defineFunction("setEndOpacity", js_cocos2dx_LayerGradient_setEndOpacity);
    cls->defineFunction("getVector", js_cocos2dx_LayerGradient_getVector);
    cls->defineFunction("setEndColor", js_cocos2dx_LayerGradient_setEndColor);
    cls->defineFunction("initWithColor", js_cocos2dx_LayerGradient_initWithColor);
    cls->defineFunction("getEndColor", js_cocos2dx_LayerGradient_getEndColor);
    cls->defineFunction("getEndOpacity", js_cocos2dx_LayerGradient_getEndOpacity);
    cls->defineFunction("setStartColor", js_cocos2dx_LayerGradient_setStartColor);
    cls->defineFunction("ctor", js_cocos2dx_LayerGradient_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_LayerGradient_create);
    cls->defineFinalizedFunction(js_cocos2dx_LayerGradient_finalize);
    cls->install();

    __jsb_cocos2dx_LayerGradient_proto = cls->getProto();
    __jsb_cocos2dx_LayerGradient_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LayerGradient.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_LayerMultiplex_proto = nullptr;
se::Class* __jsb_cocos2dx_LayerMultiplex_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_LayerMultiplex_initWithArray, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerMultiplex* cobj = (cocos2d::LayerMultiplex*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerMultiplex_initWithArray : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::Layer *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerMultiplex_initWithArray : Error processing arguments");
        bool result = cobj->initWithArray(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerMultiplex_switchToAndReleaseMe, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerMultiplex* cobj = (cocos2d::LayerMultiplex*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerMultiplex_switchToAndReleaseMe : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerMultiplex_switchToAndReleaseMe : Error processing arguments");
        cobj->switchToAndReleaseMe(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerMultiplex_addLayer, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerMultiplex* cobj = (cocos2d::LayerMultiplex*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerMultiplex_addLayer : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Layer* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerMultiplex_addLayer : Error processing arguments");
        cobj->addLayer(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_LayerMultiplex_switchTo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::LayerMultiplex* cobj = (cocos2d::LayerMultiplex*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_LayerMultiplex_switchTo : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_LayerMultiplex_switchTo : Error processing arguments");
        cobj->switchTo(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_LayerMultiplex_finalize)

SE_CTOR_BEGIN(js_cocos2dx_LayerMultiplex_constructor, __jsb_cocos2dx_LayerMultiplex_class, js_cocos2dx_LayerMultiplex_finalize)
{
    cocos2d::LayerMultiplex* cobj = new (std::nothrow) cocos2d::LayerMultiplex();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_LayerMultiplex_ctor, __jsb_cocos2dx_LayerMultiplex_class, js_cocos2dx_LayerMultiplex_finalize)
{
    cocos2d::LayerMultiplex* cobj = new (std::nothrow) cocos2d::LayerMultiplex();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_LayerMultiplex_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::LayerMultiplex)", nativeThisObject);
    cocos2d::LayerMultiplex* cobj = (cocos2d::LayerMultiplex*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_LayerMultiplex(se::Object* obj)
{
    auto cls = se::Class::create("LayerMultiplex", obj, __jsb_cocos2dx_Layer_proto, js_cocos2dx_LayerMultiplex_constructor);

    cls->defineFunction("initWithArray", js_cocos2dx_LayerMultiplex_initWithArray);
    cls->defineFunction("switchToAndReleaseMe", js_cocos2dx_LayerMultiplex_switchToAndReleaseMe);
    cls->defineFunction("addLayer", js_cocos2dx_LayerMultiplex_addLayer);
    cls->defineFunction("switchTo", js_cocos2dx_LayerMultiplex_switchTo);
    cls->defineFunction("ctor", js_cocos2dx_LayerMultiplex_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_LayerMultiplex_finalize);
    cls->install();

    __jsb_cocos2dx_LayerMultiplex_proto = cls->getProto();
    __jsb_cocos2dx_LayerMultiplex_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.LayerMultiplex.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItem_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItem_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItem_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_activate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_activate : Invalid Native Object");
    if (argc == 0) {
        cobj->activate();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_initWithCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_initWithCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void (cocos2d::Ref *)> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItem_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItem_initWithCallback : Error processing arguments");
        bool result = cobj->initWithCallback(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_selected, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_selected : Invalid Native Object");
    if (argc == 0) {
        cobj->selected();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_isSelected, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_isSelected : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isSelected();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_setCallback, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_setCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void (cocos2d::Ref *)> arg0;
        do {
		    if (args[0].isObject() && args[0].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[0]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItem_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItem_setCallback : Error processing arguments");
        cobj->setCallback(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_unselected, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_unselected : Invalid Native Object");
    if (argc == 0) {
        cobj->unselected();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItem_rect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItem_rect : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->rect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItem_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItem_constructor, __jsb_cocos2dx_MenuItem_class, js_cocos2dx_MenuItem_finalize)
{
    cocos2d::MenuItem* cobj = new (std::nothrow) cocos2d::MenuItem();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItem_ctor, __jsb_cocos2dx_MenuItem_class, js_cocos2dx_MenuItem_finalize)
{
    cocos2d::MenuItem* cobj = new (std::nothrow) cocos2d::MenuItem();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItem_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItem)", nativeThisObject);
    cocos2d::MenuItem* cobj = (cocos2d::MenuItem*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItem(se::Object* obj)
{
    auto cls = se::Class::create("MenuItem", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_MenuItem_constructor);

    cls->defineFunction("setEnabled", js_cocos2dx_MenuItem_setEnabled);
    cls->defineFunction("activate", js_cocos2dx_MenuItem_activate);
    cls->defineFunction("initWithCallback", js_cocos2dx_MenuItem_initWithCallback);
    cls->defineFunction("isEnabled", js_cocos2dx_MenuItem_isEnabled);
    cls->defineFunction("selected", js_cocos2dx_MenuItem_selected);
    cls->defineFunction("isSelected", js_cocos2dx_MenuItem_isSelected);
    cls->defineFunction("setCallback", js_cocos2dx_MenuItem_setCallback);
    cls->defineFunction("unselected", js_cocos2dx_MenuItem_unselected);
    cls->defineFunction("rect", js_cocos2dx_MenuItem_rect);
    cls->defineFunction("ctor", js_cocos2dx_MenuItem_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItem_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItem_proto = cls->getProto();
    __jsb_cocos2dx_MenuItem_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItem.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemLabel_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemLabel_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_setLabel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_setLabel : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemLabel_setLabel : Error processing arguments");
        cobj->setLabel(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_getString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_getString : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_getDisabledColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_getDisabledColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color3B& result = cobj->getDisabledColor();
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_setString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemLabel_setString : Error processing arguments");
        cobj->setString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_initWithLabel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_initWithLabel : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        std::function<void (cocos2d::Ref *)> arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        do {
		    if (args[1].isObject() && args[1].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[1]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItemLabel_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemLabel_initWithLabel : Error processing arguments");
        bool result = cobj->initWithLabel(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_setDisabledColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_setDisabledColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemLabel_setDisabledColor : Error processing arguments");
        cobj->setDisabledColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_getLabel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemLabel_getLabel : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getLabel();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemLabel_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemLabel_constructor, __jsb_cocos2dx_MenuItemLabel_class, js_cocos2dx_MenuItemLabel_finalize)
{
    cocos2d::MenuItemLabel* cobj = new (std::nothrow) cocos2d::MenuItemLabel();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemLabel_ctor, __jsb_cocos2dx_MenuItemLabel_class, js_cocos2dx_MenuItemLabel_finalize)
{
    cocos2d::MenuItemLabel* cobj = new (std::nothrow) cocos2d::MenuItemLabel();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemLabel_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemLabel)", nativeThisObject);
    cocos2d::MenuItemLabel* cobj = (cocos2d::MenuItemLabel*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemLabel(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemLabel", obj, __jsb_cocos2dx_MenuItem_proto, js_cocos2dx_MenuItemLabel_constructor);

    cls->defineFunction("setLabel", js_cocos2dx_MenuItemLabel_setLabel);
    cls->defineFunction("getString", js_cocos2dx_MenuItemLabel_getString);
    cls->defineFunction("getDisabledColor", js_cocos2dx_MenuItemLabel_getDisabledColor);
    cls->defineFunction("setString", js_cocos2dx_MenuItemLabel_setString);
    cls->defineFunction("initWithLabel", js_cocos2dx_MenuItemLabel_initWithLabel);
    cls->defineFunction("setDisabledColor", js_cocos2dx_MenuItemLabel_setDisabledColor);
    cls->defineFunction("getLabel", js_cocos2dx_MenuItemLabel_getLabel);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemLabel_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemLabel_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemLabel_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemLabel_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemLabel.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemAtlasFont_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemAtlasFont_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemAtlasFont_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemAtlasFont* cobj = (cocos2d::MenuItemAtlasFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemAtlasFont_initWithString : Invalid Native Object");
    if (argc == 6) {
        std::string arg0;
        std::string arg1;
        int arg2 = 0;
        int arg3 = 0;
        int8_t arg4;
        std::function<void (cocos2d::Ref *)> arg5;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_int8(args[4], &arg4);
        do {
		    if (args[5].isObject() && args[5].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[5]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItemAtlasFont_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg5 = lambda;
		    }
		    else
		    {
		        arg5 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemAtlasFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemAtlasFont_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemAtlasFont_constructor, __jsb_cocos2dx_MenuItemAtlasFont_class, js_cocos2dx_MenuItemAtlasFont_finalize)
{
    cocos2d::MenuItemAtlasFont* cobj = new (std::nothrow) cocos2d::MenuItemAtlasFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemAtlasFont_ctor, __jsb_cocos2dx_MenuItemAtlasFont_class, js_cocos2dx_MenuItemAtlasFont_finalize)
{
    cocos2d::MenuItemAtlasFont* cobj = new (std::nothrow) cocos2d::MenuItemAtlasFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemAtlasFont_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemAtlasFont)", nativeThisObject);
    cocos2d::MenuItemAtlasFont* cobj = (cocos2d::MenuItemAtlasFont*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemAtlasFont(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemAtlasFont", obj, __jsb_cocos2dx_MenuItemLabel_proto, js_cocos2dx_MenuItemAtlasFont_constructor);

    cls->defineFunction("initWithString", js_cocos2dx_MenuItemAtlasFont_initWithString);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemAtlasFont_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemAtlasFont_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemAtlasFont_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemAtlasFont_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemAtlasFont.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemFont_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemFont_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_setFontNameObj, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemFont_setFontNameObj : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemFont_setFontNameObj : Error processing arguments");
        cobj->setFontNameObj(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_getFontSizeObj, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemFont_getFontSizeObj : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getFontSizeObj();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_setFontSizeObj, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemFont_setFontSizeObj : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemFont_setFontSizeObj : Error processing arguments");
        cobj->setFontSizeObj(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_initWithString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemFont_initWithString : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::function<void (cocos2d::Ref *)> arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        do {
		    if (args[1].isObject() && args[1].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[1]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItemFont_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemFont_initWithString : Error processing arguments");
        bool result = cobj->initWithString(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_getFontNameObj, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemFont_getFontNameObj : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getFontNameObj();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_setFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemFont_setFontName : Error processing arguments");
        cocos2d::MenuItemFont::setFontName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_getFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        int result = cocos2d::MenuItemFont::getFontSize();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_getFontName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        const std::string& result = cocos2d::MenuItemFont::getFontName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_setFontSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemFont_setFontSize : Error processing arguments");
        cocos2d::MenuItemFont::setFontSize(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemFont_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemFont_constructor, __jsb_cocos2dx_MenuItemFont_class, js_cocos2dx_MenuItemFont_finalize)
{
    cocos2d::MenuItemFont* cobj = new (std::nothrow) cocos2d::MenuItemFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemFont_ctor, __jsb_cocos2dx_MenuItemFont_class, js_cocos2dx_MenuItemFont_finalize)
{
    cocos2d::MenuItemFont* cobj = new (std::nothrow) cocos2d::MenuItemFont();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemFont_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemFont)", nativeThisObject);
    cocos2d::MenuItemFont* cobj = (cocos2d::MenuItemFont*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemFont(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemFont", obj, __jsb_cocos2dx_MenuItemLabel_proto, js_cocos2dx_MenuItemFont_constructor);

    cls->defineFunction("setFontName", js_cocos2dx_MenuItemFont_setFontNameObj);
    cls->defineFunction("getFontSize", js_cocos2dx_MenuItemFont_getFontSizeObj);
    cls->defineFunction("setFontSize", js_cocos2dx_MenuItemFont_setFontSizeObj);
    cls->defineFunction("initWithString", js_cocos2dx_MenuItemFont_initWithString);
    cls->defineFunction("getFontName", js_cocos2dx_MenuItemFont_getFontNameObj);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemFont_ctor);
    cls->defineStaticFunction("setFontName", js_cocos2dx_MenuItemFont_setFontName);
    cls->defineStaticFunction("getFontSize", js_cocos2dx_MenuItemFont_getFontSize);
    cls->defineStaticFunction("getFontName", js_cocos2dx_MenuItemFont_getFontName);
    cls->defineStaticFunction("setFontSize", js_cocos2dx_MenuItemFont_setFontSize);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemFont_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemFont_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemFont_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemFont.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemSprite_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemSprite_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemSprite_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_selected, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_selected : Invalid Native Object");
    if (argc == 0) {
        cobj->selected();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_setNormalImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_setNormalImage : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemSprite_setNormalImage : Error processing arguments");
        cobj->setNormalImage(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_setDisabledImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_setDisabledImage : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemSprite_setDisabledImage : Error processing arguments");
        cobj->setDisabledImage(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_initWithNormalSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_initWithNormalSprite : Invalid Native Object");
    if (argc == 4) {
        cocos2d::Node* arg0 = nullptr;
        cocos2d::Node* arg1 = nullptr;
        cocos2d::Node* arg2 = nullptr;
        std::function<void (cocos2d::Ref *)> arg3;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_native_ptr(args[2], &arg2);
        do {
		    if (args[3].isObject() && args[3].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[3]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItemSprite_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemSprite_initWithNormalSprite : Error processing arguments");
        bool result = cobj->initWithNormalSprite(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_setSelectedImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_setSelectedImage : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemSprite_setSelectedImage : Error processing arguments");
        cobj->setSelectedImage(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_getDisabledImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_getDisabledImage : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getDisabledImage();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_getSelectedImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_getSelectedImage : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getSelectedImage();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_getNormalImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_getNormalImage : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Node* result = cobj->getNormalImage();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_unselected, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemSprite_unselected : Invalid Native Object");
    if (argc == 0) {
        cobj->unselected();
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemSprite_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemSprite_constructor, __jsb_cocos2dx_MenuItemSprite_class, js_cocos2dx_MenuItemSprite_finalize)
{
    cocos2d::MenuItemSprite* cobj = new (std::nothrow) cocos2d::MenuItemSprite();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemSprite_ctor, __jsb_cocos2dx_MenuItemSprite_class, js_cocos2dx_MenuItemSprite_finalize)
{
    cocos2d::MenuItemSprite* cobj = new (std::nothrow) cocos2d::MenuItemSprite();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemSprite_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemSprite)", nativeThisObject);
    cocos2d::MenuItemSprite* cobj = (cocos2d::MenuItemSprite*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemSprite(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemSprite", obj, __jsb_cocos2dx_MenuItem_proto, js_cocos2dx_MenuItemSprite_constructor);

    cls->defineFunction("setEnabled", js_cocos2dx_MenuItemSprite_setEnabled);
    cls->defineFunction("selected", js_cocos2dx_MenuItemSprite_selected);
    cls->defineFunction("setNormalImage", js_cocos2dx_MenuItemSprite_setNormalImage);
    cls->defineFunction("setDisabledImage", js_cocos2dx_MenuItemSprite_setDisabledImage);
    cls->defineFunction("initWithNormalSprite", js_cocos2dx_MenuItemSprite_initWithNormalSprite);
    cls->defineFunction("setSelectedImage", js_cocos2dx_MenuItemSprite_setSelectedImage);
    cls->defineFunction("getDisabledImage", js_cocos2dx_MenuItemSprite_getDisabledImage);
    cls->defineFunction("getSelectedImage", js_cocos2dx_MenuItemSprite_getSelectedImage);
    cls->defineFunction("getNormalImage", js_cocos2dx_MenuItemSprite_getNormalImage);
    cls->defineFunction("unselected", js_cocos2dx_MenuItemSprite_unselected);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemSprite_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemSprite_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemSprite_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemSprite_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemSprite.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemImage_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemImage_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_setDisabledSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemImage_setDisabledSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemImage_setDisabledSpriteFrame : Error processing arguments");
        cobj->setDisabledSpriteFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_setSelectedSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemImage_setSelectedSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemImage_setSelectedSpriteFrame : Error processing arguments");
        cobj->setSelectedSpriteFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_setNormalSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemImage_setNormalSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemImage_setNormalSpriteFrame : Error processing arguments");
        cobj->setNormalSpriteFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemImage_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_initWithNormalImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemImage_initWithNormalImage : Invalid Native Object");
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::function<void (cocos2d::Ref *)> arg3;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_std_string(args[2], &arg2);
        do {
		    if (args[3].isObject() && args[3].toObject()->isFunction())
		    {
		        se::Value jsThis(thisObject);
		        se::Value jsFunc(args[3]);
		        jsThis.toObject()->attachChild(jsFunc.toObject());
		        auto lambda = [=](cocos2d::Ref* larg0) -> void {
		            bool ok = true;
		            se::ValueArray args;
		            args.resize(1);
		            ok &= native_ptr_to_seval<cocos2d::Ref>((cocos2d::Ref*)larg0, __jsb_cocos2dx_MenuItemImage_class, &args[0]);
		            se::Value rval;
		            se::Object* thisObj = jsThis.toObject();
		            se::Object* funcObj = jsFunc.toObject();
		            bool succeed = funcObj->call(args, thisObj, &rval);
		            if (!succeed) {
		                se::ScriptEngine::getInstance()->clearException();
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(false)
		;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemImage_initWithNormalImage : Error processing arguments");
        bool result = cobj->initWithNormalImage(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemImage_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemImage_constructor, __jsb_cocos2dx_MenuItemImage_class, js_cocos2dx_MenuItemImage_finalize)
{
    cocos2d::MenuItemImage* cobj = new (std::nothrow) cocos2d::MenuItemImage();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemImage_ctor, __jsb_cocos2dx_MenuItemImage_class, js_cocos2dx_MenuItemImage_finalize)
{
    cocos2d::MenuItemImage* cobj = new (std::nothrow) cocos2d::MenuItemImage();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemImage_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemImage)", nativeThisObject);
    cocos2d::MenuItemImage* cobj = (cocos2d::MenuItemImage*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemImage(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemImage", obj, __jsb_cocos2dx_MenuItemSprite_proto, js_cocos2dx_MenuItemImage_constructor);

    cls->defineFunction("setDisabledSpriteFrame", js_cocos2dx_MenuItemImage_setDisabledSpriteFrame);
    cls->defineFunction("setSelectedSpriteFrame", js_cocos2dx_MenuItemImage_setSelectedSpriteFrame);
    cls->defineFunction("setNormalSpriteFrame", js_cocos2dx_MenuItemImage_setNormalSpriteFrame);
    cls->defineFunction("init", js_cocos2dx_MenuItemImage_init);
    cls->defineFunction("initWithNormalImage", js_cocos2dx_MenuItemImage_initWithNormalImage);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemImage_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemImage_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemImage_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemImage_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemImage.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MenuItemToggle_proto = nullptr;
se::Class* __jsb_cocos2dx_MenuItemToggle_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_setSubItems, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_setSubItems : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::MenuItem *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemToggle_setSubItems : Error processing arguments");
        cobj->setSubItems(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_initWithItem, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_initWithItem : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MenuItem* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemToggle_initWithItem : Error processing arguments");
        bool result = cobj->initWithItem(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_getSelectedIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_getSelectedIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getSelectedIndex();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_addSubItem, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_addSubItem : Invalid Native Object");
    if (argc == 1) {
        cocos2d::MenuItem* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemToggle_addSubItem : Error processing arguments");
        cobj->addSubItem(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_getSelectedItem, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_getSelectedItem : Invalid Native Object");
    if (argc == 0) {
        cocos2d::MenuItem* result = cobj->getSelectedItem();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::MenuItem>((cocos2d::MenuItem*)result, __jsb_cocos2dx_MenuItem_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_setSelectedIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MenuItemToggle_setSelectedIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MenuItemToggle_setSelectedIndex : Error processing arguments");
        cobj->setSelectedIndex(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MenuItemToggle_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MenuItemToggle_constructor, __jsb_cocos2dx_MenuItemToggle_class, js_cocos2dx_MenuItemToggle_finalize)
{
    cocos2d::MenuItemToggle* cobj = new (std::nothrow) cocos2d::MenuItemToggle();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MenuItemToggle_ctor, __jsb_cocos2dx_MenuItemToggle_class, js_cocos2dx_MenuItemToggle_finalize)
{
    cocos2d::MenuItemToggle* cobj = new (std::nothrow) cocos2d::MenuItemToggle();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MenuItemToggle_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MenuItemToggle)", nativeThisObject);
    cocos2d::MenuItemToggle* cobj = (cocos2d::MenuItemToggle*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MenuItemToggle(se::Object* obj)
{
    auto cls = se::Class::create("MenuItemToggle", obj, __jsb_cocos2dx_MenuItem_proto, js_cocos2dx_MenuItemToggle_constructor);

    cls->defineFunction("setSubItems", js_cocos2dx_MenuItemToggle_setSubItems);
    cls->defineFunction("initWithItem", js_cocos2dx_MenuItemToggle_initWithItem);
    cls->defineFunction("getSelectedIndex", js_cocos2dx_MenuItemToggle_getSelectedIndex);
    cls->defineFunction("addSubItem", js_cocos2dx_MenuItemToggle_addSubItem);
    cls->defineFunction("getSelectedItem", js_cocos2dx_MenuItemToggle_getSelectedItem);
    cls->defineFunction("setSelectedIndex", js_cocos2dx_MenuItemToggle_setSelectedIndex);
    cls->defineFunction("ctor", js_cocos2dx_MenuItemToggle_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_MenuItemToggle_finalize);
    cls->install();

    __jsb_cocos2dx_MenuItemToggle_proto = cls->getProto();
    __jsb_cocos2dx_MenuItemToggle_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MenuItemToggle.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Menu_proto = nullptr;
se::Class* __jsb_cocos2dx_Menu_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Menu_initWithArray, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_initWithArray : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::MenuItem *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Menu_initWithArray : Error processing arguments");
        bool result = cobj->initWithArray(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Menu_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_alignItemsVertically, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_alignItemsVertically : Invalid Native Object");
    if (argc == 0) {
        cobj->alignItemsVertically();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_alignItemsHorizontallyWithPadding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_alignItemsHorizontallyWithPadding : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Menu_alignItemsHorizontallyWithPadding : Error processing arguments");
        cobj->alignItemsHorizontallyWithPadding(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_alignItemsVerticallyWithPadding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_alignItemsVerticallyWithPadding : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Menu_alignItemsVerticallyWithPadding : Error processing arguments");
        cobj->alignItemsVerticallyWithPadding(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Menu_alignItemsHorizontally, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Menu_alignItemsHorizontally : Invalid Native Object");
    if (argc == 0) {
        cobj->alignItemsHorizontally();
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Menu_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Menu_constructor, __jsb_cocos2dx_Menu_class, js_cocos2dx_Menu_finalize)
{
    cocos2d::Menu* cobj = new (std::nothrow) cocos2d::Menu();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Menu_ctor, __jsb_cocos2dx_Menu_class, js_cocos2dx_Menu_finalize)
{
    cocos2d::Menu* cobj = new (std::nothrow) cocos2d::Menu();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Menu_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Menu)", nativeThisObject);
    cocos2d::Menu* cobj = (cocos2d::Menu*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Menu(se::Object* obj)
{
    auto cls = se::Class::create("Menu", obj, __jsb_cocos2dx_Layer_proto, js_cocos2dx_Menu_constructor);

    cls->defineFunction("initWithArray", js_cocos2dx_Menu_initWithArray);
    cls->defineFunction("setEnabled", js_cocos2dx_Menu_setEnabled);
    cls->defineFunction("alignItemsVertically", js_cocos2dx_Menu_alignItemsVertically);
    cls->defineFunction("isEnabled", js_cocos2dx_Menu_isEnabled);
    cls->defineFunction("alignItemsHorizontallyWithPadding", js_cocos2dx_Menu_alignItemsHorizontallyWithPadding);
    cls->defineFunction("alignItemsVerticallyWithPadding", js_cocos2dx_Menu_alignItemsVerticallyWithPadding);
    cls->defineFunction("alignItemsHorizontally", js_cocos2dx_Menu_alignItemsHorizontally);
    cls->defineFunction("ctor", js_cocos2dx_Menu_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_Menu_finalize);
    cls->install();

    __jsb_cocos2dx_Menu_proto = cls->getProto();
    __jsb_cocos2dx_Menu_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Menu.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_MotionStreak_proto = nullptr;
se::Class* __jsb_cocos2dx_MotionStreak_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_reset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_reset : Invalid Native Object");
    if (argc == 0) {
        cobj->reset();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_tintWithColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_tintWithColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_tintWithColor : Error processing arguments");
        cobj->tintWithColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_setStartingPositionInitialized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_setStartingPositionInitialized : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_setStartingPositionInitialized : Error processing arguments");
        cobj->setStartingPositionInitialized(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_isStartingPositionInitialized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_isStartingPositionInitialized : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isStartingPositionInitialized();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_isFastMode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_isFastMode : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isFastMode();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_getStroke, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_getStroke : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStroke();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_initWithFade, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_MotionStreak_initWithFade : Invalid Native Object");

    do {
        if (argc == 5) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg3;
            ok &= seval_to_Color3B(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg4 = nullptr;
            ok &= seval_to_native_ptr(args[4], &arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFade(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg3;
            ok &= seval_to_Color3B(args[3], &arg3);
            if (!ok) { ok = true; break; }
            std::string arg4;
            ok &= seval_to_std_string(args[4], &arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFade(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_setFastMode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_setFastMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_setFastMode : Error processing arguments");
        cobj->setFastMode(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_setStroke, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_MotionStreak_setStroke : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_MotionStreak_setStroke : Error processing arguments");
        cobj->setStroke(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_MotionStreak_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 5) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg3;
            ok &= seval_to_Color3B(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg4 = nullptr;
            ok &= seval_to_native_ptr(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::MotionStreak* result = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MotionStreak>((cocos2d::MotionStreak*)result, __jsb_cocos2dx_MotionStreak_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 5) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg3;
            ok &= seval_to_Color3B(args[3], &arg3);
            if (!ok) { ok = true; break; }
            std::string arg4;
            ok &= seval_to_std_string(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::MotionStreak* result = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::MotionStreak>((cocos2d::MotionStreak*)result, __jsb_cocos2dx_MotionStreak_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_MotionStreak_finalize)

SE_CTOR_BEGIN(js_cocos2dx_MotionStreak_constructor, __jsb_cocos2dx_MotionStreak_class, js_cocos2dx_MotionStreak_finalize)
{
    cocos2d::MotionStreak* cobj = new (std::nothrow) cocos2d::MotionStreak();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_MotionStreak_ctor, __jsb_cocos2dx_MotionStreak_class, js_cocos2dx_MotionStreak_finalize)
{
    cocos2d::MotionStreak* cobj = new (std::nothrow) cocos2d::MotionStreak();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_MotionStreak_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::MotionStreak)", nativeThisObject);
    cocos2d::MotionStreak* cobj = (cocos2d::MotionStreak*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_MotionStreak(se::Object* obj)
{
    auto cls = se::Class::create("MotionStreak", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_MotionStreak_constructor);

    cls->defineFunction("reset", js_cocos2dx_MotionStreak_reset);
    cls->defineFunction("setTexture", js_cocos2dx_MotionStreak_setTexture);
    cls->defineFunction("getTexture", js_cocos2dx_MotionStreak_getTexture);
    cls->defineFunction("tintWithColor", js_cocos2dx_MotionStreak_tintWithColor);
    cls->defineFunction("setBlendFunc", js_cocos2dx_MotionStreak_setBlendFunc);
    cls->defineFunction("setStartingPositionInitialized", js_cocos2dx_MotionStreak_setStartingPositionInitialized);
    cls->defineFunction("getBlendFunc", js_cocos2dx_MotionStreak_getBlendFunc);
    cls->defineFunction("isStartingPositionInitialized", js_cocos2dx_MotionStreak_isStartingPositionInitialized);
    cls->defineFunction("isFastMode", js_cocos2dx_MotionStreak_isFastMode);
    cls->defineFunction("getStroke", js_cocos2dx_MotionStreak_getStroke);
    cls->defineFunction("initWithFade", js_cocos2dx_MotionStreak_initWithFade);
    cls->defineFunction("setFastMode", js_cocos2dx_MotionStreak_setFastMode);
    cls->defineFunction("setStroke", js_cocos2dx_MotionStreak_setStroke);
    cls->defineFunction("ctor", js_cocos2dx_MotionStreak_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_MotionStreak_create);
    cls->defineFinalizedFunction(js_cocos2dx_MotionStreak_finalize);
    cls->install();

    __jsb_cocos2dx_MotionStreak_proto = cls->getProto();
    __jsb_cocos2dx_MotionStreak_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.MotionStreak.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_NodeGrid_proto = nullptr;
se::Class* __jsb_cocos2dx_NodeGrid_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_NodeGrid_setTarget, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::NodeGrid* cobj = (cocos2d::NodeGrid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_NodeGrid_setTarget : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_NodeGrid_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_NodeGrid_getGrid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::NodeGrid* cobj = (cocos2d::NodeGrid*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_NodeGrid_getGrid : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::GridBase* result = cobj->getGrid();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GridBase>((cocos2d::GridBase*)result, __jsb_cocos2dx_GridBase_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::GridBase* result = cobj->getGrid();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GridBase>((cocos2d::GridBase*)result, __jsb_cocos2dx_GridBase_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_NodeGrid_getGridRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::NodeGrid* cobj = (cocos2d::NodeGrid*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_NodeGrid_getGridRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getGridRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_NodeGrid_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 1) {
            cocos2d::Rect arg0;
            ok &= seval_to_Rect(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::NodeGrid* result = cocos2d::NodeGrid::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::NodeGrid>((cocos2d::NodeGrid*)result, __jsb_cocos2dx_NodeGrid_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::NodeGrid* result = cocos2d::NodeGrid::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::NodeGrid>((cocos2d::NodeGrid*)result, __jsb_cocos2dx_NodeGrid_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_NodeGrid_finalize)

SE_CTOR_BEGIN(js_cocos2dx_NodeGrid_constructor, __jsb_cocos2dx_NodeGrid_class, js_cocos2dx_NodeGrid_finalize)
{
    cocos2d::NodeGrid* cobj = new (std::nothrow) cocos2d::NodeGrid();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_NodeGrid_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::NodeGrid)", nativeThisObject);
    cocos2d::NodeGrid* cobj = (cocos2d::NodeGrid*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_NodeGrid(se::Object* obj)
{
    auto cls = se::Class::create("NodeGrid", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_NodeGrid_constructor);

    cls->defineFunction("setTarget", js_cocos2dx_NodeGrid_setTarget);
    cls->defineFunction("getGrid", js_cocos2dx_NodeGrid_getGrid);
    cls->defineFunction("getGridRect", js_cocos2dx_NodeGrid_getGridRect);
    cls->defineStaticFunction("create", js_cocos2dx_NodeGrid_create);
    cls->defineFinalizedFunction(js_cocos2dx_NodeGrid_finalize);
    cls->install();

    __jsb_cocos2dx_NodeGrid_proto = cls->getProto();
    __jsb_cocos2dx_NodeGrid_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleBatchNode_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleBatchNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_initWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_initWithTexture : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_initWithTexture : Error processing arguments");
        bool result = cobj->initWithTexture(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_disableParticle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_disableParticle : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_disableParticle : Error processing arguments");
        cobj->disableParticle(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_setTextureAtlas, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_setTextureAtlas : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextureAtlas* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_setTextureAtlas : Error processing arguments");
        cobj->setTextureAtlas(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_initWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_initWithFile : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_initWithFile : Error processing arguments");
        bool result = cobj->initWithFile(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup : Error processing arguments");
        cobj->removeAllChildrenWithCleanup(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_insertChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_insertChild : Invalid Native Object");
    if (argc == 2) {
        cocos2d::ParticleSystem* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_insertChild : Error processing arguments");
        cobj->insertChild(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_removeChildAtIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleBatchNode_removeChildAtIndex : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        bool arg1;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_removeChildAtIndex : Error processing arguments");
        cobj->removeChildAtIndex(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_create : Error processing arguments");
        auto result = cocos2d::ParticleBatchNode::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_create : Error processing arguments");
        auto result = cocos2d::ParticleBatchNode::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_createWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_createWithTexture : Error processing arguments");
        auto result = cocos2d::ParticleBatchNode::createWithTexture(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleBatchNode_createWithTexture : Error processing arguments");
        auto result = cocos2d::ParticleBatchNode::createWithTexture(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleBatchNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleBatchNode_constructor, __jsb_cocos2dx_ParticleBatchNode_class, js_cocos2dx_ParticleBatchNode_finalize)
{
    cocos2d::ParticleBatchNode* cobj = new (std::nothrow) cocos2d::ParticleBatchNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ParticleBatchNode_ctor, __jsb_cocos2dx_ParticleBatchNode_class, js_cocos2dx_ParticleBatchNode_finalize)
{
    cocos2d::ParticleBatchNode* cobj = new (std::nothrow) cocos2d::ParticleBatchNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleBatchNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleBatchNode)", nativeThisObject);
    cocos2d::ParticleBatchNode* cobj = (cocos2d::ParticleBatchNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ParticleBatchNode(se::Object* obj)
{
    auto cls = se::Class::create("ParticleBatchNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ParticleBatchNode_constructor);

    cls->defineFunction("setTexture", js_cocos2dx_ParticleBatchNode_setTexture);
    cls->defineFunction("initWithTexture", js_cocos2dx_ParticleBatchNode_initWithTexture);
    cls->defineFunction("disableParticle", js_cocos2dx_ParticleBatchNode_disableParticle);
    cls->defineFunction("getTexture", js_cocos2dx_ParticleBatchNode_getTexture);
    cls->defineFunction("setTextureAtlas", js_cocos2dx_ParticleBatchNode_setTextureAtlas);
    cls->defineFunction("initWithFile", js_cocos2dx_ParticleBatchNode_initWithFile);
    cls->defineFunction("setBlendFunc", js_cocos2dx_ParticleBatchNode_setBlendFunc);
    cls->defineFunction("removeAllChildrenWithCleanup", js_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup);
    cls->defineFunction("getBlendFunc", js_cocos2dx_ParticleBatchNode_getBlendFunc);
    cls->defineFunction("insertChild", js_cocos2dx_ParticleBatchNode_insertChild);
    cls->defineFunction("removeChildAtIndex", js_cocos2dx_ParticleBatchNode_removeChildAtIndex);
    cls->defineFunction("ctor", js_cocos2dx_ParticleBatchNode_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleBatchNode_create);
    cls->defineStaticFunction("createWithTexture", js_cocos2dx_ParticleBatchNode_createWithTexture);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleBatchNode_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleBatchNode_proto = cls->getProto();
    __jsb_cocos2dx_ParticleBatchNode_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ParticleBatchNode.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ParticleSystem_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSystem_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartSizeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartSizeVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartSizeVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_isFull, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_isFull : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isFull();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getBatchNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getBatchNode : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ParticleBatchNode* result = cobj->getBatchNode();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ParticleBatchNode>((cocos2d::ParticleBatchNode*)result, __jsb_cocos2dx_ParticleBatchNode_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4F& result = cobj->getStartColor();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getPositionType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getPositionType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getPositionType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setPosVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setPosVar : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setPosVar : Error processing arguments");
        cobj->setPosVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndSpin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndSpin : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndSpin();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setRotatePerSecondVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setRotatePerSecondVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setRotatePerSecondVar : Error processing arguments");
        cobj->setRotatePerSecondVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartSpinVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartSpinVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartSpinVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getRadialAccelVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getRadialAccelVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRadialAccelVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndSizeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndSizeVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndSizeVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setTangentialAccel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setTangentialAccel : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setTangentialAccel : Error processing arguments");
        cobj->setTangentialAccel(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getRadialAccel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getRadialAccel : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRadialAccel();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartRadius : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartRadius : Error processing arguments");
        cobj->setStartRadius(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setRotatePerSecond, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setRotatePerSecond : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setRotatePerSecond : Error processing arguments");
        cobj->setRotatePerSecond(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndSize : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndSize : Error processing arguments");
        cobj->setEndSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getGravity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getGravity : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getGravity();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_resumeEmissions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_resumeEmissions : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeEmissions();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getTangentialAccel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getTangentialAccel : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getTangentialAccel();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndRadius : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndRadius : Error processing arguments");
        cobj->setEndRadius(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getSpeed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getSpeed : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSpeed();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_pauseEmissions, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_pauseEmissions : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseEmissions();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getAngle : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAngle();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndColor : Error processing arguments");
        cobj->setEndColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartSpin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartSpin : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartSpin : Error processing arguments");
        cobj->setStartSpin(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setDuration : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setDuration : Error processing arguments");
        cobj->setDuration(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_addParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_addParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_addParticles : Error processing arguments");
        cobj->addParticles(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getPosVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getPosVar : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPosVar();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_updateWithNoTime, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_updateWithNoTime : Invalid Native Object");
    if (argc == 0) {
        cobj->updateWithNoTime();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_isBlendAdditive, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_isBlendAdditive : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isBlendAdditive();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getSpeedVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getSpeedVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getSpeedVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setPositionType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setPositionType : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ParticleSystem::PositionType arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setPositionType : Error processing arguments");
        cobj->setPositionType(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_stopSystem, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_stopSystem : Invalid Native Object");
    if (argc == 0) {
        cobj->stopSystem();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getSourcePosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getSourcePosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getSourcePosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setLifeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setLifeVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setLifeVar : Error processing arguments");
        cobj->setLifeVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setTotalParticles : Error processing arguments");
        cobj->setTotalParticles(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndColorVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndColorVar : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndColorVar : Error processing arguments");
        cobj->setEndColorVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getAtlasIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getAtlasIndex : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getAtlasIndex();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartSpinVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartSpinVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartSpinVar : Error processing arguments");
        cobj->setStartSpinVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_resetSystem, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_resetSystem : Invalid Native Object");
    if (argc == 0) {
        cobj->resetSystem();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setAtlasIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setAtlasIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setAtlasIndex : Error processing arguments");
        cobj->setAtlasIndex(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setTangentialAccelVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setTangentialAccelVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setTangentialAccelVar : Error processing arguments");
        cobj->setTangentialAccelVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndRadiusVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndRadiusVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndRadiusVar : Error processing arguments");
        cobj->setEndRadiusVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndRadius : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndRadius();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_isActive, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_isActive : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isActive();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setRadialAccelVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setRadialAccelVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setRadialAccelVar : Error processing arguments");
        cobj->setRadialAccelVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartSize : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartSize : Error processing arguments");
        cobj->setStartSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setSpeed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setSpeed : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setSpeed : Error processing arguments");
        cobj->setSpeed(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartSpin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartSpin : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartSpin();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getResourceFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getResourceFile : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getResourceFile();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getRotatePerSecond, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getRotatePerSecond : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRotatePerSecond();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEmitterMode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEmitterMode : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ParticleSystem::Mode arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEmitterMode : Error processing arguments");
        cobj->setEmitterMode(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getDuration : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDuration();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setSourcePosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setSourcePosition : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setSourcePosition : Error processing arguments");
        cobj->setSourcePosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_stop, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_stop : Invalid Native Object");
    if (argc == 0) {
        cobj->stop();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_updateParticleQuads, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_updateParticleQuads : Invalid Native Object");
    if (argc == 0) {
        cobj->updateParticleQuads();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndSpinVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndSpinVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndSpinVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setBlendAdditive, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setBlendAdditive : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setBlendAdditive : Error processing arguments");
        cobj->setBlendAdditive(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setLife, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setLife : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setLife : Error processing arguments");
        cobj->setLife(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setAngleVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setAngleVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setAngleVar : Error processing arguments");
        cobj->setAngleVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setRotationIsDir, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setRotationIsDir : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setRotationIsDir : Error processing arguments");
        cobj->setRotationIsDir(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_start, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_start : Invalid Native Object");
    if (argc == 0) {
        cobj->start();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndSizeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndSizeVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndSizeVar : Error processing arguments");
        cobj->setEndSizeVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setAngle : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setAngle : Error processing arguments");
        cobj->setAngle(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setBatchNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setBatchNode : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ParticleBatchNode* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setBatchNode : Error processing arguments");
        cobj->setBatchNode(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getTangentialAccelVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getTangentialAccelVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getTangentialAccelVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEmitterMode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEmitterMode : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getEmitterMode();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndSpinVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndSpinVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndSpinVar : Error processing arguments");
        cobj->setEndSpinVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_initWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_initWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_initWithFile : Error processing arguments");
        bool result = cobj->initWithFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getAngleVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getAngleVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getAngleVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartColor : Error processing arguments");
        cobj->setStartColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getRotatePerSecondVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getRotatePerSecondVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRotatePerSecondVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndSize : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndSize();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getLife, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getLife : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLife();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_isPaused, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_isPaused : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isPaused();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setSpeedVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setSpeedVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setSpeedVar : Error processing arguments");
        cobj->setSpeedVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setAutoRemoveOnFinish, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setAutoRemoveOnFinish : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setAutoRemoveOnFinish : Error processing arguments");
        cobj->setAutoRemoveOnFinish(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setGravity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setGravity : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setGravity : Error processing arguments");
        cobj->setGravity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_postStep, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_postStep : Invalid Native Object");
    if (argc == 0) {
        cobj->postStep();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEmissionRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEmissionRate : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEmissionRate : Error processing arguments");
        cobj->setEmissionRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndColorVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndColorVar : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4F& result = cobj->getEndColorVar();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getRotationIsDir, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getRotationIsDir : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->getRotationIsDir();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEmissionRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEmissionRate : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEmissionRate();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4F& result = cobj->getEndColor();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getLifeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getLifeVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getLifeVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartSizeVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartSizeVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartSizeVar : Error processing arguments");
        cobj->setStartSizeVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartRadius, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartRadius : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartRadius();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getParticleCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getParticleCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getParticleCount();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartRadiusVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartRadiusVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getStartRadiusVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartColorVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartColorVar : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartColorVar : Error processing arguments");
        cobj->setStartColorVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setEndSpin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setEndSpin : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setEndSpin : Error processing arguments");
        cobj->setEndSpin(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setRadialAccel, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setRadialAccel : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setRadialAccel : Error processing arguments");
        cobj->setRadialAccel(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_initWithDictionary, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ParticleSystem_initWithDictionary : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::ValueMap arg0;
            ok &= seval_to_ccvaluemap(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDictionary(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::ValueMap arg0;
            ok &= seval_to_ccvaluemap(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDictionary(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_isAutoRemoveOnFinish, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_isAutoRemoveOnFinish : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isAutoRemoveOnFinish();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getTotalParticles : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getTotalParticles();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setStartRadiusVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setStartRadiusVar : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setStartRadiusVar : Error processing arguments");
        cobj->setStartRadiusVar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getEndRadiusVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getEndRadiusVar : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEndRadiusVar();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_getStartColorVar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystem_getStartColorVar : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4F& result = cobj->getStartColorVar();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_create : Error processing arguments");
        auto result = cocos2d::ParticleSystem::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSystem_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystem_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSystem::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSystem_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSystem_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSystem_constructor, __jsb_cocos2dx_ParticleSystem_class, js_cocos2dx_ParticleSystem_finalize)
{
    cocos2d::ParticleSystem* cobj = new (std::nothrow) cocos2d::ParticleSystem();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ParticleSystem_ctor, __jsb_cocos2dx_ParticleSystem_class, js_cocos2dx_ParticleSystem_finalize)
{
    cocos2d::ParticleSystem* cobj = new (std::nothrow) cocos2d::ParticleSystem();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSystem_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSystem)", nativeThisObject);
    cocos2d::ParticleSystem* cobj = (cocos2d::ParticleSystem*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ParticleSystem(se::Object* obj)
{
    auto cls = se::Class::create("_ParticleSystem", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ParticleSystem_constructor);

    cls->defineFunction("getStartSizeVar", js_cocos2dx_ParticleSystem_getStartSizeVar);
    cls->defineFunction("getTexture", js_cocos2dx_ParticleSystem_getTexture);
    cls->defineFunction("isFull", js_cocos2dx_ParticleSystem_isFull);
    cls->defineFunction("getBatchNode", js_cocos2dx_ParticleSystem_getBatchNode);
    cls->defineFunction("getStartColor", js_cocos2dx_ParticleSystem_getStartColor);
    cls->defineFunction("getPositionType", js_cocos2dx_ParticleSystem_getPositionType);
    cls->defineFunction("setPosVar", js_cocos2dx_ParticleSystem_setPosVar);
    cls->defineFunction("getEndSpin", js_cocos2dx_ParticleSystem_getEndSpin);
    cls->defineFunction("setRotatePerSecondVar", js_cocos2dx_ParticleSystem_setRotatePerSecondVar);
    cls->defineFunction("getStartSpinVar", js_cocos2dx_ParticleSystem_getStartSpinVar);
    cls->defineFunction("getRadialAccelVar", js_cocos2dx_ParticleSystem_getRadialAccelVar);
    cls->defineFunction("getEndSizeVar", js_cocos2dx_ParticleSystem_getEndSizeVar);
    cls->defineFunction("setTangentialAccel", js_cocos2dx_ParticleSystem_setTangentialAccel);
    cls->defineFunction("getRadialAccel", js_cocos2dx_ParticleSystem_getRadialAccel);
    cls->defineFunction("setStartRadius", js_cocos2dx_ParticleSystem_setStartRadius);
    cls->defineFunction("setRotatePerSecond", js_cocos2dx_ParticleSystem_setRotatePerSecond);
    cls->defineFunction("setEndSize", js_cocos2dx_ParticleSystem_setEndSize);
    cls->defineFunction("getGravity", js_cocos2dx_ParticleSystem_getGravity);
    cls->defineFunction("resumeEmissions", js_cocos2dx_ParticleSystem_resumeEmissions);
    cls->defineFunction("getTangentialAccel", js_cocos2dx_ParticleSystem_getTangentialAccel);
    cls->defineFunction("setEndRadius", js_cocos2dx_ParticleSystem_setEndRadius);
    cls->defineFunction("getSpeed", js_cocos2dx_ParticleSystem_getSpeed);
    cls->defineFunction("pauseEmissions", js_cocos2dx_ParticleSystem_pauseEmissions);
    cls->defineFunction("getAngle", js_cocos2dx_ParticleSystem_getAngle);
    cls->defineFunction("setEndColor", js_cocos2dx_ParticleSystem_setEndColor);
    cls->defineFunction("setStartSpin", js_cocos2dx_ParticleSystem_setStartSpin);
    cls->defineFunction("setDuration", js_cocos2dx_ParticleSystem_setDuration);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleSystem_initWithTotalParticles);
    cls->defineFunction("addParticles", js_cocos2dx_ParticleSystem_addParticles);
    cls->defineFunction("setTexture", js_cocos2dx_ParticleSystem_setTexture);
    cls->defineFunction("getPosVar", js_cocos2dx_ParticleSystem_getPosVar);
    cls->defineFunction("updateWithNoTime", js_cocos2dx_ParticleSystem_updateWithNoTime);
    cls->defineFunction("isBlendAdditive", js_cocos2dx_ParticleSystem_isBlendAdditive);
    cls->defineFunction("getSpeedVar", js_cocos2dx_ParticleSystem_getSpeedVar);
    cls->defineFunction("setPositionType", js_cocos2dx_ParticleSystem_setPositionType);
    cls->defineFunction("stopSystem", js_cocos2dx_ParticleSystem_stopSystem);
    cls->defineFunction("getSourcePosition", js_cocos2dx_ParticleSystem_getSourcePosition);
    cls->defineFunction("setLifeVar", js_cocos2dx_ParticleSystem_setLifeVar);
    cls->defineFunction("setTotalParticles", js_cocos2dx_ParticleSystem_setTotalParticles);
    cls->defineFunction("setEndColorVar", js_cocos2dx_ParticleSystem_setEndColorVar);
    cls->defineFunction("getAtlasIndex", js_cocos2dx_ParticleSystem_getAtlasIndex);
    cls->defineFunction("getStartSize", js_cocos2dx_ParticleSystem_getStartSize);
    cls->defineFunction("setStartSpinVar", js_cocos2dx_ParticleSystem_setStartSpinVar);
    cls->defineFunction("resetSystem", js_cocos2dx_ParticleSystem_resetSystem);
    cls->defineFunction("setAtlasIndex", js_cocos2dx_ParticleSystem_setAtlasIndex);
    cls->defineFunction("setTangentialAccelVar", js_cocos2dx_ParticleSystem_setTangentialAccelVar);
    cls->defineFunction("setEndRadiusVar", js_cocos2dx_ParticleSystem_setEndRadiusVar);
    cls->defineFunction("getEndRadius", js_cocos2dx_ParticleSystem_getEndRadius);
    cls->defineFunction("isActive", js_cocos2dx_ParticleSystem_isActive);
    cls->defineFunction("setRadialAccelVar", js_cocos2dx_ParticleSystem_setRadialAccelVar);
    cls->defineFunction("setStartSize", js_cocos2dx_ParticleSystem_setStartSize);
    cls->defineFunction("setSpeed", js_cocos2dx_ParticleSystem_setSpeed);
    cls->defineFunction("getStartSpin", js_cocos2dx_ParticleSystem_getStartSpin);
    cls->defineFunction("getResourceFile", js_cocos2dx_ParticleSystem_getResourceFile);
    cls->defineFunction("getRotatePerSecond", js_cocos2dx_ParticleSystem_getRotatePerSecond);
    cls->defineFunction("setEmitterMode", js_cocos2dx_ParticleSystem_setEmitterMode);
    cls->defineFunction("getDuration", js_cocos2dx_ParticleSystem_getDuration);
    cls->defineFunction("setSourcePosition", js_cocos2dx_ParticleSystem_setSourcePosition);
    cls->defineFunction("stop", js_cocos2dx_ParticleSystem_stop);
    cls->defineFunction("updateParticleQuads", js_cocos2dx_ParticleSystem_updateParticleQuads);
    cls->defineFunction("getEndSpinVar", js_cocos2dx_ParticleSystem_getEndSpinVar);
    cls->defineFunction("setBlendAdditive", js_cocos2dx_ParticleSystem_setBlendAdditive);
    cls->defineFunction("setLife", js_cocos2dx_ParticleSystem_setLife);
    cls->defineFunction("setAngleVar", js_cocos2dx_ParticleSystem_setAngleVar);
    cls->defineFunction("setRotationIsDir", js_cocos2dx_ParticleSystem_setRotationIsDir);
    cls->defineFunction("start", js_cocos2dx_ParticleSystem_start);
    cls->defineFunction("setEndSizeVar", js_cocos2dx_ParticleSystem_setEndSizeVar);
    cls->defineFunction("setAngle", js_cocos2dx_ParticleSystem_setAngle);
    cls->defineFunction("setBatchNode", js_cocos2dx_ParticleSystem_setBatchNode);
    cls->defineFunction("getTangentialAccelVar", js_cocos2dx_ParticleSystem_getTangentialAccelVar);
    cls->defineFunction("getEmitterMode", js_cocos2dx_ParticleSystem_getEmitterMode);
    cls->defineFunction("setEndSpinVar", js_cocos2dx_ParticleSystem_setEndSpinVar);
    cls->defineFunction("initWithFile", js_cocos2dx_ParticleSystem_initWithFile);
    cls->defineFunction("getAngleVar", js_cocos2dx_ParticleSystem_getAngleVar);
    cls->defineFunction("setStartColor", js_cocos2dx_ParticleSystem_setStartColor);
    cls->defineFunction("getRotatePerSecondVar", js_cocos2dx_ParticleSystem_getRotatePerSecondVar);
    cls->defineFunction("getEndSize", js_cocos2dx_ParticleSystem_getEndSize);
    cls->defineFunction("getLife", js_cocos2dx_ParticleSystem_getLife);
    cls->defineFunction("isPaused", js_cocos2dx_ParticleSystem_isPaused);
    cls->defineFunction("setSpeedVar", js_cocos2dx_ParticleSystem_setSpeedVar);
    cls->defineFunction("setAutoRemoveOnFinish", js_cocos2dx_ParticleSystem_setAutoRemoveOnFinish);
    cls->defineFunction("setGravity", js_cocos2dx_ParticleSystem_setGravity);
    cls->defineFunction("postStep", js_cocos2dx_ParticleSystem_postStep);
    cls->defineFunction("setEmissionRate", js_cocos2dx_ParticleSystem_setEmissionRate);
    cls->defineFunction("getEndColorVar", js_cocos2dx_ParticleSystem_getEndColorVar);
    cls->defineFunction("getRotationIsDir", js_cocos2dx_ParticleSystem_getRotationIsDir);
    cls->defineFunction("getEmissionRate", js_cocos2dx_ParticleSystem_getEmissionRate);
    cls->defineFunction("getEndColor", js_cocos2dx_ParticleSystem_getEndColor);
    cls->defineFunction("getLifeVar", js_cocos2dx_ParticleSystem_getLifeVar);
    cls->defineFunction("setStartSizeVar", js_cocos2dx_ParticleSystem_setStartSizeVar);
    cls->defineFunction("getStartRadius", js_cocos2dx_ParticleSystem_getStartRadius);
    cls->defineFunction("getParticleCount", js_cocos2dx_ParticleSystem_getParticleCount);
    cls->defineFunction("getStartRadiusVar", js_cocos2dx_ParticleSystem_getStartRadiusVar);
    cls->defineFunction("getBlendFunc", js_cocos2dx_ParticleSystem_getBlendFunc);
    cls->defineFunction("setStartColorVar", js_cocos2dx_ParticleSystem_setStartColorVar);
    cls->defineFunction("setEndSpin", js_cocos2dx_ParticleSystem_setEndSpin);
    cls->defineFunction("setRadialAccel", js_cocos2dx_ParticleSystem_setRadialAccel);
    cls->defineFunction("initWithDictionary", js_cocos2dx_ParticleSystem_initWithDictionary);
    cls->defineFunction("isAutoRemoveOnFinish", js_cocos2dx_ParticleSystem_isAutoRemoveOnFinish);
    cls->defineFunction("getTotalParticles", js_cocos2dx_ParticleSystem_getTotalParticles);
    cls->defineFunction("setStartRadiusVar", js_cocos2dx_ParticleSystem_setStartRadiusVar);
    cls->defineFunction("setBlendFunc", js_cocos2dx_ParticleSystem_setBlendFunc);
    cls->defineFunction("getEndRadiusVar", js_cocos2dx_ParticleSystem_getEndRadiusVar);
    cls->defineFunction("getStartColorVar", js_cocos2dx_ParticleSystem_getStartColorVar);
    cls->defineFunction("ctor", js_cocos2dx_ParticleSystem_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSystem_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSystem_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSystem_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSystem_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSystem_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc._ParticleSystem.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ParticleSystemQuad_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSystemQuad_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_setDisplayFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystemQuad* cobj = (cocos2d::ParticleSystemQuad*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystemQuad_setDisplayFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystemQuad_setDisplayFrame : Error processing arguments");
        cobj->setDisplayFrame(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_setTextureWithRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystemQuad* cobj = (cocos2d::ParticleSystemQuad*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystemQuad_setTextureWithRect : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        cocos2d::Rect arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_Rect(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystemQuad_setTextureWithRect : Error processing arguments");
        cobj->setTextureWithRect(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_listenRendererRecreated, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSystemQuad* cobj = (cocos2d::ParticleSystemQuad*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSystemQuad_listenRendererRecreated : Invalid Native Object");
    if (argc == 1) {
        cocos2d::EventCustom* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystemQuad_listenRendererRecreated : Error processing arguments");
        cobj->listenRendererRecreated(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::ParticleSystemQuad* result = cocos2d::ParticleSystemQuad::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ParticleSystemQuad>((cocos2d::ParticleSystemQuad*)result, __jsb_cocos2dx_ParticleSystemQuad_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 0) {
            cocos2d::ParticleSystemQuad* result = cocos2d::ParticleSystemQuad::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ParticleSystemQuad>((cocos2d::ParticleSystemQuad*)result, __jsb_cocos2dx_ParticleSystemQuad_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            cocos2d::ValueMap arg0;
            ok &= seval_to_ccvaluemap(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::ParticleSystemQuad* result = cocos2d::ParticleSystemQuad::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::ParticleSystemQuad>((cocos2d::ParticleSystemQuad*)result, __jsb_cocos2dx_ParticleSystemQuad_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSystemQuad_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSystemQuad::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSystemQuad_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSystemQuad_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSystemQuad_constructor, __jsb_cocos2dx_ParticleSystemQuad_class, js_cocos2dx_ParticleSystemQuad_finalize)
{
    cocos2d::ParticleSystemQuad* cobj = new (std::nothrow) cocos2d::ParticleSystemQuad();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSystemQuad_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSystemQuad)", nativeThisObject);
    cocos2d::ParticleSystemQuad* cobj = (cocos2d::ParticleSystemQuad*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleSystemQuad(se::Object* obj)
{
    auto cls = se::Class::create("ParticleSystem", obj, __jsb_cocos2dx_ParticleSystem_proto, js_cocos2dx_ParticleSystemQuad_constructor);

    cls->defineFunction("setDisplayFrame", js_cocos2dx_ParticleSystemQuad_setDisplayFrame);
    cls->defineFunction("setTextureWithRect", js_cocos2dx_ParticleSystemQuad_setTextureWithRect);
    cls->defineFunction("listenRendererRecreated", js_cocos2dx_ParticleSystemQuad_listenRendererRecreated);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSystemQuad_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSystemQuad_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSystemQuad_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSystemQuad_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSystemQuad_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleFire_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleFire_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleFire_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleFire::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFire_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFire_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleFire_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleFire::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFire_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleFire_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleFire_constructor, __jsb_cocos2dx_ParticleFire_class, js_cocos2dx_ParticleFire_finalize)
{
    cocos2d::ParticleFire* cobj = new (std::nothrow) cocos2d::ParticleFire();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleFire_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleFire)", nativeThisObject);
    cocos2d::ParticleFire* cobj = (cocos2d::ParticleFire*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleFire(se::Object* obj)
{
    auto cls = se::Class::create("ParticleFire", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleFire_constructor);

    cls->defineStaticFunction("create", js_cocos2dx_ParticleFire_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleFire_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleFire_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleFire_proto = cls->getProto();
    __jsb_cocos2dx_ParticleFire_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleFireworks_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleFireworks_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleFireworks_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleFireworks* cobj = (cocos2d::ParticleFireworks*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleFireworks_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFireworks_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleFireworks* cobj = (cocos2d::ParticleFireworks*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleFireworks_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleFireworks_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFireworks_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleFireworks::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFireworks_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFireworks_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleFireworks_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleFireworks::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFireworks_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleFireworks_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleFireworks_constructor, __jsb_cocos2dx_ParticleFireworks_class, js_cocos2dx_ParticleFireworks_finalize)
{
    cocos2d::ParticleFireworks* cobj = new (std::nothrow) cocos2d::ParticleFireworks();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleFireworks_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleFireworks)", nativeThisObject);
    cocos2d::ParticleFireworks* cobj = (cocos2d::ParticleFireworks*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleFireworks(se::Object* obj)
{
    auto cls = se::Class::create("ParticleFireworks", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleFireworks_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleFireworks_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleFireworks_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleFireworks_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleFireworks_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleFireworks_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleFireworks_proto = cls->getProto();
    __jsb_cocos2dx_ParticleFireworks_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleSun_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSun_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSun_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSun* cobj = (cocos2d::ParticleSun*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSun_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSun_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSun* cobj = (cocos2d::ParticleSun*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSun_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSun_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSun_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleSun::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSun_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSun_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSun_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSun::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSun_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSun_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSun_constructor, __jsb_cocos2dx_ParticleSun_class, js_cocos2dx_ParticleSun_finalize)
{
    cocos2d::ParticleSun* cobj = new (std::nothrow) cocos2d::ParticleSun();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSun_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSun)", nativeThisObject);
    cocos2d::ParticleSun* cobj = (cocos2d::ParticleSun*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleSun(se::Object* obj)
{
    auto cls = se::Class::create("ParticleSun", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleSun_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleSun_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleSun_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSun_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSun_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSun_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSun_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSun_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleGalaxy_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleGalaxy_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleGalaxy_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleGalaxy* cobj = (cocos2d::ParticleGalaxy*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleGalaxy_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleGalaxy_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleGalaxy* cobj = (cocos2d::ParticleGalaxy*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleGalaxy_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleGalaxy_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleGalaxy_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleGalaxy::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleGalaxy_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleGalaxy_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleGalaxy_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleGalaxy::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleGalaxy_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleGalaxy_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleGalaxy_constructor, __jsb_cocos2dx_ParticleGalaxy_class, js_cocos2dx_ParticleGalaxy_finalize)
{
    cocos2d::ParticleGalaxy* cobj = new (std::nothrow) cocos2d::ParticleGalaxy();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleGalaxy_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleGalaxy)", nativeThisObject);
    cocos2d::ParticleGalaxy* cobj = (cocos2d::ParticleGalaxy*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleGalaxy(se::Object* obj)
{
    auto cls = se::Class::create("ParticleGalaxy", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleGalaxy_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleGalaxy_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleGalaxy_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleGalaxy_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleGalaxy_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleGalaxy_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleGalaxy_proto = cls->getProto();
    __jsb_cocos2dx_ParticleGalaxy_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleFlower_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleFlower_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleFlower_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleFlower* cobj = (cocos2d::ParticleFlower*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleFlower_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFlower_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleFlower* cobj = (cocos2d::ParticleFlower*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleFlower_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleFlower_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFlower_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleFlower::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFlower_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleFlower_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleFlower_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleFlower::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleFlower_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleFlower_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleFlower_constructor, __jsb_cocos2dx_ParticleFlower_class, js_cocos2dx_ParticleFlower_finalize)
{
    cocos2d::ParticleFlower* cobj = new (std::nothrow) cocos2d::ParticleFlower();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleFlower_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleFlower)", nativeThisObject);
    cocos2d::ParticleFlower* cobj = (cocos2d::ParticleFlower*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleFlower(se::Object* obj)
{
    auto cls = se::Class::create("ParticleFlower", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleFlower_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleFlower_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleFlower_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleFlower_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleFlower_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleFlower_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleFlower_proto = cls->getProto();
    __jsb_cocos2dx_ParticleFlower_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleMeteor_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleMeteor_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleMeteor_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleMeteor* cobj = (cocos2d::ParticleMeteor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleMeteor_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleMeteor_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleMeteor* cobj = (cocos2d::ParticleMeteor*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleMeteor_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleMeteor_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleMeteor_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleMeteor::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleMeteor_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleMeteor_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleMeteor_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleMeteor::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleMeteor_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleMeteor_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleMeteor_constructor, __jsb_cocos2dx_ParticleMeteor_class, js_cocos2dx_ParticleMeteor_finalize)
{
    cocos2d::ParticleMeteor* cobj = new (std::nothrow) cocos2d::ParticleMeteor();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleMeteor_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleMeteor)", nativeThisObject);
    cocos2d::ParticleMeteor* cobj = (cocos2d::ParticleMeteor*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleMeteor(se::Object* obj)
{
    auto cls = se::Class::create("ParticleMeteor", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleMeteor_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleMeteor_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleMeteor_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleMeteor_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleMeteor_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleMeteor_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleMeteor_proto = cls->getProto();
    __jsb_cocos2dx_ParticleMeteor_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleSpiral_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSpiral_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSpiral_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSpiral* cobj = (cocos2d::ParticleSpiral*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSpiral_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSpiral_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSpiral* cobj = (cocos2d::ParticleSpiral*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSpiral_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSpiral_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSpiral_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleSpiral::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSpiral_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSpiral_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSpiral_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSpiral::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSpiral_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSpiral_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSpiral_constructor, __jsb_cocos2dx_ParticleSpiral_class, js_cocos2dx_ParticleSpiral_finalize)
{
    cocos2d::ParticleSpiral* cobj = new (std::nothrow) cocos2d::ParticleSpiral();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSpiral_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSpiral)", nativeThisObject);
    cocos2d::ParticleSpiral* cobj = (cocos2d::ParticleSpiral*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleSpiral(se::Object* obj)
{
    auto cls = se::Class::create("ParticleSpiral", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleSpiral_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleSpiral_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleSpiral_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSpiral_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSpiral_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSpiral_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSpiral_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSpiral_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleExplosion_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleExplosion_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleExplosion_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleExplosion* cobj = (cocos2d::ParticleExplosion*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleExplosion_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleExplosion_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleExplosion* cobj = (cocos2d::ParticleExplosion*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleExplosion_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleExplosion_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleExplosion_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleExplosion::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleExplosion_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleExplosion_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleExplosion_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleExplosion::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleExplosion_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleExplosion_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleExplosion_constructor, __jsb_cocos2dx_ParticleExplosion_class, js_cocos2dx_ParticleExplosion_finalize)
{
    cocos2d::ParticleExplosion* cobj = new (std::nothrow) cocos2d::ParticleExplosion();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleExplosion_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleExplosion)", nativeThisObject);
    cocos2d::ParticleExplosion* cobj = (cocos2d::ParticleExplosion*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleExplosion(se::Object* obj)
{
    auto cls = se::Class::create("ParticleExplosion", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleExplosion_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleExplosion_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleExplosion_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleExplosion_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleExplosion_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleExplosion_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleExplosion_proto = cls->getProto();
    __jsb_cocos2dx_ParticleExplosion_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleSmoke_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSmoke_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSmoke_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSmoke* cobj = (cocos2d::ParticleSmoke*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSmoke_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSmoke_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSmoke* cobj = (cocos2d::ParticleSmoke*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSmoke_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSmoke_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSmoke_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleSmoke::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSmoke_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSmoke_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSmoke_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSmoke::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSmoke_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSmoke_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSmoke_constructor, __jsb_cocos2dx_ParticleSmoke_class, js_cocos2dx_ParticleSmoke_finalize)
{
    cocos2d::ParticleSmoke* cobj = new (std::nothrow) cocos2d::ParticleSmoke();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSmoke_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSmoke)", nativeThisObject);
    cocos2d::ParticleSmoke* cobj = (cocos2d::ParticleSmoke*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleSmoke(se::Object* obj)
{
    auto cls = se::Class::create("ParticleSmoke", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleSmoke_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleSmoke_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleSmoke_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSmoke_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSmoke_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSmoke_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSmoke_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSmoke_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleSnow_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleSnow_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleSnow_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSnow* cobj = (cocos2d::ParticleSnow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSnow_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSnow_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleSnow* cobj = (cocos2d::ParticleSnow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleSnow_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSnow_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSnow_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleSnow::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSnow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleSnow_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleSnow_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleSnow::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleSnow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleSnow_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleSnow_constructor, __jsb_cocos2dx_ParticleSnow_class, js_cocos2dx_ParticleSnow_finalize)
{
    cocos2d::ParticleSnow* cobj = new (std::nothrow) cocos2d::ParticleSnow();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleSnow_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleSnow)", nativeThisObject);
    cocos2d::ParticleSnow* cobj = (cocos2d::ParticleSnow*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleSnow(se::Object* obj)
{
    auto cls = se::Class::create("ParticleSnow", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleSnow_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleSnow_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleSnow_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleSnow_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleSnow_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleSnow_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleSnow_proto = cls->getProto();
    __jsb_cocos2dx_ParticleSnow_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ParticleRain_proto = nullptr;
se::Class* __jsb_cocos2dx_ParticleRain_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParticleRain_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleRain* cobj = (cocos2d::ParticleRain*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleRain_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleRain_initWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParticleRain* cobj = (cocos2d::ParticleRain*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParticleRain_initWithTotalParticles : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleRain_initWithTotalParticles : Error processing arguments");
        bool result = cobj->initWithTotalParticles(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleRain_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParticleRain::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleRain_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParticleRain_createWithTotalParticles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParticleRain_createWithTotalParticles : Error processing arguments");
        auto result = cocos2d::ParticleRain::createWithTotalParticles(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParticleRain_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParticleRain_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParticleRain_constructor, __jsb_cocos2dx_ParticleRain_class, js_cocos2dx_ParticleRain_finalize)
{
    cocos2d::ParticleRain* cobj = new (std::nothrow) cocos2d::ParticleRain();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParticleRain_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParticleRain)", nativeThisObject);
    cocos2d::ParticleRain* cobj = (cocos2d::ParticleRain*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ParticleRain(se::Object* obj)
{
    auto cls = se::Class::create("ParticleRain", obj, __jsb_cocos2dx_ParticleSystemQuad_proto, js_cocos2dx_ParticleRain_constructor);

    cls->defineFunction("init", js_cocos2dx_ParticleRain_init);
    cls->defineFunction("initWithTotalParticles", js_cocos2dx_ParticleRain_initWithTotalParticles);
    cls->defineStaticFunction("create", js_cocos2dx_ParticleRain_create);
    cls->defineStaticFunction("createWithTotalParticles", js_cocos2dx_ParticleRain_createWithTotalParticles);
    cls->defineFinalizedFunction(js_cocos2dx_ParticleRain_finalize);
    cls->install();

    __jsb_cocos2dx_ParticleRain_proto = cls->getProto();
    __jsb_cocos2dx_ParticleRain_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_ProgressTimer_proto = nullptr;
se::Class* __jsb_cocos2dx_ProgressTimer_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_initWithSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_initWithSprite : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_initWithSprite : Error processing arguments");
        bool result = cobj->initWithSprite(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_isReverseDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_isReverseDirection : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isReverseDirection();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setBarChangeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setBarChangeRate : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setBarChangeRate : Error processing arguments");
        cobj->setBarChangeRate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_getPercentage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_getPercentage : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getPercentage();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setSprite : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setSprite : Error processing arguments");
        cobj->setSprite(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_getType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_getType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_getSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_getSprite : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Sprite* result = cobj->getSprite();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Sprite>((cocos2d::Sprite*)result, __jsb_cocos2dx_Sprite_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setMidpoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setMidpoint : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setMidpoint : Error processing arguments");
        cobj->setMidpoint(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_getBarChangeRate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_getBarChangeRate : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getBarChangeRate();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setReverseDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setReverseDirection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setReverseDirection : Error processing arguments");
        cobj->setReverseDirection(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_getMidpoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_getMidpoint : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec2 result = cobj->getMidpoint();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setPercentage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setPercentage : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setPercentage : Error processing arguments");
        cobj->setPercentage(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_setType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProgressTimer_setType : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ProgressTimer::Type arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_setType : Error processing arguments");
        cobj->setType(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProgressTimer_create : Error processing arguments");
        auto result = cocos2d::ProgressTimer::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ProgressTimer_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ProgressTimer_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ProgressTimer_constructor, __jsb_cocos2dx_ProgressTimer_class, js_cocos2dx_ProgressTimer_finalize)
{
    cocos2d::ProgressTimer* cobj = new (std::nothrow) cocos2d::ProgressTimer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ProgressTimer_ctor, __jsb_cocos2dx_ProgressTimer_class, js_cocos2dx_ProgressTimer_finalize)
{
    cocos2d::ProgressTimer* cobj = new (std::nothrow) cocos2d::ProgressTimer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ProgressTimer_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ProgressTimer)", nativeThisObject);
    cocos2d::ProgressTimer* cobj = (cocos2d::ProgressTimer*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ProgressTimer(se::Object* obj)
{
    auto cls = se::Class::create("ProgressTimer", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ProgressTimer_constructor);

    cls->defineFunction("initWithSprite", js_cocos2dx_ProgressTimer_initWithSprite);
    cls->defineFunction("isReverseDirection", js_cocos2dx_ProgressTimer_isReverseDirection);
    cls->defineFunction("setBarChangeRate", js_cocos2dx_ProgressTimer_setBarChangeRate);
    cls->defineFunction("getPercentage", js_cocos2dx_ProgressTimer_getPercentage);
    cls->defineFunction("setSprite", js_cocos2dx_ProgressTimer_setSprite);
    cls->defineFunction("getType", js_cocos2dx_ProgressTimer_getType);
    cls->defineFunction("getSprite", js_cocos2dx_ProgressTimer_getSprite);
    cls->defineFunction("setMidpoint", js_cocos2dx_ProgressTimer_setMidpoint);
    cls->defineFunction("getBarChangeRate", js_cocos2dx_ProgressTimer_getBarChangeRate);
    cls->defineFunction("setReverseDirection", js_cocos2dx_ProgressTimer_setReverseDirection);
    cls->defineFunction("getMidpoint", js_cocos2dx_ProgressTimer_getMidpoint);
    cls->defineFunction("setPercentage", js_cocos2dx_ProgressTimer_setPercentage);
    cls->defineFunction("setType", js_cocos2dx_ProgressTimer_setType);
    cls->defineFunction("ctor", js_cocos2dx_ProgressTimer_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ProgressTimer_create);
    cls->defineFinalizedFunction(js_cocos2dx_ProgressTimer_finalize);
    cls->install();

    __jsb_cocos2dx_ProgressTimer_proto = cls->getProto();
    __jsb_cocos2dx_ProgressTimer_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ProgressTimer.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ProtectedNode_proto = nullptr;
se::Class* __jsb_cocos2dx_ProtectedNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_addProtectedChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ProtectedNode_addProtectedChild : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->addProtectedChild(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->addProtectedChild(arg0);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Node* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cobj->addProtectedChild(arg0, arg1, arg2);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_disableCascadeColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_disableCascadeColor : Invalid Native Object");
    if (argc == 0) {
        cobj->disableCascadeColor();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_removeProtectedChildByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_removeProtectedChildByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_removeProtectedChildByTag : Error processing arguments");
        cobj->removeProtectedChildByTag(arg0);
    }
    if (argc == 2) {
        int arg0 = 0;
        bool arg1;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_removeProtectedChildByTag : Error processing arguments");
        cobj->removeProtectedChildByTag(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_reorderProtectedChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_reorderProtectedChild : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_reorderProtectedChild : Error processing arguments");
        cobj->reorderProtectedChild(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup : Error processing arguments");
        cobj->removeAllProtectedChildrenWithCleanup(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_disableCascadeOpacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_disableCascadeOpacity : Invalid Native Object");
    if (argc == 0) {
        cobj->disableCascadeOpacity();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_sortAllProtectedChildren, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_sortAllProtectedChildren : Invalid Native Object");
    if (argc == 0) {
        cobj->sortAllProtectedChildren();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_getProtectedChildByTag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_getProtectedChildByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_getProtectedChildByTag : Error processing arguments");
        cocos2d::Node* result = cobj->getProtectedChildByTag(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Node>((cocos2d::Node*)result, __jsb_cocos2dx_Node_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_removeProtectedChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_removeProtectedChild : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_removeProtectedChild : Error processing arguments");
        cobj->removeProtectedChild(arg0);
    }
    if (argc == 2) {
        cocos2d::Node* arg0 = nullptr;
        bool arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ProtectedNode_removeProtectedChild : Error processing arguments");
        cobj->removeProtectedChild(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_removeAllProtectedChildren, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ProtectedNode_removeAllProtectedChildren : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllProtectedChildren();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ProtectedNode::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ProtectedNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ProtectedNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ProtectedNode_constructor, __jsb_cocos2dx_ProtectedNode_class, js_cocos2dx_ProtectedNode_finalize)
{
    cocos2d::ProtectedNode* cobj = new (std::nothrow) cocos2d::ProtectedNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ProtectedNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ProtectedNode)", nativeThisObject);
    cocos2d::ProtectedNode* cobj = (cocos2d::ProtectedNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_ProtectedNode(se::Object* obj)
{
    auto cls = se::Class::create("ProtectedNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ProtectedNode_constructor);

    cls->defineFunction("addProtectedChild", js_cocos2dx_ProtectedNode_addProtectedChild);
    cls->defineFunction("disableCascadeColor", js_cocos2dx_ProtectedNode_disableCascadeColor);
    cls->defineFunction("removeProtectedChildByTag", js_cocos2dx_ProtectedNode_removeProtectedChildByTag);
    cls->defineFunction("reorderProtectedChild", js_cocos2dx_ProtectedNode_reorderProtectedChild);
    cls->defineFunction("removeAllProtectedChildrenWithCleanup", js_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup);
    cls->defineFunction("disableCascadeOpacity", js_cocos2dx_ProtectedNode_disableCascadeOpacity);
    cls->defineFunction("sortAllProtectedChildren", js_cocos2dx_ProtectedNode_sortAllProtectedChildren);
    cls->defineFunction("getProtectedChildByTag", js_cocos2dx_ProtectedNode_getProtectedChildByTag);
    cls->defineFunction("removeProtectedChild", js_cocos2dx_ProtectedNode_removeProtectedChild);
    cls->defineFunction("removeAllProtectedChildren", js_cocos2dx_ProtectedNode_removeAllProtectedChildren);
    cls->defineStaticFunction("create", js_cocos2dx_ProtectedNode_create);
    cls->defineFinalizedFunction(js_cocos2dx_ProtectedNode_finalize);
    cls->install();

    __jsb_cocos2dx_ProtectedNode_proto = cls->getProto();
    __jsb_cocos2dx_ProtectedNode_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Sprite_proto = nullptr;
se::Class* __jsb_cocos2dx_Sprite_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Sprite_setSpriteFrame : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::SpriteFrame* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setSpriteFrame(arg0);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setSpriteFrame(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Sprite_setTexture : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setTexture(arg0);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setTexture(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setFlippedY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setFlippedY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setFlippedY : Error processing arguments");
        cobj->setFlippedY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setFlippedX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setFlippedX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setFlippedX : Error processing arguments");
        cobj->setFlippedX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setRotationSkewX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setRotationSkewX : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setRotationSkewX : Error processing arguments");
        cobj->setRotationSkewX(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setRotationSkewY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setRotationSkewY : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setRotationSkewY : Error processing arguments");
        cobj->setRotationSkewY(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getResourceType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getResourceType : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getResourceType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setDisplayFrameWithAnimationName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setDisplayFrameWithAnimationName : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        ssize_t arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setDisplayFrameWithAnimationName : Error processing arguments");
        cobj->setDisplayFrameWithAnimationName(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getBatchNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getBatchNode : Invalid Native Object");
    if (argc == 0) {
        cocos2d::SpriteBatchNode* result = cobj->getBatchNode();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteBatchNode>((cocos2d::SpriteBatchNode*)result, __jsb_cocos2dx_SpriteBatchNode_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getOffsetPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getOffsetPosition : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getOffsetPosition();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getCenterRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getCenterRect : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getCenterRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_removeAllChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_removeAllChildrenWithCleanup : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_removeAllChildrenWithCleanup : Error processing arguments");
        cobj->removeAllChildrenWithCleanup(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setCenterRectNormalized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setCenterRectNormalized : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setCenterRectNormalized : Error processing arguments");
        cobj->setCenterRectNormalized(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isStretchEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isStretchEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isStretchEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setTextureRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Sprite_setTextureRect : Invalid Native Object");

    do {
        if (argc == 3) {
            cocos2d::Rect arg0;
            ok &= seval_to_Rect(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool arg1;
            ok &= seval_to_boolean(args[1], &arg1);
            cocos2d::Size arg2;
            ok &= seval_to_Size(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->setTextureRect(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Rect arg0;
            ok &= seval_to_Rect(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setTextureRect(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_initWithSpriteFrameName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_initWithSpriteFrameName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_initWithSpriteFrameName : Error processing arguments");
        bool result = cobj->initWithSpriteFrameName(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setStretchEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setStretchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setStretchEnabled : Error processing arguments");
        cobj->setStretchEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isFrameDisplayed, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isFrameDisplayed : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_isFrameDisplayed : Error processing arguments");
        bool result = cobj->isFrameDisplayed(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getAtlasIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getAtlasIndex : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getAtlasIndex();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setBatchNode, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setBatchNode : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteBatchNode* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setBatchNode : Error processing arguments");
        cobj->setBatchNode(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setCenterRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setCenterRect : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setCenterRect : Error processing arguments");
        cobj->setCenterRect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setTextureAtlas, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setTextureAtlas : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextureAtlas* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setTextureAtlas : Error processing arguments");
        cobj->setTextureAtlas(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getSpriteFrame : Invalid Native Object");
    if (argc == 0) {
        cocos2d::SpriteFrame* result = cobj->getSpriteFrame();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getResourceName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getResourceName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getResourceName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isDirty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isDirty : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isDirty();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getCenterRectNormalized, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getCenterRectNormalized : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Rect result = cobj->getCenterRectNormalized();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setAtlasIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setAtlasIndex : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= seval_to_ssize(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setAtlasIndex : Error processing arguments");
        cobj->setAtlasIndex(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_initWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Sprite_initWithTexture : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTexture(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithTexture(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Texture2D* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            bool result = cobj->initWithTexture(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setDirty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setDirty : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setDirty : Error processing arguments");
        cobj->setDirty(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isTextureRectRotated, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isTextureRectRotated : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isTextureRectRotated();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_getTextureRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_getTextureRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getTextureRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_initWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Sprite_initWithFile : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFile(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFile(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_initWithSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_initWithSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_initWithSpriteFrame : Error processing arguments");
        bool result = cobj->initWithSpriteFrame(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isFlippedX, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isFlippedX : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isFlippedX();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_isFlippedY, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_isFlippedY : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isFlippedY();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Sprite_setVertexRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Sprite_setVertexRect : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Sprite_setVertexRect : Error processing arguments");
        cobj->setVertexRect(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Sprite_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Sprite_constructor, __jsb_cocos2dx_Sprite_class, js_cocos2dx_Sprite_finalize)
{
    cocos2d::Sprite* cobj = new (std::nothrow) cocos2d::Sprite();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Sprite_ctor, __jsb_cocos2dx_Sprite_class, js_cocos2dx_Sprite_finalize)
{
    cocos2d::Sprite* cobj = new (std::nothrow) cocos2d::Sprite();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Sprite_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Sprite)", nativeThisObject);
    cocos2d::Sprite* cobj = (cocos2d::Sprite*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Sprite(se::Object* obj)
{
    auto cls = se::Class::create("Sprite", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_Sprite_constructor);

    cls->defineFunction("setSpriteFrame", js_cocos2dx_Sprite_setSpriteFrame);
    cls->defineFunction("setTexture", js_cocos2dx_Sprite_setTexture);
    cls->defineFunction("getTexture", js_cocos2dx_Sprite_getTexture);
    cls->defineFunction("setFlippedY", js_cocos2dx_Sprite_setFlippedY);
    cls->defineFunction("setFlippedX", js_cocos2dx_Sprite_setFlippedX);
    cls->defineFunction("setRotationSkewX", js_cocos2dx_Sprite_setRotationSkewX);
    cls->defineFunction("setRotationSkewY", js_cocos2dx_Sprite_setRotationSkewY);
    cls->defineFunction("getResourceType", js_cocos2dx_Sprite_getResourceType);
    cls->defineFunction("setDisplayFrameWithAnimationName", js_cocos2dx_Sprite_setDisplayFrameWithAnimationName);
    cls->defineFunction("getBatchNode", js_cocos2dx_Sprite_getBatchNode);
    cls->defineFunction("getOffsetPosition", js_cocos2dx_Sprite_getOffsetPosition);
    cls->defineFunction("getCenterRect", js_cocos2dx_Sprite_getCenterRect);
    cls->defineFunction("removeAllChildrenWithCleanup", js_cocos2dx_Sprite_removeAllChildrenWithCleanup);
    cls->defineFunction("setCenterRectNormalized", js_cocos2dx_Sprite_setCenterRectNormalized);
    cls->defineFunction("isStretchEnabled", js_cocos2dx_Sprite_isStretchEnabled);
    cls->defineFunction("setTextureRect", js_cocos2dx_Sprite_setTextureRect);
    cls->defineFunction("initWithSpriteFrameName", js_cocos2dx_Sprite_initWithSpriteFrameName);
    cls->defineFunction("setStretchEnabled", js_cocos2dx_Sprite_setStretchEnabled);
    cls->defineFunction("isFrameDisplayed", js_cocos2dx_Sprite_isFrameDisplayed);
    cls->defineFunction("getAtlasIndex", js_cocos2dx_Sprite_getAtlasIndex);
    cls->defineFunction("setBatchNode", js_cocos2dx_Sprite_setBatchNode);
    cls->defineFunction("getBlendFunc", js_cocos2dx_Sprite_getBlendFunc);
    cls->defineFunction("setCenterRect", js_cocos2dx_Sprite_setCenterRect);
    cls->defineFunction("setTextureAtlas", js_cocos2dx_Sprite_setTextureAtlas);
    cls->defineFunction("getSpriteFrame", js_cocos2dx_Sprite_getSpriteFrame);
    cls->defineFunction("getResourceName", js_cocos2dx_Sprite_getResourceName);
    cls->defineFunction("isDirty", js_cocos2dx_Sprite_isDirty);
    cls->defineFunction("getCenterRectNormalized", js_cocos2dx_Sprite_getCenterRectNormalized);
    cls->defineFunction("setAtlasIndex", js_cocos2dx_Sprite_setAtlasIndex);
    cls->defineFunction("initWithTexture", js_cocos2dx_Sprite_initWithTexture);
    cls->defineFunction("setDirty", js_cocos2dx_Sprite_setDirty);
    cls->defineFunction("isTextureRectRotated", js_cocos2dx_Sprite_isTextureRectRotated);
    cls->defineFunction("getTextureRect", js_cocos2dx_Sprite_getTextureRect);
    cls->defineFunction("initWithFile", js_cocos2dx_Sprite_initWithFile);
    cls->defineFunction("setBlendFunc", js_cocos2dx_Sprite_setBlendFunc);
    cls->defineFunction("initWithSpriteFrame", js_cocos2dx_Sprite_initWithSpriteFrame);
    cls->defineFunction("isFlippedX", js_cocos2dx_Sprite_isFlippedX);
    cls->defineFunction("isFlippedY", js_cocos2dx_Sprite_isFlippedY);
    cls->defineFunction("setVertexRect", js_cocos2dx_Sprite_setVertexRect);
    cls->defineFunction("ctor", js_cocos2dx_Sprite_ctor);
    cls->defineFinalizedFunction(js_cocos2dx_Sprite_finalize);
    cls->install();

    __jsb_cocos2dx_Sprite_proto = cls->getProto();
    __jsb_cocos2dx_Sprite_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Sprite.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_RenderTexture_proto = nullptr;
se::Class* __jsb_cocos2dx_RenderTexture_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setVirtualViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setVirtualViewport : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Vec2 arg0;
        cocos2d::Rect arg1;
        cocos2d::Rect arg2;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_Rect(args[1], &arg1);
        ok &= seval_to_Rect(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setVirtualViewport : Error processing arguments");
        cobj->setVirtualViewport(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_clearStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_clearStencil : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_clearStencil : Error processing arguments");
        cobj->clearStencil(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_getClearDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_getClearDepth : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getClearDepth();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_getClearStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_getClearStencil : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getClearStencil();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_end, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_end : Invalid Native Object");
    if (argc == 0) {
        cobj->end();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setClearStencil, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setClearStencil : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setClearStencil : Error processing arguments");
        cobj->setClearStencil(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setSprite : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setSprite : Error processing arguments");
        cobj->setSprite(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_getSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_getSprite : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Sprite* result = cobj->getSprite();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Sprite>((cocos2d::Sprite*)result, __jsb_cocos2dx_Sprite_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_isAutoDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_isAutoDraw : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isAutoDraw();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setKeepMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setKeepMatrix : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setKeepMatrix : Error processing arguments");
        cobj->setKeepMatrix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setClearFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setClearFlags : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setClearFlags : Error processing arguments");
        cobj->setClearFlags(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_begin, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_begin : Invalid Native Object");
    if (argc == 0) {
        cobj->begin();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setAutoDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setAutoDraw : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setAutoDraw : Error processing arguments");
        cobj->setAutoDraw(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setClearColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setClearColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setClearColor : Error processing arguments");
        cobj->setClearColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_beginWithClear, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_RenderTexture_beginWithClear : Invalid Native Object");

    do {
        if (argc == 5) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4);
        }
    } while(0);

    do {
        if (argc == 4) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3);
        }
    } while(0);

    do {
        if (argc == 6) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            float arg1 = 0;
            ok &= seval_to_float(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            float arg3 = 0;
            ok &= seval_to_float(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            int arg5 = 0;
            ok &= seval_to_int32(args[5], (int32_t *)&arg5);
            if (!ok) { ok = true; break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4, arg5);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_clearDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_clearDepth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_clearDepth : Error processing arguments");
        cobj->clearDepth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_getClearColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_getClearColor : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4F& result = cobj->getClearColor();
        se::Value jsret;
        ok &= Color4F_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_clear, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_clear : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_clear : Error processing arguments");
        cobj->clear(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_getClearFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_getClearFlags : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getClearFlags();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_newImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_newImage : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Image* result = cobj->newImage();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Image>((cocos2d::Image*)result, __jsb_cocos2dx_Image_class, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_newImage : Error processing arguments");
        cocos2d::Image* result = cobj->newImage(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Image>((cocos2d::Image*)result, __jsb_cocos2dx_Image_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_setClearDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderTexture_setClearDepth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderTexture_setClearDepth : Error processing arguments");
        cobj->setClearDepth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_initWithWidthAndHeight, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_RenderTexture_initWithWidthAndHeight : Invalid Native Object");

    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithWidthAndHeight(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithWidthAndHeight(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderTexture_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::RenderTexture* result = cocos2d::RenderTexture::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RenderTexture>((cocos2d::RenderTexture*)result, __jsb_cocos2dx_RenderTexture_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= seval_to_uint32(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::RenderTexture* result = cocos2d::RenderTexture::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RenderTexture>((cocos2d::RenderTexture*)result, __jsb_cocos2dx_RenderTexture_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= seval_to_int32(args[1], (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cocos2d::RenderTexture* result = cocos2d::RenderTexture::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::RenderTexture>((cocos2d::RenderTexture*)result, __jsb_cocos2dx_RenderTexture_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_RenderTexture_finalize)

SE_CTOR_BEGIN(js_cocos2dx_RenderTexture_constructor, __jsb_cocos2dx_RenderTexture_class, js_cocos2dx_RenderTexture_finalize)
{
    cocos2d::RenderTexture* cobj = new (std::nothrow) cocos2d::RenderTexture();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_RenderTexture_ctor, __jsb_cocos2dx_RenderTexture_class, js_cocos2dx_RenderTexture_finalize)
{
    cocos2d::RenderTexture* cobj = new (std::nothrow) cocos2d::RenderTexture();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_RenderTexture_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::RenderTexture)", nativeThisObject);
    cocos2d::RenderTexture* cobj = (cocos2d::RenderTexture*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_RenderTexture(se::Object* obj)
{
    auto cls = se::Class::create("RenderTexture", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_RenderTexture_constructor);

    cls->defineFunction("setVirtualViewport", js_cocos2dx_RenderTexture_setVirtualViewport);
    cls->defineFunction("clearStencil", js_cocos2dx_RenderTexture_clearStencil);
    cls->defineFunction("getClearDepth", js_cocos2dx_RenderTexture_getClearDepth);
    cls->defineFunction("getClearStencil", js_cocos2dx_RenderTexture_getClearStencil);
    cls->defineFunction("end", js_cocos2dx_RenderTexture_end);
    cls->defineFunction("setClearStencil", js_cocos2dx_RenderTexture_setClearStencil);
    cls->defineFunction("setSprite", js_cocos2dx_RenderTexture_setSprite);
    cls->defineFunction("getSprite", js_cocos2dx_RenderTexture_getSprite);
    cls->defineFunction("isAutoDraw", js_cocos2dx_RenderTexture_isAutoDraw);
    cls->defineFunction("setKeepMatrix", js_cocos2dx_RenderTexture_setKeepMatrix);
    cls->defineFunction("setClearFlags", js_cocos2dx_RenderTexture_setClearFlags);
    cls->defineFunction("begin", js_cocos2dx_RenderTexture_begin);
    cls->defineFunction("setAutoDraw", js_cocos2dx_RenderTexture_setAutoDraw);
    cls->defineFunction("setClearColor", js_cocos2dx_RenderTexture_setClearColor);
    cls->defineFunction("beginWithClear", js_cocos2dx_RenderTexture_beginWithClear);
    cls->defineFunction("clearDepth", js_cocos2dx_RenderTexture_clearDepth);
    cls->defineFunction("getClearColor", js_cocos2dx_RenderTexture_getClearColor);
    cls->defineFunction("clear", js_cocos2dx_RenderTexture_clear);
    cls->defineFunction("getClearFlags", js_cocos2dx_RenderTexture_getClearFlags);
    cls->defineFunction("newImage", js_cocos2dx_RenderTexture_newImage);
    cls->defineFunction("setClearDepth", js_cocos2dx_RenderTexture_setClearDepth);
    cls->defineFunction("initWithWidthAndHeight", js_cocos2dx_RenderTexture_initWithWidthAndHeight);
    cls->defineFunction("ctor", js_cocos2dx_RenderTexture_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_RenderTexture_create);
    cls->defineFinalizedFunction(js_cocos2dx_RenderTexture_finalize);
    cls->install();

    __jsb_cocos2dx_RenderTexture_proto = cls->getProto();
    __jsb_cocos2dx_RenderTexture_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.RenderTexture.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionEaseScene_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionEaseScene_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionEaseScene_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionEaseScene* cobj = (cocos2d::TransitionEaseScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionEaseScene_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionEaseScene_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_TransitionEaseScene(se::Object* obj)
{
    auto cls = se::Class::create("TransitionEaseScene", obj, nullptr, nullptr);

    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionEaseScene_easeActionWithAction);
    cls->install();

    __jsb_cocos2dx_TransitionEaseScene_proto = cls->getProto();
    __jsb_cocos2dx_TransitionEaseScene_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TransitionScene_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionScene_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_getInScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionScene_getInScene : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Scene* result = cobj->getInScene();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Scene>((cocos2d::Scene*)result, __jsb_cocos2dx_Scene_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_finish, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionScene_finish : Invalid Native Object");
    if (argc == 0) {
        cobj->finish();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionScene_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionScene_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_getDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionScene_getDuration : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getDuration();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_hideOutShowIn, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionScene_hideOutShowIn : Invalid Native Object");
    if (argc == 0) {
        cobj->hideOutShowIn();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionScene_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionScene_create : Error processing arguments");
        auto result = cocos2d::TransitionScene::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionScene_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionScene_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionScene_constructor, __jsb_cocos2dx_TransitionScene_class, js_cocos2dx_TransitionScene_finalize)
{
    cocos2d::TransitionScene* cobj = new (std::nothrow) cocos2d::TransitionScene();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionScene_ctor, __jsb_cocos2dx_TransitionScene_class, js_cocos2dx_TransitionScene_finalize)
{
    cocos2d::TransitionScene* cobj = new (std::nothrow) cocos2d::TransitionScene();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionScene_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionScene)", nativeThisObject);
    cocos2d::TransitionScene* cobj = (cocos2d::TransitionScene*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionScene(se::Object* obj)
{
    auto cls = se::Class::create("TransitionScene", obj, __jsb_cocos2dx_Scene_proto, js_cocos2dx_TransitionScene_constructor);

    cls->defineFunction("getInScene", js_cocos2dx_TransitionScene_getInScene);
    cls->defineFunction("finish", js_cocos2dx_TransitionScene_finish);
    cls->defineFunction("initWithDuration", js_cocos2dx_TransitionScene_initWithDuration);
    cls->defineFunction("getDuration", js_cocos2dx_TransitionScene_getDuration);
    cls->defineFunction("hideOutShowIn", js_cocos2dx_TransitionScene_hideOutShowIn);
    cls->defineFunction("ctor", js_cocos2dx_TransitionScene_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionScene_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionScene_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionScene_proto = cls->getProto();
    __jsb_cocos2dx_TransitionScene_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionScene.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSceneOriented_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSceneOriented_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSceneOriented_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionSceneOriented* cobj = (cocos2d::TransitionSceneOriented*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionSceneOriented_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        cocos2d::TransitionScene::Orientation arg2;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSceneOriented_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionSceneOriented_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        cocos2d::TransitionScene::Orientation arg2;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSceneOriented_create : Error processing arguments");
        auto result = cocos2d::TransitionSceneOriented::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSceneOriented_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSceneOriented_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSceneOriented_constructor, __jsb_cocos2dx_TransitionSceneOriented_class, js_cocos2dx_TransitionSceneOriented_finalize)
{
    cocos2d::TransitionSceneOriented* cobj = new (std::nothrow) cocos2d::TransitionSceneOriented();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSceneOriented_ctor, __jsb_cocos2dx_TransitionSceneOriented_class, js_cocos2dx_TransitionSceneOriented_finalize)
{
    cocos2d::TransitionSceneOriented* cobj = new (std::nothrow) cocos2d::TransitionSceneOriented();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSceneOriented_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSceneOriented)", nativeThisObject);
    cocos2d::TransitionSceneOriented* cobj = (cocos2d::TransitionSceneOriented*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSceneOriented(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSceneOriented", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionSceneOriented_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_TransitionSceneOriented_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_TransitionSceneOriented_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSceneOriented_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSceneOriented_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSceneOriented_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSceneOriented_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSceneOriented.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionRotoZoom_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionRotoZoom_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionRotoZoom_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionRotoZoom_create : Error processing arguments");
        auto result = cocos2d::TransitionRotoZoom::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionRotoZoom_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionRotoZoom_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionRotoZoom_constructor, __jsb_cocos2dx_TransitionRotoZoom_class, js_cocos2dx_TransitionRotoZoom_finalize)
{
    cocos2d::TransitionRotoZoom* cobj = new (std::nothrow) cocos2d::TransitionRotoZoom();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionRotoZoom_ctor, __jsb_cocos2dx_TransitionRotoZoom_class, js_cocos2dx_TransitionRotoZoom_finalize)
{
    cocos2d::TransitionRotoZoom* cobj = new (std::nothrow) cocos2d::TransitionRotoZoom();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionRotoZoom_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionRotoZoom)", nativeThisObject);
    cocos2d::TransitionRotoZoom* cobj = (cocos2d::TransitionRotoZoom*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionRotoZoom(se::Object* obj)
{
    auto cls = se::Class::create("TransitionRotoZoom", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionRotoZoom_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionRotoZoom_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionRotoZoom_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionRotoZoom_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionRotoZoom_proto = cls->getProto();
    __jsb_cocos2dx_TransitionRotoZoom_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionRotoZoom.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionJumpZoom_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionJumpZoom_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionJumpZoom_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionJumpZoom_create : Error processing arguments");
        auto result = cocos2d::TransitionJumpZoom::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionJumpZoom_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionJumpZoom_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionJumpZoom_constructor, __jsb_cocos2dx_TransitionJumpZoom_class, js_cocos2dx_TransitionJumpZoom_finalize)
{
    cocos2d::TransitionJumpZoom* cobj = new (std::nothrow) cocos2d::TransitionJumpZoom();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionJumpZoom_ctor, __jsb_cocos2dx_TransitionJumpZoom_class, js_cocos2dx_TransitionJumpZoom_finalize)
{
    cocos2d::TransitionJumpZoom* cobj = new (std::nothrow) cocos2d::TransitionJumpZoom();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionJumpZoom_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionJumpZoom)", nativeThisObject);
    cocos2d::TransitionJumpZoom* cobj = (cocos2d::TransitionJumpZoom*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionJumpZoom(se::Object* obj)
{
    auto cls = se::Class::create("TransitionJumpZoom", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionJumpZoom_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionJumpZoom_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionJumpZoom_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionJumpZoom_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionJumpZoom_proto = cls->getProto();
    __jsb_cocos2dx_TransitionJumpZoom_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionJumpZoom.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionMoveInL_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionMoveInL_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInL_action, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionMoveInL* cobj = (cocos2d::TransitionMoveInL*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionMoveInL_action : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->action();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInL_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionMoveInL* cobj = (cocos2d::TransitionMoveInL*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionMoveInL_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionMoveInL_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInL_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionMoveInL_create : Error processing arguments");
        auto result = cocos2d::TransitionMoveInL::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionMoveInL_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionMoveInL_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionMoveInL_constructor, __jsb_cocos2dx_TransitionMoveInL_class, js_cocos2dx_TransitionMoveInL_finalize)
{
    cocos2d::TransitionMoveInL* cobj = new (std::nothrow) cocos2d::TransitionMoveInL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionMoveInL_ctor, __jsb_cocos2dx_TransitionMoveInL_class, js_cocos2dx_TransitionMoveInL_finalize)
{
    cocos2d::TransitionMoveInL* cobj = new (std::nothrow) cocos2d::TransitionMoveInL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInL_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionMoveInL)", nativeThisObject);
    cocos2d::TransitionMoveInL* cobj = (cocos2d::TransitionMoveInL*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionMoveInL(se::Object* obj)
{
    auto cls = se::Class::create("TransitionMoveInL", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionMoveInL_constructor);

    cls->defineFunction("action", js_cocos2dx_TransitionMoveInL_action);
    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionMoveInL_easeActionWithAction);
    cls->defineFunction("ctor", js_cocos2dx_TransitionMoveInL_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionMoveInL_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionMoveInL_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionMoveInL_proto = cls->getProto();
    __jsb_cocos2dx_TransitionMoveInL_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionMoveInL.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionMoveInR_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionMoveInR_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInR_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionMoveInR_create : Error processing arguments");
        auto result = cocos2d::TransitionMoveInR::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionMoveInR_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionMoveInR_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionMoveInR_constructor, __jsb_cocos2dx_TransitionMoveInR_class, js_cocos2dx_TransitionMoveInR_finalize)
{
    cocos2d::TransitionMoveInR* cobj = new (std::nothrow) cocos2d::TransitionMoveInR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionMoveInR_ctor, __jsb_cocos2dx_TransitionMoveInR_class, js_cocos2dx_TransitionMoveInR_finalize)
{
    cocos2d::TransitionMoveInR* cobj = new (std::nothrow) cocos2d::TransitionMoveInR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInR_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionMoveInR)", nativeThisObject);
    cocos2d::TransitionMoveInR* cobj = (cocos2d::TransitionMoveInR*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionMoveInR(se::Object* obj)
{
    auto cls = se::Class::create("TransitionMoveInR", obj, __jsb_cocos2dx_TransitionMoveInL_proto, js_cocos2dx_TransitionMoveInR_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionMoveInR_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionMoveInR_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionMoveInR_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionMoveInR_proto = cls->getProto();
    __jsb_cocos2dx_TransitionMoveInR_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionMoveInR.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionMoveInT_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionMoveInT_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInT_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionMoveInT_create : Error processing arguments");
        auto result = cocos2d::TransitionMoveInT::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionMoveInT_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionMoveInT_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionMoveInT_constructor, __jsb_cocos2dx_TransitionMoveInT_class, js_cocos2dx_TransitionMoveInT_finalize)
{
    cocos2d::TransitionMoveInT* cobj = new (std::nothrow) cocos2d::TransitionMoveInT();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionMoveInT_ctor, __jsb_cocos2dx_TransitionMoveInT_class, js_cocos2dx_TransitionMoveInT_finalize)
{
    cocos2d::TransitionMoveInT* cobj = new (std::nothrow) cocos2d::TransitionMoveInT();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInT_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionMoveInT)", nativeThisObject);
    cocos2d::TransitionMoveInT* cobj = (cocos2d::TransitionMoveInT*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionMoveInT(se::Object* obj)
{
    auto cls = se::Class::create("TransitionMoveInT", obj, __jsb_cocos2dx_TransitionMoveInL_proto, js_cocos2dx_TransitionMoveInT_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionMoveInT_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionMoveInT_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionMoveInT_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionMoveInT_proto = cls->getProto();
    __jsb_cocos2dx_TransitionMoveInT_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionMoveInT.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionMoveInB_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionMoveInB_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInB_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionMoveInB_create : Error processing arguments");
        auto result = cocos2d::TransitionMoveInB::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionMoveInB_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionMoveInB_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionMoveInB_constructor, __jsb_cocos2dx_TransitionMoveInB_class, js_cocos2dx_TransitionMoveInB_finalize)
{
    cocos2d::TransitionMoveInB* cobj = new (std::nothrow) cocos2d::TransitionMoveInB();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionMoveInB_ctor, __jsb_cocos2dx_TransitionMoveInB_class, js_cocos2dx_TransitionMoveInB_finalize)
{
    cocos2d::TransitionMoveInB* cobj = new (std::nothrow) cocos2d::TransitionMoveInB();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionMoveInB_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionMoveInB)", nativeThisObject);
    cocos2d::TransitionMoveInB* cobj = (cocos2d::TransitionMoveInB*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionMoveInB(se::Object* obj)
{
    auto cls = se::Class::create("TransitionMoveInB", obj, __jsb_cocos2dx_TransitionMoveInL_proto, js_cocos2dx_TransitionMoveInB_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionMoveInB_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionMoveInB_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionMoveInB_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionMoveInB_proto = cls->getProto();
    __jsb_cocos2dx_TransitionMoveInB_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionMoveInB.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSlideInL_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSlideInL_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInL_action, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionSlideInL* cobj = (cocos2d::TransitionSlideInL*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionSlideInL_action : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->action();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInL_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionSlideInL* cobj = (cocos2d::TransitionSlideInL*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionSlideInL_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSlideInL_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInL_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSlideInL_create : Error processing arguments");
        auto result = cocos2d::TransitionSlideInL::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSlideInL_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSlideInL_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSlideInL_constructor, __jsb_cocos2dx_TransitionSlideInL_class, js_cocos2dx_TransitionSlideInL_finalize)
{
    cocos2d::TransitionSlideInL* cobj = new (std::nothrow) cocos2d::TransitionSlideInL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSlideInL_ctor, __jsb_cocos2dx_TransitionSlideInL_class, js_cocos2dx_TransitionSlideInL_finalize)
{
    cocos2d::TransitionSlideInL* cobj = new (std::nothrow) cocos2d::TransitionSlideInL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInL_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSlideInL)", nativeThisObject);
    cocos2d::TransitionSlideInL* cobj = (cocos2d::TransitionSlideInL*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSlideInL(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSlideInL", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionSlideInL_constructor);

    cls->defineFunction("action", js_cocos2dx_TransitionSlideInL_action);
    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionSlideInL_easeActionWithAction);
    cls->defineFunction("ctor", js_cocos2dx_TransitionSlideInL_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSlideInL_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSlideInL_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSlideInL_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSlideInL_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSlideInL.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSlideInR_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSlideInR_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInR_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSlideInR_create : Error processing arguments");
        auto result = cocos2d::TransitionSlideInR::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSlideInR_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSlideInR_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSlideInR_constructor, __jsb_cocos2dx_TransitionSlideInR_class, js_cocos2dx_TransitionSlideInR_finalize)
{
    cocos2d::TransitionSlideInR* cobj = new (std::nothrow) cocos2d::TransitionSlideInR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSlideInR_ctor, __jsb_cocos2dx_TransitionSlideInR_class, js_cocos2dx_TransitionSlideInR_finalize)
{
    cocos2d::TransitionSlideInR* cobj = new (std::nothrow) cocos2d::TransitionSlideInR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInR_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSlideInR)", nativeThisObject);
    cocos2d::TransitionSlideInR* cobj = (cocos2d::TransitionSlideInR*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSlideInR(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSlideInR", obj, __jsb_cocos2dx_TransitionSlideInL_proto, js_cocos2dx_TransitionSlideInR_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionSlideInR_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSlideInR_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSlideInR_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSlideInR_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSlideInR_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSlideInR.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSlideInB_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSlideInB_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInB_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSlideInB_create : Error processing arguments");
        auto result = cocos2d::TransitionSlideInB::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSlideInB_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSlideInB_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSlideInB_constructor, __jsb_cocos2dx_TransitionSlideInB_class, js_cocos2dx_TransitionSlideInB_finalize)
{
    cocos2d::TransitionSlideInB* cobj = new (std::nothrow) cocos2d::TransitionSlideInB();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSlideInB_ctor, __jsb_cocos2dx_TransitionSlideInB_class, js_cocos2dx_TransitionSlideInB_finalize)
{
    cocos2d::TransitionSlideInB* cobj = new (std::nothrow) cocos2d::TransitionSlideInB();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInB_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSlideInB)", nativeThisObject);
    cocos2d::TransitionSlideInB* cobj = (cocos2d::TransitionSlideInB*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSlideInB(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSlideInB", obj, __jsb_cocos2dx_TransitionSlideInL_proto, js_cocos2dx_TransitionSlideInB_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionSlideInB_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSlideInB_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSlideInB_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSlideInB_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSlideInB_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSlideInB.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSlideInT_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSlideInT_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInT_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSlideInT_create : Error processing arguments");
        auto result = cocos2d::TransitionSlideInT::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSlideInT_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSlideInT_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSlideInT_constructor, __jsb_cocos2dx_TransitionSlideInT_class, js_cocos2dx_TransitionSlideInT_finalize)
{
    cocos2d::TransitionSlideInT* cobj = new (std::nothrow) cocos2d::TransitionSlideInT();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSlideInT_ctor, __jsb_cocos2dx_TransitionSlideInT_class, js_cocos2dx_TransitionSlideInT_finalize)
{
    cocos2d::TransitionSlideInT* cobj = new (std::nothrow) cocos2d::TransitionSlideInT();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSlideInT_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSlideInT)", nativeThisObject);
    cocos2d::TransitionSlideInT* cobj = (cocos2d::TransitionSlideInT*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSlideInT(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSlideInT", obj, __jsb_cocos2dx_TransitionSlideInL_proto, js_cocos2dx_TransitionSlideInT_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionSlideInT_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSlideInT_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSlideInT_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSlideInT_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSlideInT_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSlideInT.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionShrinkGrow_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionShrinkGrow_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionShrinkGrow_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionShrinkGrow* cobj = (cocos2d::TransitionShrinkGrow*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionShrinkGrow_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionShrinkGrow_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionShrinkGrow_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionShrinkGrow_create : Error processing arguments");
        auto result = cocos2d::TransitionShrinkGrow::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionShrinkGrow_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionShrinkGrow_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionShrinkGrow_constructor, __jsb_cocos2dx_TransitionShrinkGrow_class, js_cocos2dx_TransitionShrinkGrow_finalize)
{
    cocos2d::TransitionShrinkGrow* cobj = new (std::nothrow) cocos2d::TransitionShrinkGrow();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionShrinkGrow_ctor, __jsb_cocos2dx_TransitionShrinkGrow_class, js_cocos2dx_TransitionShrinkGrow_finalize)
{
    cocos2d::TransitionShrinkGrow* cobj = new (std::nothrow) cocos2d::TransitionShrinkGrow();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionShrinkGrow_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionShrinkGrow)", nativeThisObject);
    cocos2d::TransitionShrinkGrow* cobj = (cocos2d::TransitionShrinkGrow*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionShrinkGrow(se::Object* obj)
{
    auto cls = se::Class::create("TransitionShrinkGrow", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionShrinkGrow_constructor);

    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionShrinkGrow_easeActionWithAction);
    cls->defineFunction("ctor", js_cocos2dx_TransitionShrinkGrow_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionShrinkGrow_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionShrinkGrow_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionShrinkGrow_proto = cls->getProto();
    __jsb_cocos2dx_TransitionShrinkGrow_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionShrinkGrow.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFlipX_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFlipX_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFlipX_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipX* result = cocos2d::TransitionFlipX::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipX>((cocos2d::TransitionFlipX*)result, __jsb_cocos2dx_TransitionFlipX_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipX* result = cocos2d::TransitionFlipX::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipX>((cocos2d::TransitionFlipX*)result, __jsb_cocos2dx_TransitionFlipX_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFlipX_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFlipX_constructor, __jsb_cocos2dx_TransitionFlipX_class, js_cocos2dx_TransitionFlipX_finalize)
{
    cocos2d::TransitionFlipX* cobj = new (std::nothrow) cocos2d::TransitionFlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFlipX_ctor, __jsb_cocos2dx_TransitionFlipX_class, js_cocos2dx_TransitionFlipX_finalize)
{
    cocos2d::TransitionFlipX* cobj = new (std::nothrow) cocos2d::TransitionFlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFlipX_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFlipX)", nativeThisObject);
    cocos2d::TransitionFlipX* cobj = (cocos2d::TransitionFlipX*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFlipX(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFlipX", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionFlipX_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFlipX_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFlipX_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFlipX_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFlipX_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFlipX_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFlipX.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFlipY_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFlipY_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFlipY_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipY* result = cocos2d::TransitionFlipY::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipY>((cocos2d::TransitionFlipY*)result, __jsb_cocos2dx_TransitionFlipY_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipY* result = cocos2d::TransitionFlipY::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipY>((cocos2d::TransitionFlipY*)result, __jsb_cocos2dx_TransitionFlipY_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFlipY_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFlipY_constructor, __jsb_cocos2dx_TransitionFlipY_class, js_cocos2dx_TransitionFlipY_finalize)
{
    cocos2d::TransitionFlipY* cobj = new (std::nothrow) cocos2d::TransitionFlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFlipY_ctor, __jsb_cocos2dx_TransitionFlipY_class, js_cocos2dx_TransitionFlipY_finalize)
{
    cocos2d::TransitionFlipY* cobj = new (std::nothrow) cocos2d::TransitionFlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFlipY_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFlipY)", nativeThisObject);
    cocos2d::TransitionFlipY* cobj = (cocos2d::TransitionFlipY*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFlipY(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFlipY", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionFlipY_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFlipY_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFlipY_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFlipY_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFlipY_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFlipY_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFlipY.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFlipAngular_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFlipAngular_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFlipAngular_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipAngular* result = cocos2d::TransitionFlipAngular::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipAngular>((cocos2d::TransitionFlipAngular*)result, __jsb_cocos2dx_TransitionFlipAngular_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFlipAngular* result = cocos2d::TransitionFlipAngular::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFlipAngular>((cocos2d::TransitionFlipAngular*)result, __jsb_cocos2dx_TransitionFlipAngular_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFlipAngular_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFlipAngular_constructor, __jsb_cocos2dx_TransitionFlipAngular_class, js_cocos2dx_TransitionFlipAngular_finalize)
{
    cocos2d::TransitionFlipAngular* cobj = new (std::nothrow) cocos2d::TransitionFlipAngular();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFlipAngular_ctor, __jsb_cocos2dx_TransitionFlipAngular_class, js_cocos2dx_TransitionFlipAngular_finalize)
{
    cocos2d::TransitionFlipAngular* cobj = new (std::nothrow) cocos2d::TransitionFlipAngular();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFlipAngular_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFlipAngular)", nativeThisObject);
    cocos2d::TransitionFlipAngular* cobj = (cocos2d::TransitionFlipAngular*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFlipAngular(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFlipAngular", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionFlipAngular_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFlipAngular_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFlipAngular_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFlipAngular_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFlipAngular_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFlipAngular_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFlipAngular.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionZoomFlipX_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionZoomFlipX_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipX_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipX* result = cocos2d::TransitionZoomFlipX::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipX>((cocos2d::TransitionZoomFlipX*)result, __jsb_cocos2dx_TransitionZoomFlipX_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipX* result = cocos2d::TransitionZoomFlipX::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipX>((cocos2d::TransitionZoomFlipX*)result, __jsb_cocos2dx_TransitionZoomFlipX_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionZoomFlipX_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionZoomFlipX_constructor, __jsb_cocos2dx_TransitionZoomFlipX_class, js_cocos2dx_TransitionZoomFlipX_finalize)
{
    cocos2d::TransitionZoomFlipX* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionZoomFlipX_ctor, __jsb_cocos2dx_TransitionZoomFlipX_class, js_cocos2dx_TransitionZoomFlipX_finalize)
{
    cocos2d::TransitionZoomFlipX* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipX();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipX_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionZoomFlipX)", nativeThisObject);
    cocos2d::TransitionZoomFlipX* cobj = (cocos2d::TransitionZoomFlipX*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionZoomFlipX(se::Object* obj)
{
    auto cls = se::Class::create("TransitionZoomFlipX", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionZoomFlipX_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionZoomFlipX_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionZoomFlipX_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionZoomFlipX_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionZoomFlipX_proto = cls->getProto();
    __jsb_cocos2dx_TransitionZoomFlipX_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionZoomFlipX.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionZoomFlipY_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionZoomFlipY_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipY_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipY* result = cocos2d::TransitionZoomFlipY::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipY>((cocos2d::TransitionZoomFlipY*)result, __jsb_cocos2dx_TransitionZoomFlipY_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipY* result = cocos2d::TransitionZoomFlipY::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipY>((cocos2d::TransitionZoomFlipY*)result, __jsb_cocos2dx_TransitionZoomFlipY_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionZoomFlipY_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionZoomFlipY_constructor, __jsb_cocos2dx_TransitionZoomFlipY_class, js_cocos2dx_TransitionZoomFlipY_finalize)
{
    cocos2d::TransitionZoomFlipY* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionZoomFlipY_ctor, __jsb_cocos2dx_TransitionZoomFlipY_class, js_cocos2dx_TransitionZoomFlipY_finalize)
{
    cocos2d::TransitionZoomFlipY* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipY();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipY_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionZoomFlipY)", nativeThisObject);
    cocos2d::TransitionZoomFlipY* cobj = (cocos2d::TransitionZoomFlipY*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionZoomFlipY(se::Object* obj)
{
    auto cls = se::Class::create("TransitionZoomFlipY", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionZoomFlipY_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionZoomFlipY_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionZoomFlipY_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionZoomFlipY_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionZoomFlipY_proto = cls->getProto();
    __jsb_cocos2dx_TransitionZoomFlipY_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionZoomFlipY.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionZoomFlipAngular_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionZoomFlipAngular_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipAngular_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipAngular* result = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipAngular>((cocos2d::TransitionZoomFlipAngular*)result, __jsb_cocos2dx_TransitionZoomFlipAngular_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionZoomFlipAngular* result = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionZoomFlipAngular>((cocos2d::TransitionZoomFlipAngular*)result, __jsb_cocos2dx_TransitionZoomFlipAngular_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionZoomFlipAngular_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionZoomFlipAngular_constructor, __jsb_cocos2dx_TransitionZoomFlipAngular_class, js_cocos2dx_TransitionZoomFlipAngular_finalize)
{
    cocos2d::TransitionZoomFlipAngular* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipAngular();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionZoomFlipAngular_ctor, __jsb_cocos2dx_TransitionZoomFlipAngular_class, js_cocos2dx_TransitionZoomFlipAngular_finalize)
{
    cocos2d::TransitionZoomFlipAngular* cobj = new (std::nothrow) cocos2d::TransitionZoomFlipAngular();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionZoomFlipAngular_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionZoomFlipAngular)", nativeThisObject);
    cocos2d::TransitionZoomFlipAngular* cobj = (cocos2d::TransitionZoomFlipAngular*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionZoomFlipAngular(se::Object* obj)
{
    auto cls = se::Class::create("TransitionZoomFlipAngular", obj, __jsb_cocos2dx_TransitionSceneOriented_proto, js_cocos2dx_TransitionZoomFlipAngular_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionZoomFlipAngular_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionZoomFlipAngular_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionZoomFlipAngular_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionZoomFlipAngular_proto = cls->getProto();
    __jsb_cocos2dx_TransitionZoomFlipAngular_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionZoomFlipAngular.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFade_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFade_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFade_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionFade* cobj = (cocos2d::TransitionFade*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TransitionFade_initWithDuration : Invalid Native Object");

    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg2;
            ok &= seval_to_Color3B(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithDuration(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionFade_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFade* result = cocos2d::TransitionFade::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFade>((cocos2d::TransitionFade*)result, __jsb_cocos2dx_TransitionFade_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            float arg0 = 0;
            ok &= seval_to_float(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Scene* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Color3B arg2;
            ok &= seval_to_Color3B(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TransitionFade* result = cocos2d::TransitionFade::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TransitionFade>((cocos2d::TransitionFade*)result, __jsb_cocos2dx_TransitionFade_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFade_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFade_constructor, __jsb_cocos2dx_TransitionFade_class, js_cocos2dx_TransitionFade_finalize)
{
    cocos2d::TransitionFade* cobj = new (std::nothrow) cocos2d::TransitionFade();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFade_ctor, __jsb_cocos2dx_TransitionFade_class, js_cocos2dx_TransitionFade_finalize)
{
    cocos2d::TransitionFade* cobj = new (std::nothrow) cocos2d::TransitionFade();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFade_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFade)", nativeThisObject);
    cocos2d::TransitionFade* cobj = (cocos2d::TransitionFade*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFade(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFade", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionFade_constructor);

    cls->defineFunction("initWithDuration", js_cocos2dx_TransitionFade_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_TransitionFade_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFade_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFade_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFade_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFade_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFade.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionCrossFade_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionCrossFade_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionCrossFade_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionCrossFade_create : Error processing arguments");
        auto result = cocos2d::TransitionCrossFade::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionCrossFade_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionCrossFade_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionCrossFade_constructor, __jsb_cocos2dx_TransitionCrossFade_class, js_cocos2dx_TransitionCrossFade_finalize)
{
    cocos2d::TransitionCrossFade* cobj = new (std::nothrow) cocos2d::TransitionCrossFade();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionCrossFade_ctor, __jsb_cocos2dx_TransitionCrossFade_class, js_cocos2dx_TransitionCrossFade_finalize)
{
    cocos2d::TransitionCrossFade* cobj = new (std::nothrow) cocos2d::TransitionCrossFade();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionCrossFade_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionCrossFade)", nativeThisObject);
    cocos2d::TransitionCrossFade* cobj = (cocos2d::TransitionCrossFade*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionCrossFade(se::Object* obj)
{
    auto cls = se::Class::create("TransitionCrossFade", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionCrossFade_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionCrossFade_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionCrossFade_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionCrossFade_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionCrossFade_proto = cls->getProto();
    __jsb_cocos2dx_TransitionCrossFade_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionCrossFade.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionTurnOffTiles_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionTurnOffTiles_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionTurnOffTiles_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionTurnOffTiles* cobj = (cocos2d::TransitionTurnOffTiles*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionTurnOffTiles_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionTurnOffTiles_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionTurnOffTiles_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionTurnOffTiles_create : Error processing arguments");
        auto result = cocos2d::TransitionTurnOffTiles::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionTurnOffTiles_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionTurnOffTiles_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionTurnOffTiles_constructor, __jsb_cocos2dx_TransitionTurnOffTiles_class, js_cocos2dx_TransitionTurnOffTiles_finalize)
{
    cocos2d::TransitionTurnOffTiles* cobj = new (std::nothrow) cocos2d::TransitionTurnOffTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionTurnOffTiles_ctor, __jsb_cocos2dx_TransitionTurnOffTiles_class, js_cocos2dx_TransitionTurnOffTiles_finalize)
{
    cocos2d::TransitionTurnOffTiles* cobj = new (std::nothrow) cocos2d::TransitionTurnOffTiles();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionTurnOffTiles_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionTurnOffTiles)", nativeThisObject);
    cocos2d::TransitionTurnOffTiles* cobj = (cocos2d::TransitionTurnOffTiles*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionTurnOffTiles(se::Object* obj)
{
    auto cls = se::Class::create("TransitionTurnOffTiles", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionTurnOffTiles_constructor);

    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionTurnOffTiles_easeActionWithAction);
    cls->defineFunction("ctor", js_cocos2dx_TransitionTurnOffTiles_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionTurnOffTiles_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionTurnOffTiles_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionTurnOffTiles_proto = cls->getProto();
    __jsb_cocos2dx_TransitionTurnOffTiles_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionTurnOffTiles.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSplitCols_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSplitCols_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSplitCols_action, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionSplitCols* cobj = (cocos2d::TransitionSplitCols*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionSplitCols_action : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ActionInterval* result = cobj->action();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionSplitCols_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionSplitCols* cobj = (cocos2d::TransitionSplitCols*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionSplitCols_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSplitCols_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionSplitCols_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSplitCols_create : Error processing arguments");
        auto result = cocos2d::TransitionSplitCols::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSplitCols_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSplitCols_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSplitCols_constructor, __jsb_cocos2dx_TransitionSplitCols_class, js_cocos2dx_TransitionSplitCols_finalize)
{
    cocos2d::TransitionSplitCols* cobj = new (std::nothrow) cocos2d::TransitionSplitCols();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSplitCols_ctor, __jsb_cocos2dx_TransitionSplitCols_class, js_cocos2dx_TransitionSplitCols_finalize)
{
    cocos2d::TransitionSplitCols* cobj = new (std::nothrow) cocos2d::TransitionSplitCols();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSplitCols_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSplitCols)", nativeThisObject);
    cocos2d::TransitionSplitCols* cobj = (cocos2d::TransitionSplitCols*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSplitCols(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSplitCols", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionSplitCols_constructor);

    cls->defineFunction("action", js_cocos2dx_TransitionSplitCols_action);
    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionSplitCols_easeActionWithAction);
    cls->defineFunction("ctor", js_cocos2dx_TransitionSplitCols_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSplitCols_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSplitCols_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSplitCols_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSplitCols_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSplitCols.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionSplitRows_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionSplitRows_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionSplitRows_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionSplitRows_create : Error processing arguments");
        auto result = cocos2d::TransitionSplitRows::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionSplitRows_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionSplitRows_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionSplitRows_constructor, __jsb_cocos2dx_TransitionSplitRows_class, js_cocos2dx_TransitionSplitRows_finalize)
{
    cocos2d::TransitionSplitRows* cobj = new (std::nothrow) cocos2d::TransitionSplitRows();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionSplitRows_ctor, __jsb_cocos2dx_TransitionSplitRows_class, js_cocos2dx_TransitionSplitRows_finalize)
{
    cocos2d::TransitionSplitRows* cobj = new (std::nothrow) cocos2d::TransitionSplitRows();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionSplitRows_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionSplitRows)", nativeThisObject);
    cocos2d::TransitionSplitRows* cobj = (cocos2d::TransitionSplitRows*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionSplitRows(se::Object* obj)
{
    auto cls = se::Class::create("TransitionSplitRows", obj, __jsb_cocos2dx_TransitionSplitCols_proto, js_cocos2dx_TransitionSplitRows_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionSplitRows_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionSplitRows_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionSplitRows_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionSplitRows_proto = cls->getProto();
    __jsb_cocos2dx_TransitionSplitRows_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionSplitRows.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFadeTR_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFadeTR_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeTR_easeActionWithAction, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionFadeTR* cobj = (cocos2d::TransitionFadeTR*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionFadeTR_easeActionWithAction : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ActionInterval* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeTR_easeActionWithAction : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->easeActionWithAction(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeTR_actionWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionFadeTR* cobj = (cocos2d::TransitionFadeTR*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionFadeTR_actionWithSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeTR_actionWithSize : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->actionWithSize(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeTR_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeTR_create : Error processing arguments");
        auto result = cocos2d::TransitionFadeTR::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionFadeTR_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFadeTR_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFadeTR_constructor, __jsb_cocos2dx_TransitionFadeTR_class, js_cocos2dx_TransitionFadeTR_finalize)
{
    cocos2d::TransitionFadeTR* cobj = new (std::nothrow) cocos2d::TransitionFadeTR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFadeTR_ctor, __jsb_cocos2dx_TransitionFadeTR_class, js_cocos2dx_TransitionFadeTR_finalize)
{
    cocos2d::TransitionFadeTR* cobj = new (std::nothrow) cocos2d::TransitionFadeTR();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFadeTR_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFadeTR)", nativeThisObject);
    cocos2d::TransitionFadeTR* cobj = (cocos2d::TransitionFadeTR*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFadeTR(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFadeTR", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionFadeTR_constructor);

    cls->defineFunction("easeActionWithAction", js_cocos2dx_TransitionFadeTR_easeActionWithAction);
    cls->defineFunction("actionWithSize", js_cocos2dx_TransitionFadeTR_actionWithSize);
    cls->defineFunction("ctor", js_cocos2dx_TransitionFadeTR_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFadeTR_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFadeTR_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFadeTR_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFadeTR_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFadeTR.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFadeBL_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFadeBL_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeBL_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeBL_create : Error processing arguments");
        auto result = cocos2d::TransitionFadeBL::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionFadeBL_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFadeBL_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFadeBL_constructor, __jsb_cocos2dx_TransitionFadeBL_class, js_cocos2dx_TransitionFadeBL_finalize)
{
    cocos2d::TransitionFadeBL* cobj = new (std::nothrow) cocos2d::TransitionFadeBL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFadeBL_ctor, __jsb_cocos2dx_TransitionFadeBL_class, js_cocos2dx_TransitionFadeBL_finalize)
{
    cocos2d::TransitionFadeBL* cobj = new (std::nothrow) cocos2d::TransitionFadeBL();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFadeBL_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFadeBL)", nativeThisObject);
    cocos2d::TransitionFadeBL* cobj = (cocos2d::TransitionFadeBL*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFadeBL(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFadeBL", obj, __jsb_cocos2dx_TransitionFadeTR_proto, js_cocos2dx_TransitionFadeBL_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFadeBL_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFadeBL_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFadeBL_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFadeBL_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFadeBL_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFadeBL.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFadeUp_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFadeUp_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeUp_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeUp_create : Error processing arguments");
        auto result = cocos2d::TransitionFadeUp::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionFadeUp_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFadeUp_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFadeUp_constructor, __jsb_cocos2dx_TransitionFadeUp_class, js_cocos2dx_TransitionFadeUp_finalize)
{
    cocos2d::TransitionFadeUp* cobj = new (std::nothrow) cocos2d::TransitionFadeUp();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFadeUp_ctor, __jsb_cocos2dx_TransitionFadeUp_class, js_cocos2dx_TransitionFadeUp_finalize)
{
    cocos2d::TransitionFadeUp* cobj = new (std::nothrow) cocos2d::TransitionFadeUp();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFadeUp_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFadeUp)", nativeThisObject);
    cocos2d::TransitionFadeUp* cobj = (cocos2d::TransitionFadeUp*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFadeUp(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFadeUp", obj, __jsb_cocos2dx_TransitionFadeTR_proto, js_cocos2dx_TransitionFadeUp_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFadeUp_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFadeUp_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFadeUp_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFadeUp_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFadeUp_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFadeUp.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionFadeDown_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionFadeDown_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionFadeDown_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionFadeDown_create : Error processing arguments");
        auto result = cocos2d::TransitionFadeDown::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionFadeDown_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionFadeDown_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionFadeDown_constructor, __jsb_cocos2dx_TransitionFadeDown_class, js_cocos2dx_TransitionFadeDown_finalize)
{
    cocos2d::TransitionFadeDown* cobj = new (std::nothrow) cocos2d::TransitionFadeDown();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionFadeDown_ctor, __jsb_cocos2dx_TransitionFadeDown_class, js_cocos2dx_TransitionFadeDown_finalize)
{
    cocos2d::TransitionFadeDown* cobj = new (std::nothrow) cocos2d::TransitionFadeDown();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionFadeDown_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionFadeDown)", nativeThisObject);
    cocos2d::TransitionFadeDown* cobj = (cocos2d::TransitionFadeDown*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionFadeDown(se::Object* obj)
{
    auto cls = se::Class::create("TransitionFadeDown", obj, __jsb_cocos2dx_TransitionFadeTR_proto, js_cocos2dx_TransitionFadeDown_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionFadeDown_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionFadeDown_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionFadeDown_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionFadeDown_proto = cls->getProto();
    __jsb_cocos2dx_TransitionFadeDown_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionFadeDown.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionPageTurn_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionPageTurn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionPageTurn_actionWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionPageTurn* cobj = (cocos2d::TransitionPageTurn*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionPageTurn_actionWithSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionPageTurn_actionWithSize : Error processing arguments");
        cocos2d::ActionInterval* result = cobj->actionWithSize(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::ActionInterval>((cocos2d::ActionInterval*)result, __jsb_cocos2dx_ActionInterval_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionPageTurn_initWithDuration, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TransitionPageTurn* cobj = (cocos2d::TransitionPageTurn*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TransitionPageTurn_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        bool arg2;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_boolean(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionPageTurn_initWithDuration : Error processing arguments");
        bool result = cobj->initWithDuration(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TransitionPageTurn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        bool arg2;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_boolean(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionPageTurn_create : Error processing arguments");
        auto result = cocos2d::TransitionPageTurn::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionPageTurn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionPageTurn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionPageTurn_constructor, __jsb_cocos2dx_TransitionPageTurn_class, js_cocos2dx_TransitionPageTurn_finalize)
{
    cocos2d::TransitionPageTurn* cobj = new (std::nothrow) cocos2d::TransitionPageTurn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionPageTurn_ctor, __jsb_cocos2dx_TransitionPageTurn_class, js_cocos2dx_TransitionPageTurn_finalize)
{
    cocos2d::TransitionPageTurn* cobj = new (std::nothrow) cocos2d::TransitionPageTurn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionPageTurn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionPageTurn)", nativeThisObject);
    cocos2d::TransitionPageTurn* cobj = (cocos2d::TransitionPageTurn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionPageTurn(se::Object* obj)
{
    auto cls = se::Class::create("TransitionPageTurn", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionPageTurn_constructor);

    cls->defineFunction("actionWithSize", js_cocos2dx_TransitionPageTurn_actionWithSize);
    cls->defineFunction("initWithDuration", js_cocos2dx_TransitionPageTurn_initWithDuration);
    cls->defineFunction("ctor", js_cocos2dx_TransitionPageTurn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionPageTurn_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionPageTurn_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionPageTurn_proto = cls->getProto();
    __jsb_cocos2dx_TransitionPageTurn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionPageTurn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgress_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgress_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgress_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgress_create : Error processing arguments");
        auto result = cocos2d::TransitionProgress::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgress_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgress_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgress_constructor, __jsb_cocos2dx_TransitionProgress_class, js_cocos2dx_TransitionProgress_finalize)
{
    cocos2d::TransitionProgress* cobj = new (std::nothrow) cocos2d::TransitionProgress();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgress_ctor, __jsb_cocos2dx_TransitionProgress_class, js_cocos2dx_TransitionProgress_finalize)
{
    cocos2d::TransitionProgress* cobj = new (std::nothrow) cocos2d::TransitionProgress();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgress_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgress)", nativeThisObject);
    cocos2d::TransitionProgress* cobj = (cocos2d::TransitionProgress*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgress(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgress", obj, __jsb_cocos2dx_TransitionScene_proto, js_cocos2dx_TransitionProgress_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgress_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgress_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgress_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgress_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgress_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgress.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressRadialCCW_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressRadialCCW_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressRadialCCW_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressRadialCCW_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressRadialCCW::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressRadialCCW_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressRadialCCW_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressRadialCCW_constructor, __jsb_cocos2dx_TransitionProgressRadialCCW_class, js_cocos2dx_TransitionProgressRadialCCW_finalize)
{
    cocos2d::TransitionProgressRadialCCW* cobj = new (std::nothrow) cocos2d::TransitionProgressRadialCCW();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressRadialCCW_ctor, __jsb_cocos2dx_TransitionProgressRadialCCW_class, js_cocos2dx_TransitionProgressRadialCCW_finalize)
{
    cocos2d::TransitionProgressRadialCCW* cobj = new (std::nothrow) cocos2d::TransitionProgressRadialCCW();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressRadialCCW_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressRadialCCW)", nativeThisObject);
    cocos2d::TransitionProgressRadialCCW* cobj = (cocos2d::TransitionProgressRadialCCW*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressRadialCCW(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressRadialCCW", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressRadialCCW_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressRadialCCW_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressRadialCCW_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressRadialCCW_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressRadialCCW_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressRadialCCW_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressRadialCCW.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressRadialCW_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressRadialCW_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressRadialCW_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressRadialCW_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressRadialCW::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressRadialCW_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressRadialCW_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressRadialCW_constructor, __jsb_cocos2dx_TransitionProgressRadialCW_class, js_cocos2dx_TransitionProgressRadialCW_finalize)
{
    cocos2d::TransitionProgressRadialCW* cobj = new (std::nothrow) cocos2d::TransitionProgressRadialCW();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressRadialCW_ctor, __jsb_cocos2dx_TransitionProgressRadialCW_class, js_cocos2dx_TransitionProgressRadialCW_finalize)
{
    cocos2d::TransitionProgressRadialCW* cobj = new (std::nothrow) cocos2d::TransitionProgressRadialCW();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressRadialCW_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressRadialCW)", nativeThisObject);
    cocos2d::TransitionProgressRadialCW* cobj = (cocos2d::TransitionProgressRadialCW*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressRadialCW(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressRadialCW", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressRadialCW_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressRadialCW_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressRadialCW_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressRadialCW_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressRadialCW_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressRadialCW_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressRadialCW.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressHorizontal_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressHorizontal_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressHorizontal_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressHorizontal_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressHorizontal::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressHorizontal_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressHorizontal_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressHorizontal_constructor, __jsb_cocos2dx_TransitionProgressHorizontal_class, js_cocos2dx_TransitionProgressHorizontal_finalize)
{
    cocos2d::TransitionProgressHorizontal* cobj = new (std::nothrow) cocos2d::TransitionProgressHorizontal();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressHorizontal_ctor, __jsb_cocos2dx_TransitionProgressHorizontal_class, js_cocos2dx_TransitionProgressHorizontal_finalize)
{
    cocos2d::TransitionProgressHorizontal* cobj = new (std::nothrow) cocos2d::TransitionProgressHorizontal();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressHorizontal_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressHorizontal)", nativeThisObject);
    cocos2d::TransitionProgressHorizontal* cobj = (cocos2d::TransitionProgressHorizontal*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressHorizontal(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressHorizontal", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressHorizontal_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressHorizontal_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressHorizontal_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressHorizontal_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressHorizontal_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressHorizontal_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressHorizontal.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressVertical_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressVertical_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressVertical_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressVertical_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressVertical::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressVertical_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressVertical_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressVertical_constructor, __jsb_cocos2dx_TransitionProgressVertical_class, js_cocos2dx_TransitionProgressVertical_finalize)
{
    cocos2d::TransitionProgressVertical* cobj = new (std::nothrow) cocos2d::TransitionProgressVertical();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressVertical_ctor, __jsb_cocos2dx_TransitionProgressVertical_class, js_cocos2dx_TransitionProgressVertical_finalize)
{
    cocos2d::TransitionProgressVertical* cobj = new (std::nothrow) cocos2d::TransitionProgressVertical();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressVertical_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressVertical)", nativeThisObject);
    cocos2d::TransitionProgressVertical* cobj = (cocos2d::TransitionProgressVertical*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressVertical(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressVertical", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressVertical_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressVertical_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressVertical_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressVertical_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressVertical_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressVertical_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressVertical.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressInOut_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressInOut_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressInOut_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressInOut_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressInOut::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressInOut_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressInOut_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressInOut_constructor, __jsb_cocos2dx_TransitionProgressInOut_class, js_cocos2dx_TransitionProgressInOut_finalize)
{
    cocos2d::TransitionProgressInOut* cobj = new (std::nothrow) cocos2d::TransitionProgressInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressInOut_ctor, __jsb_cocos2dx_TransitionProgressInOut_class, js_cocos2dx_TransitionProgressInOut_finalize)
{
    cocos2d::TransitionProgressInOut* cobj = new (std::nothrow) cocos2d::TransitionProgressInOut();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressInOut_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressInOut)", nativeThisObject);
    cocos2d::TransitionProgressInOut* cobj = (cocos2d::TransitionProgressInOut*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressInOut(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressInOut", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressInOut_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressInOut_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressInOut_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressInOut_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressInOut_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressInOut_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressInOut.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TransitionProgressOutIn_proto = nullptr;
se::Class* __jsb_cocos2dx_TransitionProgressOutIn_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TransitionProgressOutIn_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        float arg0 = 0;
        cocos2d::Scene* arg1 = nullptr;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TransitionProgressOutIn_create : Error processing arguments");
        auto result = cocos2d::TransitionProgressOutIn::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TransitionProgressOutIn_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TransitionProgressOutIn_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TransitionProgressOutIn_constructor, __jsb_cocos2dx_TransitionProgressOutIn_class, js_cocos2dx_TransitionProgressOutIn_finalize)
{
    cocos2d::TransitionProgressOutIn* cobj = new (std::nothrow) cocos2d::TransitionProgressOutIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TransitionProgressOutIn_ctor, __jsb_cocos2dx_TransitionProgressOutIn_class, js_cocos2dx_TransitionProgressOutIn_finalize)
{
    cocos2d::TransitionProgressOutIn* cobj = new (std::nothrow) cocos2d::TransitionProgressOutIn();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TransitionProgressOutIn_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TransitionProgressOutIn)", nativeThisObject);
    cocos2d::TransitionProgressOutIn* cobj = (cocos2d::TransitionProgressOutIn*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TransitionProgressOutIn(se::Object* obj)
{
    auto cls = se::Class::create("TransitionProgressOutIn", obj, __jsb_cocos2dx_TransitionProgress_proto, js_cocos2dx_TransitionProgressOutIn_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TransitionProgressOutIn_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TransitionProgressOutIn_create);
    cls->defineFinalizedFunction(js_cocos2dx_TransitionProgressOutIn_finalize);
    cls->install();

    __jsb_cocos2dx_TransitionProgressOutIn_proto = cls->getProto();
    __jsb_cocos2dx_TransitionProgressOutIn_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TransitionProgressOutIn.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Camera_proto = nullptr;
se::Class* __jsb_cocos2dx_Camera_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Camera_restore, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_restore : Invalid Native Object");
    if (argc == 0) {
        cobj->restore();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getDepth : Invalid Native Object");
    if (argc == 0) {
        int8_t result = cobj->getDepth();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR char;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getViewProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getViewProjectionMatrix : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Mat4& result = cobj->getViewProjectionMatrix();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_applyViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_applyViewport : Invalid Native Object");
    if (argc == 0) {
        cobj->applyViewport();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setBackgroundBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setBackgroundBrush : Invalid Native Object");
    if (argc == 1) {
        cocos2d::CameraBackgroundBrush* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setBackgroundBrush : Error processing arguments");
        cobj->setBackgroundBrush(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_lookAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_lookAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_lookAt : Error processing arguments");
        cobj->lookAt(arg0);
    }
    if (argc == 2) {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        ok &= seval_to_Vec3(args[0], &arg0);
        ok &= seval_to_Vec3(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_lookAt : Error processing arguments");
        cobj->lookAt(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_apply, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_apply : Invalid Native Object");
    if (argc == 0) {
        cobj->apply();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getBackgroundBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getBackgroundBrush : Invalid Native Object");
    if (argc == 0) {
        cocos2d::CameraBackgroundBrush* result = cobj->getBackgroundBrush();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::CameraBackgroundBrush>((cocos2d::CameraBackgroundBrush*)result, __jsb_cocos2dx_CameraBackgroundBrush_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getProjectionMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getProjectionMatrix : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Mat4& result = cobj->getProjectionMatrix();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_isBrushValid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_isBrushValid : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isBrushValid();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getDepthInView, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getDepthInView : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Mat4 arg0;
        ok &= seval_to_Mat4(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_getDepthInView : Error processing arguments");
        float result = cobj->getDepthInView(arg0);
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_restoreViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_restoreViewport : Invalid Native Object");
    if (argc == 0) {
        cobj->restoreViewport();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_clearBackground, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_clearBackground : Invalid Native Object");
    if (argc == 0) {
        cobj->clearBackground();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setAdditionalProjection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setAdditionalProjection : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Mat4 arg0;
        ok &= seval_to_Mat4(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setAdditionalProjection : Error processing arguments");
        cobj->setAdditionalProjection(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setViewport : Invalid Native Object");
    if (argc == 1) {
        cocos2d::experimental::Viewport arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR Viewport
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setViewport : Error processing arguments");
        cobj->setViewport(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_initDefault, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_initDefault : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->initDefault();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getCameraFlag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getCameraFlag : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getCameraFlag();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_initOrthographic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_initOrthographic : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_initOrthographic : Error processing arguments");
        bool result = cobj->initOrthographic(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getRenderOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getRenderOrder : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getRenderOrder();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setDepth : Invalid Native Object");
    if (argc == 1) {
        int8_t arg0;
        ok &= seval_to_int8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setDepth : Error processing arguments");
        cobj->setDepth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setScene, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setScene : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Scene* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setScene : Error processing arguments");
        cobj->setScene(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_projectGL, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_projectGL : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_projectGL : Error processing arguments");
        cocos2d::Vec2 result = cobj->projectGL(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_restoreFrameBufferObject, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_restoreFrameBufferObject : Invalid Native Object");
    if (argc == 0) {
        cobj->restoreFrameBufferObject();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getViewMatrix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getViewMatrix : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Mat4& result = cobj->getViewMatrix();
        se::Value jsret;
        ok &= Mat4_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getNearPlane, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getNearPlane : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getNearPlane();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_project, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_project : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_project : Error processing arguments");
        cocos2d::Vec2 result = cobj->project(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setCameraFlag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setCameraFlag : Invalid Native Object");
    if (argc == 1) {
        cocos2d::CameraFlag arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setCameraFlag : Error processing arguments");
        cobj->setCameraFlag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getFarPlane, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_getFarPlane : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getFarPlane();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_applyFrameBufferObject, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_applyFrameBufferObject : Invalid Native Object");
    if (argc == 0) {
        cobj->applyFrameBufferObject();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setFrameBufferObject, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_setFrameBufferObject : Invalid Native Object");
    if (argc == 1) {
        cocos2d::experimental::FrameBuffer* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setFrameBufferObject : Error processing arguments");
        cobj->setFrameBufferObject(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_isViewProjectionUpdated, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_isViewProjectionUpdated : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isViewProjectionUpdated();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_initPerspective, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Camera_initPerspective : Invalid Native Object");
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_initPerspective : Error processing arguments");
        bool result = cobj->initPerspective(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_createOrthographic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_createOrthographic : Error processing arguments");
        auto result = cocos2d::Camera::createOrthographic(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Camera_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getVisitingCamera, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        const cocos2d::Camera* result = cocos2d::Camera::getVisitingCamera();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Camera>((cocos2d::Camera*)result, __jsb_cocos2dx_Camera_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::Camera::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Camera_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_createPerspective, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        float arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_float(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_createPerspective : Error processing arguments");
        auto result = cocos2d::Camera::createPerspective(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Camera_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getDefaultViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        const cocos2d::experimental::Viewport& result = cocos2d::Camera::getDefaultViewport();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR Viewport;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_setDefaultViewport, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::experimental::Viewport arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR Viewport
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Camera_setDefaultViewport : Error processing arguments");
        cocos2d::Camera::setDefaultViewport(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Camera_getDefaultCamera, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::Camera* result = cocos2d::Camera::getDefaultCamera();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Camera>((cocos2d::Camera*)result, __jsb_cocos2dx_Camera_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Camera_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Camera_constructor, __jsb_cocos2dx_Camera_class, js_cocos2dx_Camera_finalize)
{
    cocos2d::Camera* cobj = new (std::nothrow) cocos2d::Camera();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Camera_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Camera)", nativeThisObject);
    cocos2d::Camera* cobj = (cocos2d::Camera*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_Camera(se::Object* obj)
{
    auto cls = se::Class::create("Camera", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_Camera_constructor);

    cls->defineFunction("restore", js_cocos2dx_Camera_restore);
    cls->defineFunction("getDepth", js_cocos2dx_Camera_getDepth);
    cls->defineFunction("getViewProjectionMatrix", js_cocos2dx_Camera_getViewProjectionMatrix);
    cls->defineFunction("applyViewport", js_cocos2dx_Camera_applyViewport);
    cls->defineFunction("setBackgroundBrush", js_cocos2dx_Camera_setBackgroundBrush);
    cls->defineFunction("lookAt", js_cocos2dx_Camera_lookAt);
    cls->defineFunction("apply", js_cocos2dx_Camera_apply);
    cls->defineFunction("getBackgroundBrush", js_cocos2dx_Camera_getBackgroundBrush);
    cls->defineFunction("getProjectionMatrix", js_cocos2dx_Camera_getProjectionMatrix);
    cls->defineFunction("isBrushValid", js_cocos2dx_Camera_isBrushValid);
    cls->defineFunction("getDepthInView", js_cocos2dx_Camera_getDepthInView);
    cls->defineFunction("restoreViewport", js_cocos2dx_Camera_restoreViewport);
    cls->defineFunction("clearBackground", js_cocos2dx_Camera_clearBackground);
    cls->defineFunction("setAdditionalProjection", js_cocos2dx_Camera_setAdditionalProjection);
    cls->defineFunction("setViewport", js_cocos2dx_Camera_setViewport);
    cls->defineFunction("initDefault", js_cocos2dx_Camera_initDefault);
    cls->defineFunction("getCameraFlag", js_cocos2dx_Camera_getCameraFlag);
    cls->defineFunction("getType", js_cocos2dx_Camera_getType);
    cls->defineFunction("initOrthographic", js_cocos2dx_Camera_initOrthographic);
    cls->defineFunction("getRenderOrder", js_cocos2dx_Camera_getRenderOrder);
    cls->defineFunction("setDepth", js_cocos2dx_Camera_setDepth);
    cls->defineFunction("setScene", js_cocos2dx_Camera_setScene);
    cls->defineFunction("projectGL", js_cocos2dx_Camera_projectGL);
    cls->defineFunction("restoreFrameBufferObject", js_cocos2dx_Camera_restoreFrameBufferObject);
    cls->defineFunction("getViewMatrix", js_cocos2dx_Camera_getViewMatrix);
    cls->defineFunction("getNearPlane", js_cocos2dx_Camera_getNearPlane);
    cls->defineFunction("project", js_cocos2dx_Camera_project);
    cls->defineFunction("setCameraFlag", js_cocos2dx_Camera_setCameraFlag);
    cls->defineFunction("getFarPlane", js_cocos2dx_Camera_getFarPlane);
    cls->defineFunction("applyFrameBufferObject", js_cocos2dx_Camera_applyFrameBufferObject);
    cls->defineFunction("setFrameBufferObject", js_cocos2dx_Camera_setFrameBufferObject);
    cls->defineFunction("isViewProjectionUpdated", js_cocos2dx_Camera_isViewProjectionUpdated);
    cls->defineFunction("initPerspective", js_cocos2dx_Camera_initPerspective);
    cls->defineStaticFunction("createOrthographic", js_cocos2dx_Camera_createOrthographic);
    cls->defineStaticFunction("getVisitingCamera", js_cocos2dx_Camera_getVisitingCamera);
    cls->defineStaticFunction("create", js_cocos2dx_Camera_create);
    cls->defineStaticFunction("createPerspective", js_cocos2dx_Camera_createPerspective);
    cls->defineStaticFunction("getDefaultViewport", js_cocos2dx_Camera_getDefaultViewport);
    cls->defineStaticFunction("setDefaultViewport", js_cocos2dx_Camera_setDefaultViewport);
    cls->defineStaticFunction("getDefaultCamera", js_cocos2dx_Camera_getDefaultCamera);
    cls->defineFinalizedFunction(js_cocos2dx_Camera_finalize);
    cls->install();

    __jsb_cocos2dx_Camera_proto = cls->getProto();
    __jsb_cocos2dx_Camera_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CameraBackgroundBrush_proto = nullptr;
se::Class* __jsb_cocos2dx_CameraBackgroundBrush_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_getBrushType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundBrush* cobj = (cocos2d::CameraBackgroundBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundBrush_getBrushType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getBrushType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_drawBackground, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundBrush* cobj = (cocos2d::CameraBackgroundBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundBrush_drawBackground : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Camera* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundBrush_drawBackground : Error processing arguments");
        cobj->drawBackground(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundBrush* cobj = (cocos2d::CameraBackgroundBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundBrush_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_isValid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundBrush* cobj = (cocos2d::CameraBackgroundBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundBrush_isValid : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isValid();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_createSkyboxBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 6) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        std::string arg4;
        std::string arg5;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_std_string(args[2], &arg2);
        ok &= seval_to_std_string(args[3], &arg3);
        ok &= seval_to_std_string(args[4], &arg4);
        ok &= seval_to_std_string(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundBrush_createSkyboxBrush : Error processing arguments");
        auto result = cocos2d::CameraBackgroundBrush::createSkyboxBrush(arg0, arg1, arg2, arg3, arg4, arg5);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_createColorBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Color4F arg0;
        float arg1 = 0;
        ok &= seval_to_Color4F(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundBrush_createColorBrush : Error processing arguments");
        auto result = cocos2d::CameraBackgroundBrush::createColorBrush(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_createNoneBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::CameraBackgroundBrush::createNoneBrush();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_createDepthBrush, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::CameraBackgroundBrush::createDepthBrush();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundBrush_createDepthBrush : Error processing arguments");
        auto result = cocos2d::CameraBackgroundBrush::createDepthBrush(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CameraBackgroundBrush_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CameraBackgroundBrush_constructor, __jsb_cocos2dx_CameraBackgroundBrush_class, js_cocos2dx_CameraBackgroundBrush_finalize)
{
    cocos2d::CameraBackgroundBrush* cobj = new (std::nothrow) cocos2d::CameraBackgroundBrush();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundBrush_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CameraBackgroundBrush)", nativeThisObject);
    cocos2d::CameraBackgroundBrush* cobj = (cocos2d::CameraBackgroundBrush*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CameraBackgroundBrush(se::Object* obj)
{
    auto cls = se::Class::create("CameraBackgroundBrush", obj, nullptr, js_cocos2dx_CameraBackgroundBrush_constructor);

    cls->defineFunction("getBrushType", js_cocos2dx_CameraBackgroundBrush_getBrushType);
    cls->defineFunction("drawBackground", js_cocos2dx_CameraBackgroundBrush_drawBackground);
    cls->defineFunction("init", js_cocos2dx_CameraBackgroundBrush_init);
    cls->defineFunction("isValid", js_cocos2dx_CameraBackgroundBrush_isValid);
    cls->defineStaticFunction("createSkyboxBrush", js_cocos2dx_CameraBackgroundBrush_createSkyboxBrush);
    cls->defineStaticFunction("createColorBrush", js_cocos2dx_CameraBackgroundBrush_createColorBrush);
    cls->defineStaticFunction("createNoneBrush", js_cocos2dx_CameraBackgroundBrush_createNoneBrush);
    cls->defineStaticFunction("createDepthBrush", js_cocos2dx_CameraBackgroundBrush_createDepthBrush);
    cls->defineFinalizedFunction(js_cocos2dx_CameraBackgroundBrush_finalize);
    cls->install();

    __jsb_cocos2dx_CameraBackgroundBrush_proto = cls->getProto();
    __jsb_cocos2dx_CameraBackgroundBrush_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CameraBackgroundDepthBrush_proto = nullptr;
se::Class* __jsb_cocos2dx_CameraBackgroundDepthBrush_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundDepthBrush_setDepth, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundDepthBrush* cobj = (cocos2d::CameraBackgroundDepthBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundDepthBrush_setDepth : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundDepthBrush_setDepth : Error processing arguments");
        cobj->setDepth(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundDepthBrush_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundDepthBrush_create : Error processing arguments");
        auto result = cocos2d::CameraBackgroundDepthBrush::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundDepthBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CameraBackgroundDepthBrush_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CameraBackgroundDepthBrush_constructor, __jsb_cocos2dx_CameraBackgroundDepthBrush_class, js_cocos2dx_CameraBackgroundDepthBrush_finalize)
{
    cocos2d::CameraBackgroundDepthBrush* cobj = new (std::nothrow) cocos2d::CameraBackgroundDepthBrush();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundDepthBrush_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CameraBackgroundDepthBrush)", nativeThisObject);
    cocos2d::CameraBackgroundDepthBrush* cobj = (cocos2d::CameraBackgroundDepthBrush*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CameraBackgroundDepthBrush(se::Object* obj)
{
    auto cls = se::Class::create("CameraBackgroundDepthBrush", obj, __jsb_cocos2dx_CameraBackgroundBrush_proto, js_cocos2dx_CameraBackgroundDepthBrush_constructor);

    cls->defineFunction("setDepth", js_cocos2dx_CameraBackgroundDepthBrush_setDepth);
    cls->defineStaticFunction("create", js_cocos2dx_CameraBackgroundDepthBrush_create);
    cls->defineFinalizedFunction(js_cocos2dx_CameraBackgroundDepthBrush_finalize);
    cls->install();

    __jsb_cocos2dx_CameraBackgroundDepthBrush_proto = cls->getProto();
    __jsb_cocos2dx_CameraBackgroundDepthBrush_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CameraBackgroundColorBrush_proto = nullptr;
se::Class* __jsb_cocos2dx_CameraBackgroundColorBrush_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundColorBrush_setColor, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundColorBrush* cobj = (cocos2d::CameraBackgroundColorBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundColorBrush_setColor : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Color4F arg0;
        ok &= seval_to_Color4F(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundColorBrush_setColor : Error processing arguments");
        cobj->setColor(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundColorBrush_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Color4F arg0;
        float arg1 = 0;
        ok &= seval_to_Color4F(args[0], &arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundColorBrush_create : Error processing arguments");
        auto result = cocos2d::CameraBackgroundColorBrush::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_CameraBackgroundColorBrush_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CameraBackgroundColorBrush_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CameraBackgroundColorBrush_constructor, __jsb_cocos2dx_CameraBackgroundColorBrush_class, js_cocos2dx_CameraBackgroundColorBrush_finalize)
{
    cocos2d::CameraBackgroundColorBrush* cobj = new (std::nothrow) cocos2d::CameraBackgroundColorBrush();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundColorBrush_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CameraBackgroundColorBrush)", nativeThisObject);
    cocos2d::CameraBackgroundColorBrush* cobj = (cocos2d::CameraBackgroundColorBrush*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CameraBackgroundColorBrush(se::Object* obj)
{
    auto cls = se::Class::create("CameraBackgroundColorBrush", obj, __jsb_cocos2dx_CameraBackgroundDepthBrush_proto, js_cocos2dx_CameraBackgroundColorBrush_constructor);

    cls->defineFunction("setColor", js_cocos2dx_CameraBackgroundColorBrush_setColor);
    cls->defineStaticFunction("create", js_cocos2dx_CameraBackgroundColorBrush_create);
    cls->defineFinalizedFunction(js_cocos2dx_CameraBackgroundColorBrush_finalize);
    cls->install();

    __jsb_cocos2dx_CameraBackgroundColorBrush_proto = cls->getProto();
    __jsb_cocos2dx_CameraBackgroundColorBrush_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_proto = nullptr;
se::Class* __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_setTextureValid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = (cocos2d::CameraBackgroundSkyBoxBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setTextureValid : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setTextureValid : Error processing arguments");
        cobj->setTextureValid(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = (cocos2d::CameraBackgroundSkyBoxBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextureCube* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_setActived, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = (cocos2d::CameraBackgroundSkyBoxBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setActived : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_setActived : Error processing arguments");
        cobj->setActived(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_isActived, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = (cocos2d::CameraBackgroundSkyBoxBrush*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_CameraBackgroundSkyBoxBrush_isActived : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isActived();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 0) {
            cocos2d::CameraBackgroundSkyBoxBrush* result = cocos2d::CameraBackgroundSkyBoxBrush::create();
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::CameraBackgroundSkyBoxBrush>((cocos2d::CameraBackgroundSkyBoxBrush*)result, __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 6) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            std::string arg4;
            ok &= seval_to_std_string(args[4], &arg4);
            if (!ok) { ok = true; break; }
            std::string arg5;
            ok &= seval_to_std_string(args[5], &arg5);
            if (!ok) { ok = true; break; }
            cocos2d::CameraBackgroundSkyBoxBrush* result = cocos2d::CameraBackgroundSkyBoxBrush::create(arg0, arg1, arg2, arg3, arg4, arg5);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::CameraBackgroundSkyBoxBrush>((cocos2d::CameraBackgroundSkyBoxBrush*)result, __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_CameraBackgroundSkyBoxBrush_finalize)

SE_CTOR_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_constructor, __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_class, js_cocos2dx_CameraBackgroundSkyBoxBrush_finalize)
{
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = new (std::nothrow) cocos2d::CameraBackgroundSkyBoxBrush();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_CameraBackgroundSkyBoxBrush_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::CameraBackgroundSkyBoxBrush)", nativeThisObject);
    cocos2d::CameraBackgroundSkyBoxBrush* cobj = (cocos2d::CameraBackgroundSkyBoxBrush*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_CameraBackgroundSkyBoxBrush(se::Object* obj)
{
    auto cls = se::Class::create("CameraBackgroundSkyBoxBrush", obj, __jsb_cocos2dx_CameraBackgroundBrush_proto, js_cocos2dx_CameraBackgroundSkyBoxBrush_constructor);

    cls->defineFunction("setTextureValid", js_cocos2dx_CameraBackgroundSkyBoxBrush_setTextureValid);
    cls->defineFunction("setTexture", js_cocos2dx_CameraBackgroundSkyBoxBrush_setTexture);
    cls->defineFunction("setActived", js_cocos2dx_CameraBackgroundSkyBoxBrush_setActived);
    cls->defineFunction("isActived", js_cocos2dx_CameraBackgroundSkyBoxBrush_isActived);
    cls->defineStaticFunction("create", js_cocos2dx_CameraBackgroundSkyBoxBrush_create);
    cls->defineFinalizedFunction(js_cocos2dx_CameraBackgroundSkyBoxBrush_finalize);
    cls->install();

    __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_proto = cls->getProto();
    __jsb_cocos2dx_CameraBackgroundSkyBoxBrush_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_GridBase_proto = nullptr;
se::Class* __jsb_cocos2dx_GridBase_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setGridSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setGridSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setGridSize : Error processing arguments");
        cobj->setGridSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setGridRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setGridRect : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Rect arg0;
        ok &= seval_to_Rect(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setGridRect : Error processing arguments");
        cobj->setGridRect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_afterBlit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_afterBlit : Invalid Native Object");
    if (argc == 0) {
        cobj->afterBlit();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_getGridRect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_getGridRect : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Rect& result = cobj->getGridRect();
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_afterDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_afterDraw : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Node* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_afterDraw : Error processing arguments");
        cobj->afterDraw(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_beforeDraw, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_beforeDraw : Invalid Native Object");
    if (argc == 0) {
        cobj->beforeDraw();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_calculateVertexPoints, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_calculateVertexPoints : Invalid Native Object");
    if (argc == 0) {
        cobj->calculateVertexPoints();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_isTextureFlipped, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_isTextureFlipped : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isTextureFlipped();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_getGridSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_getGridSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getGridSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_getStep, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_getStep : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getStep();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_set2DProjection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_set2DProjection : Invalid Native Object");
    if (argc == 0) {
        cobj->set2DProjection();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setStep, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setStep : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setStep : Error processing arguments");
        cobj->setStep(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setTextureFlipped, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setTextureFlipped : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setTextureFlipped : Error processing arguments");
        cobj->setTextureFlipped(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_blit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_blit : Invalid Native Object");
    if (argc == 0) {
        cobj->blit();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setActive, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setActive : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setActive : Error processing arguments");
        cobj->setActive(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_getReuseGrid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_getReuseGrid : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getReuseGrid();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_initWithSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GridBase_initWithSize : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithSize(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithSize(arg0);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 3) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            bool result = cobj->initWithSize(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            cocos2d::Rect arg3;
            ok &= seval_to_Rect(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithSize(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_beforeBlit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_beforeBlit : Invalid Native Object");
    if (argc == 0) {
        cobj->beforeBlit();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_setReuseGrid, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_setReuseGrid : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GridBase_setReuseGrid : Error processing arguments");
        cobj->setReuseGrid(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_isActive, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_isActive : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isActive();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_reuse, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GridBase* cobj = (cocos2d::GridBase*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GridBase_reuse : Invalid Native Object");
    if (argc == 0) {
        cobj->reuse();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GridBase_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 1) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::GridBase* result = cocos2d::GridBase::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GridBase>((cocos2d::GridBase*)result, __jsb_cocos2dx_GridBase_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::GridBase* result = cocos2d::GridBase::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GridBase>((cocos2d::GridBase*)result, __jsb_cocos2dx_GridBase_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

bool js_register_cocos2dx_GridBase(se::Object* obj)
{
    auto cls = se::Class::create("GridBase", obj, nullptr, nullptr);

    cls->defineFunction("setGridSize", js_cocos2dx_GridBase_setGridSize);
    cls->defineFunction("setGridRect", js_cocos2dx_GridBase_setGridRect);
    cls->defineFunction("afterBlit", js_cocos2dx_GridBase_afterBlit);
    cls->defineFunction("getGridRect", js_cocos2dx_GridBase_getGridRect);
    cls->defineFunction("afterDraw", js_cocos2dx_GridBase_afterDraw);
    cls->defineFunction("beforeDraw", js_cocos2dx_GridBase_beforeDraw);
    cls->defineFunction("calculateVertexPoints", js_cocos2dx_GridBase_calculateVertexPoints);
    cls->defineFunction("isTextureFlipped", js_cocos2dx_GridBase_isTextureFlipped);
    cls->defineFunction("getGridSize", js_cocos2dx_GridBase_getGridSize);
    cls->defineFunction("getStep", js_cocos2dx_GridBase_getStep);
    cls->defineFunction("set2DProjection", js_cocos2dx_GridBase_set2DProjection);
    cls->defineFunction("setStep", js_cocos2dx_GridBase_setStep);
    cls->defineFunction("setTextureFlipped", js_cocos2dx_GridBase_setTextureFlipped);
    cls->defineFunction("blit", js_cocos2dx_GridBase_blit);
    cls->defineFunction("setActive", js_cocos2dx_GridBase_setActive);
    cls->defineFunction("getReuseGrid", js_cocos2dx_GridBase_getReuseGrid);
    cls->defineFunction("initWithSize", js_cocos2dx_GridBase_initWithSize);
    cls->defineFunction("beforeBlit", js_cocos2dx_GridBase_beforeBlit);
    cls->defineFunction("setReuseGrid", js_cocos2dx_GridBase_setReuseGrid);
    cls->defineFunction("isActive", js_cocos2dx_GridBase_isActive);
    cls->defineFunction("reuse", js_cocos2dx_GridBase_reuse);
    cls->defineStaticFunction("create", js_cocos2dx_GridBase_create);
    cls->install();

    __jsb_cocos2dx_GridBase_proto = cls->getProto();
    __jsb_cocos2dx_GridBase_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.GridBase.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_Grid3D_proto = nullptr;
se::Class* __jsb_cocos2dx_Grid3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Grid3D_getNeedDepthTestForBlit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Grid3D* cobj = (cocos2d::Grid3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Grid3D_getNeedDepthTestForBlit : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->getNeedDepthTestForBlit();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Grid3D_setNeedDepthTestForBlit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Grid3D* cobj = (cocos2d::Grid3D*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Grid3D_setNeedDepthTestForBlit : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Grid3D_setNeedDepthTestForBlit : Error processing arguments");
        cobj->setNeedDepthTestForBlit(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Grid3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Grid3D* result = cocos2d::Grid3D::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Grid3D>((cocos2d::Grid3D*)result, __jsb_cocos2dx_Grid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Grid3D* result = cocos2d::Grid3D::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Grid3D>((cocos2d::Grid3D*)result, __jsb_cocos2dx_Grid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Grid3D* result = cocos2d::Grid3D::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Grid3D>((cocos2d::Grid3D*)result, __jsb_cocos2dx_Grid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg3;
            ok &= seval_to_Rect(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::Grid3D* result = cocos2d::Grid3D::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Grid3D>((cocos2d::Grid3D*)result, __jsb_cocos2dx_Grid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_Grid3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_Grid3D_constructor, __jsb_cocos2dx_Grid3D_class, js_cocos2dx_Grid3D_finalize)
{
    cocos2d::Grid3D* cobj = new (std::nothrow) cocos2d::Grid3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_Grid3D_ctor, __jsb_cocos2dx_Grid3D_class, js_cocos2dx_Grid3D_finalize)
{
    cocos2d::Grid3D* cobj = new (std::nothrow) cocos2d::Grid3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_Grid3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::Grid3D)", nativeThisObject);
    cocos2d::Grid3D* cobj = (cocos2d::Grid3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_Grid3D(se::Object* obj)
{
    auto cls = se::Class::create("Grid3D", obj, __jsb_cocos2dx_GridBase_proto, js_cocos2dx_Grid3D_constructor);

    cls->defineFunction("getNeedDepthTestForBlit", js_cocos2dx_Grid3D_getNeedDepthTestForBlit);
    cls->defineFunction("setNeedDepthTestForBlit", js_cocos2dx_Grid3D_setNeedDepthTestForBlit);
    cls->defineFunction("ctor", js_cocos2dx_Grid3D_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_Grid3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_Grid3D_finalize);
    cls->install();

    __jsb_cocos2dx_Grid3D_proto = cls->getProto();
    __jsb_cocos2dx_Grid3D_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.Grid3D.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TiledGrid3D_proto = nullptr;
se::Class* __jsb_cocos2dx_TiledGrid3D_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TiledGrid3D_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 2) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg1;
            ok &= seval_to_Rect(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TiledGrid3D* result = cocos2d::TiledGrid3D::create(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TiledGrid3D>((cocos2d::TiledGrid3D*)result, __jsb_cocos2dx_TiledGrid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 1) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::TiledGrid3D* result = cocos2d::TiledGrid3D::create(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TiledGrid3D>((cocos2d::TiledGrid3D*)result, __jsb_cocos2dx_TiledGrid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 3) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TiledGrid3D* result = cocos2d::TiledGrid3D::create(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TiledGrid3D>((cocos2d::TiledGrid3D*)result, __jsb_cocos2dx_TiledGrid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            cocos2d::Size arg0;
            ok &= seval_to_Size(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            ok &= seval_to_boolean(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::Rect arg3;
            ok &= seval_to_Rect(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::TiledGrid3D* result = cocos2d::TiledGrid3D::create(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TiledGrid3D>((cocos2d::TiledGrid3D*)result, __jsb_cocos2dx_TiledGrid3D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TiledGrid3D_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TiledGrid3D_constructor, __jsb_cocos2dx_TiledGrid3D_class, js_cocos2dx_TiledGrid3D_finalize)
{
    cocos2d::TiledGrid3D* cobj = new (std::nothrow) cocos2d::TiledGrid3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TiledGrid3D_ctor, __jsb_cocos2dx_TiledGrid3D_class, js_cocos2dx_TiledGrid3D_finalize)
{
    cocos2d::TiledGrid3D* cobj = new (std::nothrow) cocos2d::TiledGrid3D();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TiledGrid3D_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TiledGrid3D)", nativeThisObject);
    cocos2d::TiledGrid3D* cobj = (cocos2d::TiledGrid3D*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TiledGrid3D(se::Object* obj)
{
    auto cls = se::Class::create("TiledGrid3D", obj, __jsb_cocos2dx_GridBase_proto, js_cocos2dx_TiledGrid3D_constructor);

    cls->defineFunction("ctor", js_cocos2dx_TiledGrid3D_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TiledGrid3D_create);
    cls->defineFinalizedFunction(js_cocos2dx_TiledGrid3D_finalize);
    cls->install();

    __jsb_cocos2dx_TiledGrid3D_proto = cls->getProto();
    __jsb_cocos2dx_TiledGrid3D_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TiledGrid3D.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_BaseLight_proto = nullptr;
se::Class* __jsb_cocos2dx_BaseLight_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_setEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_setEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_BaseLight_setEnabled : Error processing arguments");
        cobj->setEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_getIntensity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_getIntensity : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getIntensity();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_isEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_isEnabled : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isEnabled();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_getLightType, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_getLightType : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getLightType();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_setLightFlag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_setLightFlag : Invalid Native Object");
    if (argc == 1) {
        cocos2d::LightFlag arg0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_BaseLight_setLightFlag : Error processing arguments");
        cobj->setLightFlag(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_setIntensity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_setIntensity : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_BaseLight_setIntensity : Error processing arguments");
        cobj->setIntensity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_BaseLight_getLightFlag, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::BaseLight* cobj = (cocos2d::BaseLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_BaseLight_getLightFlag : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getLightFlag();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_BaseLight(se::Object* obj)
{
    auto cls = se::Class::create("BaseLight", obj, __jsb_cocos2dx_Node_proto, nullptr);

    cls->defineFunction("setEnabled", js_cocos2dx_BaseLight_setEnabled);
    cls->defineFunction("getIntensity", js_cocos2dx_BaseLight_getIntensity);
    cls->defineFunction("isEnabled", js_cocos2dx_BaseLight_isEnabled);
    cls->defineFunction("getLightType", js_cocos2dx_BaseLight_getLightType);
    cls->defineFunction("setLightFlag", js_cocos2dx_BaseLight_setLightFlag);
    cls->defineFunction("setIntensity", js_cocos2dx_BaseLight_setIntensity);
    cls->defineFunction("getLightFlag", js_cocos2dx_BaseLight_getLightFlag);
    cls->install();

    __jsb_cocos2dx_BaseLight_proto = cls->getProto();
    __jsb_cocos2dx_BaseLight_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_DirectionLight_proto = nullptr;
se::Class* __jsb_cocos2dx_DirectionLight_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_DirectionLight_getDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DirectionLight* cobj = (cocos2d::DirectionLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DirectionLight_getDirection : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getDirection();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DirectionLight_getDirectionInWorld, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DirectionLight* cobj = (cocos2d::DirectionLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DirectionLight_getDirectionInWorld : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getDirectionInWorld();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DirectionLight_setDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::DirectionLight* cobj = (cocos2d::DirectionLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_DirectionLight_setDirection : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DirectionLight_setDirection : Error processing arguments");
        cobj->setDirection(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_DirectionLight_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Vec3 arg0;
        cocos2d::Color3B arg1;
        ok &= seval_to_Vec3(args[0], &arg0);
        ok &= seval_to_Color3B(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_DirectionLight_create : Error processing arguments");
        auto result = cocos2d::DirectionLight::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_DirectionLight_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_DirectionLight_finalize)

SE_CTOR_BEGIN(js_cocos2dx_DirectionLight_constructor, __jsb_cocos2dx_DirectionLight_class, js_cocos2dx_DirectionLight_finalize)
{
    cocos2d::DirectionLight* cobj = new (std::nothrow) cocos2d::DirectionLight();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_DirectionLight_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::DirectionLight)", nativeThisObject);
    cocos2d::DirectionLight* cobj = (cocos2d::DirectionLight*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_DirectionLight(se::Object* obj)
{
    auto cls = se::Class::create("DirectionLight", obj, __jsb_cocos2dx_BaseLight_proto, js_cocos2dx_DirectionLight_constructor);

    cls->defineFunction("getDirection", js_cocos2dx_DirectionLight_getDirection);
    cls->defineFunction("getDirectionInWorld", js_cocos2dx_DirectionLight_getDirectionInWorld);
    cls->defineFunction("setDirection", js_cocos2dx_DirectionLight_setDirection);
    cls->defineStaticFunction("create", js_cocos2dx_DirectionLight_create);
    cls->defineFinalizedFunction(js_cocos2dx_DirectionLight_finalize);
    cls->install();

    __jsb_cocos2dx_DirectionLight_proto = cls->getProto();
    __jsb_cocos2dx_DirectionLight_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_PointLight_proto = nullptr;
se::Class* __jsb_cocos2dx_PointLight_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_PointLight_getRange, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::PointLight* cobj = (cocos2d::PointLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_PointLight_getRange : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRange();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_PointLight_setRange, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::PointLight* cobj = (cocos2d::PointLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_PointLight_setRange : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_PointLight_setRange : Error processing arguments");
        cobj->setRange(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_PointLight_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        cocos2d::Vec3 arg0;
        cocos2d::Color3B arg1;
        float arg2 = 0;
        ok &= seval_to_Vec3(args[0], &arg0);
        ok &= seval_to_Color3B(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_PointLight_create : Error processing arguments");
        auto result = cocos2d::PointLight::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_PointLight_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_PointLight_finalize)

SE_CTOR_BEGIN(js_cocos2dx_PointLight_constructor, __jsb_cocos2dx_PointLight_class, js_cocos2dx_PointLight_finalize)
{
    cocos2d::PointLight* cobj = new (std::nothrow) cocos2d::PointLight();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_PointLight_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::PointLight)", nativeThisObject);
    cocos2d::PointLight* cobj = (cocos2d::PointLight*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_PointLight(se::Object* obj)
{
    auto cls = se::Class::create("PointLight", obj, __jsb_cocos2dx_BaseLight_proto, js_cocos2dx_PointLight_constructor);

    cls->defineFunction("getRange", js_cocos2dx_PointLight_getRange);
    cls->defineFunction("setRange", js_cocos2dx_PointLight_setRange);
    cls->defineStaticFunction("create", js_cocos2dx_PointLight_create);
    cls->defineFinalizedFunction(js_cocos2dx_PointLight_finalize);
    cls->install();

    __jsb_cocos2dx_PointLight_proto = cls->getProto();
    __jsb_cocos2dx_PointLight_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_SpotLight_proto = nullptr;
se::Class* __jsb_cocos2dx_SpotLight_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getRange, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getRange : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getRange();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_setDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_setDirection : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec3 arg0;
        ok &= seval_to_Vec3(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpotLight_setDirection : Error processing arguments");
        cobj->setDirection(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getCosInnerAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getCosInnerAngle : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getCosInnerAngle();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getOuterAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getOuterAngle : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getOuterAngle();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getInnerAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getInnerAngle : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getInnerAngle();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getDirection, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getDirection : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getDirection();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getCosOuterAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getCosOuterAngle : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getCosOuterAngle();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_setOuterAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_setOuterAngle : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpotLight_setOuterAngle : Error processing arguments");
        cobj->setOuterAngle(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_setInnerAngle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_setInnerAngle : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpotLight_setInnerAngle : Error processing arguments");
        cobj->setInnerAngle(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_getDirectionInWorld, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_getDirectionInWorld : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Vec3 result = cobj->getDirectionInWorld();
        se::Value jsret;
        ok &= Vec3_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_setRange, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpotLight_setRange : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpotLight_setRange : Error processing arguments");
        cobj->setRange(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpotLight_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 6) {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Color3B arg2;
        float arg3 = 0;
        float arg4 = 0;
        float arg5 = 0;
        ok &= seval_to_Vec3(args[0], &arg0);
        ok &= seval_to_Vec3(args[1], &arg1);
        ok &= seval_to_Color3B(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        ok &= seval_to_float(args[5], &arg5);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpotLight_create : Error processing arguments");
        auto result = cocos2d::SpotLight::create(arg0, arg1, arg2, arg3, arg4, arg5);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpotLight_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SpotLight_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SpotLight_constructor, __jsb_cocos2dx_SpotLight_class, js_cocos2dx_SpotLight_finalize)
{
    cocos2d::SpotLight* cobj = new (std::nothrow) cocos2d::SpotLight();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SpotLight_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SpotLight)", nativeThisObject);
    cocos2d::SpotLight* cobj = (cocos2d::SpotLight*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_SpotLight(se::Object* obj)
{
    auto cls = se::Class::create("SpotLight", obj, __jsb_cocos2dx_BaseLight_proto, js_cocos2dx_SpotLight_constructor);

    cls->defineFunction("getRange", js_cocos2dx_SpotLight_getRange);
    cls->defineFunction("setDirection", js_cocos2dx_SpotLight_setDirection);
    cls->defineFunction("getCosInnerAngle", js_cocos2dx_SpotLight_getCosInnerAngle);
    cls->defineFunction("getOuterAngle", js_cocos2dx_SpotLight_getOuterAngle);
    cls->defineFunction("getInnerAngle", js_cocos2dx_SpotLight_getInnerAngle);
    cls->defineFunction("getDirection", js_cocos2dx_SpotLight_getDirection);
    cls->defineFunction("getCosOuterAngle", js_cocos2dx_SpotLight_getCosOuterAngle);
    cls->defineFunction("setOuterAngle", js_cocos2dx_SpotLight_setOuterAngle);
    cls->defineFunction("setInnerAngle", js_cocos2dx_SpotLight_setInnerAngle);
    cls->defineFunction("getDirectionInWorld", js_cocos2dx_SpotLight_getDirectionInWorld);
    cls->defineFunction("setRange", js_cocos2dx_SpotLight_setRange);
    cls->defineStaticFunction("create", js_cocos2dx_SpotLight_create);
    cls->defineFinalizedFunction(js_cocos2dx_SpotLight_finalize);
    cls->install();

    __jsb_cocos2dx_SpotLight_proto = cls->getProto();
    __jsb_cocos2dx_SpotLight_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_AmbientLight_proto = nullptr;
se::Class* __jsb_cocos2dx_AmbientLight_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_AmbientLight_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Color3B arg0;
        ok &= seval_to_Color3B(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AmbientLight_create : Error processing arguments");
        auto result = cocos2d::AmbientLight::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_AmbientLight_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_AmbientLight_finalize)

SE_CTOR_BEGIN(js_cocos2dx_AmbientLight_constructor, __jsb_cocos2dx_AmbientLight_class, js_cocos2dx_AmbientLight_finalize)
{
    cocos2d::AmbientLight* cobj = new (std::nothrow) cocos2d::AmbientLight();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_AmbientLight_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::AmbientLight)", nativeThisObject);
    cocos2d::AmbientLight* cobj = (cocos2d::AmbientLight*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_AmbientLight(se::Object* obj)
{
    auto cls = se::Class::create("AmbientLight", obj, __jsb_cocos2dx_BaseLight_proto, js_cocos2dx_AmbientLight_constructor);

    cls->defineStaticFunction("create", js_cocos2dx_AmbientLight_create);
    cls->defineFinalizedFunction(js_cocos2dx_AmbientLight_finalize);
    cls->install();

    __jsb_cocos2dx_AmbientLight_proto = cls->getProto();
    __jsb_cocos2dx_AmbientLight_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_GLProgram_proto = nullptr;
se::Class* __jsb_cocos2dx_GLProgram_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getFragmentShaderLog, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getFragmentShaderLog : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getFragmentShaderLog();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_bindAttribLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_bindAttribLocation : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        unsigned int arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_uint32(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_bindAttribLocation : Error processing arguments");
        cobj->bindAttribLocation(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getUniformFlags, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getUniformFlags : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::GLProgram::UniformFlags& result = cobj->getUniformFlags();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR UniformFlags;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getUniformLocationForName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getUniformLocationForName : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_getUniformLocationForName : Error processing arguments");
        int result = cobj->getUniformLocationForName(arg0);
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_use, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_use : Invalid Native Object");
    if (argc == 0) {
        cobj->use();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getVertexShaderLog, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getVertexShaderLog : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getVertexShaderLog();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getUniform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getUniform : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_getUniform : Error processing arguments");
        cocos2d::Uniform* result = cobj->getUniform(arg0);
        se::Value jsret;
        ok &= uniform_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_initWithByteArrays, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgram_initWithByteArrays : Invalid Native Object");

    do {
        if (argc == 3) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithByteArrays(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithByteArrays(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithByteArrays(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith1f, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith1f : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        float arg1 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_float(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith1f : Error processing arguments");
        cobj->setUniformLocationWith1f(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_initWithFilenames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgram_initWithFilenames : Invalid Native Object");

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFilenames(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFilenames(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithFilenames(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith3f, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith3f : Invalid Native Object");
    if (argc == 4) {
        int arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith3f : Error processing arguments");
        cobj->setUniformLocationWith3f(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformsForBuiltins, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_GLProgram_setUniformsForBuiltins : Invalid Native Object");

    do {
        if (argc == 0) {
            cobj->setUniformsForBuiltins();
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Mat4 arg0;
            ok &= seval_to_Mat4(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setUniformsForBuiltins(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith3i, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith3i : Invalid Native Object");
    if (argc == 4) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith3i : Error processing arguments");
        cobj->setUniformLocationWith3i(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith4f, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith4f : Invalid Native Object");
    if (argc == 5) {
        int arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        float arg3 = 0;
        float arg4 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith4f : Error processing arguments");
        cobj->setUniformLocationWith4f(arg0, arg1, arg2, arg3, arg4);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_updateUniforms, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_updateUniforms : Invalid Native Object");
    if (argc == 0) {
        cobj->updateUniforms();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getUniformLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getUniformLocation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_getUniformLocation : Error processing arguments");
        int result = cobj->getUniformLocation(arg0);
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_link, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_link : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->link();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_reset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_reset : Invalid Native Object");
    if (argc == 0) {
        cobj->reset();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getAttribLocation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getAttribLocation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_getAttribLocation : Error processing arguments");
        int result = cobj->getAttribLocation(arg0);
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_getVertexAttrib, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_getVertexAttrib : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_getVertexAttrib : Error processing arguments");
        cocos2d::VertexAttrib* result = cobj->getVertexAttrib(arg0);
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR VertexAttrib*;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith2f, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith2f : Invalid Native Object");
    if (argc == 3) {
        int arg0 = 0;
        float arg1 = 0;
        float arg2 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_float(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith2f : Error processing arguments");
        cobj->setUniformLocationWith2f(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith4i, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith4i : Invalid Native Object");
    if (argc == 5) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        int arg4 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        ok &= seval_to_int32(args[4], (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith4i : Error processing arguments");
        cobj->setUniformLocationWith4i(arg0, arg1, arg2, arg3, arg4);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith1i, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith1i : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        int arg1 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith1i : Error processing arguments");
        cobj->setUniformLocationWith1i(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_setUniformLocationWith2i, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgram_setUniformLocationWith2i : Invalid Native Object");
    if (argc == 3) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgram_setUniformLocationWith2i : Error processing arguments");
        cobj->setUniformLocationWith2i(arg0, arg1, arg2);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_createWithByteArrays, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithByteArrays(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithByteArrays(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            const char* arg1 = nullptr;
            std::string arg1_tmp; ok &= seval_to_std_string(args[1], &arg1_tmp); arg1 = arg1_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithByteArrays(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgram_createWithFilenames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithFilenames(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithFilenames(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 4) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            cocos2d::GLProgram* result = cocos2d::GLProgram::createWithFilenames(arg0, arg1, arg2, arg3);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_GLProgram_finalize)

SE_CTOR_BEGIN(js_cocos2dx_GLProgram_constructor, __jsb_cocos2dx_GLProgram_class, js_cocos2dx_GLProgram_finalize)
{
    cocos2d::GLProgram* cobj = new (std::nothrow) cocos2d::GLProgram();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_GLProgram_ctor, __jsb_cocos2dx_GLProgram_class, js_cocos2dx_GLProgram_finalize)
{
    cocos2d::GLProgram* cobj = new (std::nothrow) cocos2d::GLProgram();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_GLProgram_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::GLProgram)", nativeThisObject);
    cocos2d::GLProgram* cobj = (cocos2d::GLProgram*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_GLProgram(se::Object* obj)
{
    auto cls = se::Class::create("GLProgram", obj, nullptr, js_cocos2dx_GLProgram_constructor);

    cls->defineFunction("getFragmentShaderLog", js_cocos2dx_GLProgram_getFragmentShaderLog);
    cls->defineFunction("addAttribute", js_cocos2dx_GLProgram_bindAttribLocation);
    cls->defineFunction("getUniformFlags", js_cocos2dx_GLProgram_getUniformFlags);
    cls->defineFunction("getUniformLocationForName", js_cocos2dx_GLProgram_getUniformLocationForName);
    cls->defineFunction("use", js_cocos2dx_GLProgram_use);
    cls->defineFunction("getVertexShaderLog", js_cocos2dx_GLProgram_getVertexShaderLog);
    cls->defineFunction("getUniform", js_cocos2dx_GLProgram_getUniform);
    cls->defineFunction("initWithString", js_cocos2dx_GLProgram_initWithByteArrays);
    cls->defineFunction("setUniformLocationWith1f", js_cocos2dx_GLProgram_setUniformLocationWith1f);
    cls->defineFunction("init", js_cocos2dx_GLProgram_initWithFilenames);
    cls->defineFunction("setUniformLocationWith3f", js_cocos2dx_GLProgram_setUniformLocationWith3f);
    cls->defineFunction("setUniformsForBuiltins", js_cocos2dx_GLProgram_setUniformsForBuiltins);
    cls->defineFunction("setUniformLocationWith3i", js_cocos2dx_GLProgram_setUniformLocationWith3i);
    cls->defineFunction("setUniformLocationWith4f", js_cocos2dx_GLProgram_setUniformLocationWith4f);
    cls->defineFunction("updateUniforms", js_cocos2dx_GLProgram_updateUniforms);
    cls->defineFunction("getUniformLocation", js_cocos2dx_GLProgram_getUniformLocation);
    cls->defineFunction("link", js_cocos2dx_GLProgram_link);
    cls->defineFunction("reset", js_cocos2dx_GLProgram_reset);
    cls->defineFunction("getAttribLocation", js_cocos2dx_GLProgram_getAttribLocation);
    cls->defineFunction("getVertexAttrib", js_cocos2dx_GLProgram_getVertexAttrib);
    cls->defineFunction("setUniformLocationWith2f", js_cocos2dx_GLProgram_setUniformLocationWith2f);
    cls->defineFunction("setUniformLocationWith4i", js_cocos2dx_GLProgram_setUniformLocationWith4i);
    cls->defineFunction("setUniformLocationI32", js_cocos2dx_GLProgram_setUniformLocationWith1i);
    cls->defineFunction("setUniformLocationWith2i", js_cocos2dx_GLProgram_setUniformLocationWith2i);
    cls->defineFunction("ctor", js_cocos2dx_GLProgram_ctor);
    cls->defineStaticFunction("createWithByteArrays", js_cocos2dx_GLProgram_createWithByteArrays);
    cls->defineStaticFunction("createWithFilenames", js_cocos2dx_GLProgram_createWithFilenames);
    cls->defineFinalizedFunction(js_cocos2dx_GLProgram_finalize);
    cls->install();

    __jsb_cocos2dx_GLProgram_proto = cls->getProto();
    __jsb_cocos2dx_GLProgram_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.GLProgram.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_GLProgramCache_proto = nullptr;
se::Class* __jsb_cocos2dx_GLProgramCache_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_loadDefaultGLPrograms, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramCache_loadDefaultGLPrograms : Invalid Native Object");
    if (argc == 0) {
        cobj->loadDefaultGLPrograms();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_reloadDefaultGLProgramsRelativeToLights, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramCache_reloadDefaultGLProgramsRelativeToLights : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadDefaultGLProgramsRelativeToLights();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_addGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramCache_addGLProgram : Invalid Native Object");
    if (argc == 2) {
        cocos2d::GLProgram* arg0 = nullptr;
        std::string arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramCache_addGLProgram : Error processing arguments");
        cobj->addGLProgram(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_reloadDefaultGLPrograms, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramCache_reloadDefaultGLPrograms : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadDefaultGLPrograms();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_getGLProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_GLProgramCache_getGLProgram : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_GLProgramCache_getGLProgram : Error processing arguments");
        cocos2d::GLProgram* result = cobj->getGLProgram(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgram>((cocos2d::GLProgram*)result, __jsb_cocos2dx_GLProgram_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_destroyInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::GLProgramCache::destroyInstance();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::GLProgramCache::getInstance();
        se::Object* obj = nullptr;
        if (result->_scriptObject == nullptr)
        {
            obj = se::Object::createObjectWithClass(__jsb_cocos2dx_GLProgramCache_class, true);
            obj->setPrivateData(result);
            result->_scriptObject = obj;
        }
        else
        {
            obj = se::Object::getObjectWithPtr(result);
        }
        assert(obj);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_GLProgramCache_finalize)

SE_CTOR_BEGIN(js_cocos2dx_GLProgramCache_constructor, __jsb_cocos2dx_GLProgramCache_class, js_cocos2dx_GLProgramCache_finalize)
{
    cocos2d::GLProgramCache* cobj = new (std::nothrow) cocos2d::GLProgramCache();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_GLProgramCache_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::GLProgramCache)", nativeThisObject);
    cocos2d::GLProgramCache* cobj = (cocos2d::GLProgramCache*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_GLProgramCache(se::Object* obj)
{
    auto cls = se::Class::create("ShaderCache", obj, nullptr, js_cocos2dx_GLProgramCache_constructor);

    cls->defineFunction("loadDefaultShaders", js_cocos2dx_GLProgramCache_loadDefaultGLPrograms);
    cls->defineFunction("reloadDefaultGLProgramsRelativeToLights", js_cocos2dx_GLProgramCache_reloadDefaultGLProgramsRelativeToLights);
    cls->defineFunction("addProgram", js_cocos2dx_GLProgramCache_addGLProgram);
    cls->defineFunction("reloadDefaultShaders", js_cocos2dx_GLProgramCache_reloadDefaultGLPrograms);
    cls->defineFunction("getProgram", js_cocos2dx_GLProgramCache_getGLProgram);
    cls->defineStaticFunction("destroyInstance", js_cocos2dx_GLProgramCache_destroyInstance);
    cls->defineStaticFunction("getInstance", js_cocos2dx_GLProgramCache_getInstance);
    cls->defineFinalizedFunction(js_cocos2dx_GLProgramCache_finalize);
    cls->install();

    __jsb_cocos2dx_GLProgramCache_proto = cls->getProto();
    __jsb_cocos2dx_GLProgramCache_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_RenderState_proto = nullptr;
se::Class* __jsb_cocos2dx_RenderState_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_RenderState_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderState_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_getTopmost, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_getTopmost : Invalid Native Object");
    if (argc == 1) {
        cocos2d::RenderState* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderState_getTopmost : Error processing arguments");
        cocos2d::RenderState* result = cobj->getTopmost(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::RenderState>((cocos2d::RenderState*)result, __jsb_cocos2dx_RenderState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_bind, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_bind : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Pass* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderState_bind : Error processing arguments");
        cobj->bind(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_getName : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_setParent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::RenderState* cobj = (cocos2d::RenderState*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_RenderState_setParent : Invalid Native Object");
    if (argc == 1) {
        cocos2d::RenderState* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_RenderState_setParent : Error processing arguments");
        cobj->setParent(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_initialize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::RenderState::initialize();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_RenderState_finalize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::RenderState::finalize();
    }
}
SE_FUNC_END

bool js_register_cocos2dx_RenderState(se::Object* obj)
{
    auto cls = se::Class::create("RenderState", obj, nullptr, nullptr);

    cls->defineFunction("setTexture", js_cocos2dx_RenderState_setTexture);
    cls->defineFunction("getTopmost", js_cocos2dx_RenderState_getTopmost);
    cls->defineFunction("getTexture", js_cocos2dx_RenderState_getTexture);
    cls->defineFunction("bind", js_cocos2dx_RenderState_bind);
    cls->defineFunction("getName", js_cocos2dx_RenderState_getName);
    cls->defineFunction("setParent", js_cocos2dx_RenderState_setParent);
    cls->defineStaticFunction("initialize", js_cocos2dx_RenderState_initialize);
    cls->defineStaticFunction("finalize", js_cocos2dx_RenderState_finalize);
    cls->install();

    __jsb_cocos2dx_RenderState_proto = cls->getProto();
    __jsb_cocos2dx_RenderState_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Pass_proto = nullptr;
se::Class* __jsb_cocos2dx_Pass_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Pass_unbind, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Pass_unbind : Invalid Native Object");
    if (argc == 0) {
        cobj->unbind();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_bind, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_Pass_bind : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Mat4 arg0;
            ok &= seval_to_Mat4(args[0], &arg0);
            if (!ok) { ok = true; break; }
            bool arg1;
            ok &= seval_to_boolean(args[1], &arg1);
            cobj->bind(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Mat4 arg0;
            ok &= seval_to_Mat4(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->bind(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Pass_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Pass* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Pass>((cocos2d::Pass*)result, __jsb_cocos2dx_Pass_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_getGLProgramState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Pass_getGLProgramState : Invalid Native Object");
    if (argc == 0) {
        cocos2d::GLProgramState* result = cobj->getGLProgramState();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::GLProgramState>((cocos2d::GLProgramState*)result, __jsb_cocos2dx_GLProgramState_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_getHash, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Pass_getHash : Invalid Native Object");
    if (argc == 0) {
        unsigned int result = cobj->getHash();
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_setVertexAttribBinding, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Pass* cobj = (cocos2d::Pass*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Pass_setVertexAttribBinding : Invalid Native Object");
    if (argc == 1) {
        cocos2d::VertexAttribBinding* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Pass_setVertexAttribBinding : Error processing arguments");
        cobj->setVertexAttribBinding(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Technique* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Pass_create : Error processing arguments");
        auto result = cocos2d::Pass::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Pass_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Pass_createWithGLProgramState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Technique* arg0 = nullptr;
        cocos2d::GLProgramState* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Pass_createWithGLProgramState : Error processing arguments");
        auto result = cocos2d::Pass::createWithGLProgramState(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Pass_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Pass(se::Object* obj)
{
    auto cls = se::Class::create("Pass", obj, __jsb_cocos2dx_RenderState_proto, nullptr);

    cls->defineFunction("unbind", js_cocos2dx_Pass_unbind);
    cls->defineFunction("bind", js_cocos2dx_Pass_bind);
    cls->defineFunction("clone", js_cocos2dx_Pass_clone);
    cls->defineFunction("getGLProgramState", js_cocos2dx_Pass_getGLProgramState);
    cls->defineFunction("getHash", js_cocos2dx_Pass_getHash);
    cls->defineFunction("setVertexAttribBinding", js_cocos2dx_Pass_setVertexAttribBinding);
    cls->defineStaticFunction("create", js_cocos2dx_Pass_create);
    cls->defineStaticFunction("createWithGLProgramState", js_cocos2dx_Pass_createWithGLProgramState);
    cls->install();

    __jsb_cocos2dx_Pass_proto = cls->getProto();
    __jsb_cocos2dx_Pass_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Technique_proto = nullptr;
se::Class* __jsb_cocos2dx_Technique_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Technique_getPassCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_getPassCount : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getPassCount();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Technique* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Technique>((cocos2d::Technique*)result, __jsb_cocos2dx_Technique_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_addPass, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_addPass : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Pass* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Technique_addPass : Error processing arguments");
        cobj->addPass(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_getPasses, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_getPasses : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vector<cocos2d::Pass *>& result = cobj->getPasses();
        se::Value jsret;
        ok &= Vector_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_getName : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_getPassByIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Technique* cobj = (cocos2d::Technique*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Technique_getPassByIndex : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= seval_to_ssize(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Technique_getPassByIndex : Error processing arguments");
        cocos2d::Pass* result = cobj->getPassByIndex(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Pass>((cocos2d::Pass*)result, __jsb_cocos2dx_Pass_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Material* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Technique_create : Error processing arguments");
        auto result = cocos2d::Technique::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Technique_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Technique_createWithGLProgramState, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        cocos2d::Material* arg0 = nullptr;
        cocos2d::GLProgramState* arg1 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Technique_createWithGLProgramState : Error processing arguments");
        auto result = cocos2d::Technique::createWithGLProgramState(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Technique_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Technique(se::Object* obj)
{
    auto cls = se::Class::create("Technique", obj, __jsb_cocos2dx_RenderState_proto, nullptr);

    cls->defineFunction("getPassCount", js_cocos2dx_Technique_getPassCount);
    cls->defineFunction("clone", js_cocos2dx_Technique_clone);
    cls->defineFunction("addPass", js_cocos2dx_Technique_addPass);
    cls->defineFunction("getPasses", js_cocos2dx_Technique_getPasses);
    cls->defineFunction("getName", js_cocos2dx_Technique_getName);
    cls->defineFunction("getPassByIndex", js_cocos2dx_Technique_getPassByIndex);
    cls->defineStaticFunction("create", js_cocos2dx_Technique_create);
    cls->defineStaticFunction("createWithGLProgramState", js_cocos2dx_Technique_createWithGLProgramState);
    cls->install();

    __jsb_cocos2dx_Technique_proto = cls->getProto();
    __jsb_cocos2dx_Technique_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Material_proto = nullptr;
se::Class* __jsb_cocos2dx_Material_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Material_clone, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_clone : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Material* result = cobj->clone();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Material>((cocos2d::Material*)result, __jsb_cocos2dx_Material_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getTechniqueCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getTechniqueCount : Invalid Native Object");
    if (argc == 0) {
        ssize_t result = cobj->getTechniqueCount();
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_setName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_setName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_setName : Error processing arguments");
        cobj->setName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getTechniqueByIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getTechniqueByIndex : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= seval_to_ssize(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_getTechniqueByIndex : Error processing arguments");
        cocos2d::Technique* result = cobj->getTechniqueByIndex(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Technique>((cocos2d::Technique*)result, __jsb_cocos2dx_Technique_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getName : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getTechniques, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getTechniques : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vector<cocos2d::Technique *>& result = cobj->getTechniques();
        se::Value jsret;
        ok &= Vector_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_setTechnique, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_setTechnique : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_setTechnique : Error processing arguments");
        cobj->setTechnique(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getTechniqueByName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getTechniqueByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_getTechniqueByName : Error processing arguments");
        cocos2d::Technique* result = cobj->getTechniqueByName(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Technique>((cocos2d::Technique*)result, __jsb_cocos2dx_Technique_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_addTechnique, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_addTechnique : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Technique* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_addTechnique : Error processing arguments");
        cobj->addTechnique(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_getTechnique, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Material* cobj = (cocos2d::Material*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Material_getTechnique : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Technique* result = cobj->getTechnique();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Technique>((cocos2d::Technique*)result, __jsb_cocos2dx_Technique_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_createWithFilename, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_createWithFilename : Error processing arguments");
        auto result = cocos2d::Material::createWithFilename(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Material_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_createWithGLStateProgram, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::GLProgramState* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_createWithGLStateProgram : Error processing arguments");
        auto result = cocos2d::Material::createWithGLStateProgram(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Material_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Material_createWithProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Properties* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Material_createWithProperties : Error processing arguments");
        auto result = cocos2d::Material::createWithProperties(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_Material_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Material(se::Object* obj)
{
    auto cls = se::Class::create("Material", obj, __jsb_cocos2dx_RenderState_proto, nullptr);

    cls->defineFunction("clone", js_cocos2dx_Material_clone);
    cls->defineFunction("getTechniqueCount", js_cocos2dx_Material_getTechniqueCount);
    cls->defineFunction("setName", js_cocos2dx_Material_setName);
    cls->defineFunction("getTechniqueByIndex", js_cocos2dx_Material_getTechniqueByIndex);
    cls->defineFunction("getName", js_cocos2dx_Material_getName);
    cls->defineFunction("getTechniques", js_cocos2dx_Material_getTechniques);
    cls->defineFunction("setTechnique", js_cocos2dx_Material_setTechnique);
    cls->defineFunction("getTechniqueByName", js_cocos2dx_Material_getTechniqueByName);
    cls->defineFunction("addTechnique", js_cocos2dx_Material_addTechnique);
    cls->defineFunction("getTechnique", js_cocos2dx_Material_getTechnique);
    cls->defineStaticFunction("createWithFilename", js_cocos2dx_Material_createWithFilename);
    cls->defineStaticFunction("createWithGLStateProgram", js_cocos2dx_Material_createWithGLStateProgram);
    cls->defineStaticFunction("createWithProperties", js_cocos2dx_Material_createWithProperties);
    cls->install();

    __jsb_cocos2dx_Material_proto = cls->getProto();
    __jsb_cocos2dx_Material_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TextureCache_proto = nullptr;
se::Class* __jsb_cocos2dx_TextureCache_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_reloadTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_reloadTexture : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_reloadTexture : Error processing arguments");
        bool result = cobj->reloadTexture(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_unbindAllImageAsync, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_unbindAllImageAsync : Invalid Native Object");
    if (argc == 0) {
        cobj->unbindAllImageAsync();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_removeTextureForKey, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_removeTextureForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_removeTextureForKey : Error processing arguments");
        cobj->removeTextureForKey(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_removeAllTextures, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_removeAllTextures : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllTextures();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_addImageAsync, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TextureCache_addImageAsync : Invalid Native Object");

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (cocos2d::Texture2D *)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](cocos2d::Texture2D* larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)larg0, __jsb_cocos2dx_TextureCache_class, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= seval_to_std_string(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cobj->addImageAsync(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::function<void (cocos2d::Texture2D *)> arg1;
            do {
			    if (args[1].isObject() && args[1].toObject()->isFunction())
			    {
			        se::Value jsThis(thisObject);
			        se::Value jsFunc(args[1]);
			        jsThis.toObject()->attachChild(jsFunc.toObject());
			        auto lambda = [=](cocos2d::Texture2D* larg0) -> void {
			            bool ok = true;
			            se::ValueArray args;
			            args.resize(1);
			            ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)larg0, __jsb_cocos2dx_TextureCache_class, &args[0]);
			            se::Value rval;
			            se::Object* thisObj = jsThis.toObject();
			            se::Object* funcObj = jsFunc.toObject();
			            bool succeed = funcObj->call(args, thisObj, &rval);
			            if (!succeed) {
			                se::ScriptEngine::getInstance()->clearException();
			            }
			        };
			        arg1 = lambda;
			    }
			    else
			    {
			        arg1 = nullptr;
			    }
			} while(false)
			;
            if (!ok) { ok = true; break; }
            cobj->addImageAsync(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_getDescription, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_getDescription : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getDescription();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_getCachedTextureInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_getCachedTextureInfo : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getCachedTextureInfo();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_addImage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TextureCache_addImage : Invalid Native Object");

    do {
        if (argc == 2) {
            cocos2d::Image* arg0 = nullptr;
            ok &= seval_to_native_ptr(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* result = cobj->addImage(arg0, arg1);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* result = cobj->addImage(arg0);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_unbindImageAsync, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_unbindImageAsync : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_unbindImageAsync : Error processing arguments");
        cobj->unbindImageAsync(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_getTextureForKey, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_getTextureForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_getTextureForKey : Error processing arguments");
        cocos2d::Texture2D* result = cobj->getTextureForKey(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_getTextureFilePath, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_getTextureFilePath : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_getTextureFilePath : Error processing arguments");
        std::string result = cobj->getTextureFilePath(arg0);
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_renameTextureWithKey, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_renameTextureWithKey : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_renameTextureWithKey : Error processing arguments");
        cobj->renameTextureWithKey(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_removeUnusedTextures, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_removeUnusedTextures : Invalid Native Object");
    if (argc == 0) {
        cobj->removeUnusedTextures();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_removeTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_removeTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_removeTexture : Error processing arguments");
        cobj->removeTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_waitForQuit, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextureCache_waitForQuit : Invalid Native Object");
    if (argc == 0) {
        cobj->waitForQuit();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_setETC1AlphaFileSuffix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextureCache_setETC1AlphaFileSuffix : Error processing arguments");
        cocos2d::TextureCache::setETC1AlphaFileSuffix(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextureCache_getETC1AlphaFileSuffix, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        std::string result = cocos2d::TextureCache::getETC1AlphaFileSuffix();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TextureCache_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TextureCache_constructor, __jsb_cocos2dx_TextureCache_class, js_cocos2dx_TextureCache_finalize)
{
    cocos2d::TextureCache* cobj = new (std::nothrow) cocos2d::TextureCache();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TextureCache_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TextureCache)", nativeThisObject);
    cocos2d::TextureCache* cobj = (cocos2d::TextureCache*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_TextureCache(se::Object* obj)
{
    auto cls = se::Class::create("TextureCache", obj, nullptr, js_cocos2dx_TextureCache_constructor);

    cls->defineFunction("reloadTexture", js_cocos2dx_TextureCache_reloadTexture);
    cls->defineFunction("unbindAllImageAsync", js_cocos2dx_TextureCache_unbindAllImageAsync);
    cls->defineFunction("removeTextureForKey", js_cocos2dx_TextureCache_removeTextureForKey);
    cls->defineFunction("removeAllTextures", js_cocos2dx_TextureCache_removeAllTextures);
    cls->defineFunction("addImageAsync", js_cocos2dx_TextureCache_addImageAsync);
    cls->defineFunction("getDescription", js_cocos2dx_TextureCache_getDescription);
    cls->defineFunction("getCachedTextureInfo", js_cocos2dx_TextureCache_getCachedTextureInfo);
    cls->defineFunction("addImage", js_cocos2dx_TextureCache_addImage);
    cls->defineFunction("unbindImageAsync", js_cocos2dx_TextureCache_unbindImageAsync);
    cls->defineFunction("getTextureForKey", js_cocos2dx_TextureCache_getTextureForKey);
    cls->defineFunction("getTextureFilePath", js_cocos2dx_TextureCache_getTextureFilePath);
    cls->defineFunction("renameTextureWithKey", js_cocos2dx_TextureCache_renameTextureWithKey);
    cls->defineFunction("removeUnusedTextures", js_cocos2dx_TextureCache_removeUnusedTextures);
    cls->defineFunction("removeTexture", js_cocos2dx_TextureCache_removeTexture);
    cls->defineFunction("waitForQuit", js_cocos2dx_TextureCache_waitForQuit);
    cls->defineStaticFunction("setETC1AlphaFileSuffix", js_cocos2dx_TextureCache_setETC1AlphaFileSuffix);
    cls->defineStaticFunction("getETC1AlphaFileSuffix", js_cocos2dx_TextureCache_getETC1AlphaFileSuffix);
    cls->defineFinalizedFunction(js_cocos2dx_TextureCache_finalize);
    cls->install();

    __jsb_cocos2dx_TextureCache_proto = cls->getProto();
    __jsb_cocos2dx_TextureCache_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Device_proto = nullptr;
se::Class* __jsb_cocos2dx_Device_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Device_setAccelerometerEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Device_setAccelerometerEnabled : Error processing arguments");
        cocos2d::Device::setAccelerometerEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Device_setAccelerometerInterval, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Device_setAccelerometerInterval : Error processing arguments");
        cocos2d::Device::setAccelerometerInterval(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Device_setKeepScreenOn, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Device_setKeepScreenOn : Error processing arguments");
        cocos2d::Device::setKeepScreenOn(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Device_vibrate, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Device_vibrate : Error processing arguments");
        cocos2d::Device::vibrate(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Device_getDPI, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        int result = cocos2d::Device::getDPI();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Device(se::Object* obj)
{
    auto cls = se::Class::create("Device", obj, nullptr, nullptr);

    cls->defineStaticFunction("setAccelerometerEnabled", js_cocos2dx_Device_setAccelerometerEnabled);
    cls->defineStaticFunction("setAccelerometerInterval", js_cocos2dx_Device_setAccelerometerInterval);
    cls->defineStaticFunction("setKeepScreenOn", js_cocos2dx_Device_setKeepScreenOn);
    cls->defineStaticFunction("vibrate", js_cocos2dx_Device_vibrate);
    cls->defineStaticFunction("getDPI", js_cocos2dx_Device_getDPI);
    cls->install();

    __jsb_cocos2dx_Device_proto = cls->getProto();
    __jsb_cocos2dx_Device_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_SAXParser_proto = nullptr;
se::Class* __jsb_cocos2dx_SAXParser_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SAXParser_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SAXParser* cobj = (cocos2d::SAXParser*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SAXParser_init : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SAXParser_init : Error processing arguments");
        bool result = cobj->init(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_SAXParser(se::Object* obj)
{
    auto cls = se::Class::create("PlistParser", obj, nullptr, nullptr);

    cls->defineFunction("init", js_cocos2dx_SAXParser_init);
    cls->install();

    __jsb_cocos2dx_SAXParser_proto = cls->getProto();
    __jsb_cocos2dx_SAXParser_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_Application_proto = nullptr;
se::Class* __jsb_cocos2dx_Application_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_Application_getTargetPlatform, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Application* cobj = (cocos2d::Application*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Application_getTargetPlatform : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getTargetPlatform();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Application_getCurrentLanguage, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Application* cobj = (cocos2d::Application*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Application_getCurrentLanguage : Invalid Native Object");
    if (argc == 0) {
        int result = (int)cobj->getCurrentLanguage();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Application_openURL, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Application* cobj = (cocos2d::Application*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Application_openURL : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_Application_openURL : Error processing arguments");
        bool result = cobj->openURL(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Application_getVersion, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::Application* cobj = (cocos2d::Application*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_Application_getVersion : Invalid Native Object");
    if (argc == 0) {
        std::string result = cobj->getVersion();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_Application_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::Application* result = cocos2d::Application::getInstance();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Application>((cocos2d::Application*)result, __jsb_cocos2dx_Application_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_Application(se::Object* obj)
{
    auto cls = se::Class::create("Application", obj, nullptr, nullptr);

    cls->defineFunction("getTargetPlatform", js_cocos2dx_Application_getTargetPlatform);
    cls->defineFunction("getCurrentLanguage", js_cocos2dx_Application_getCurrentLanguage);
    cls->defineFunction("openURL", js_cocos2dx_Application_openURL);
    cls->defineFunction("getVersion", js_cocos2dx_Application_getVersion);
    cls->defineStaticFunction("getInstance", js_cocos2dx_Application_getInstance);
    cls->install();

    __jsb_cocos2dx_Application_proto = cls->getProto();
    __jsb_cocos2dx_Application_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_AnimationCache_proto = nullptr;
se::Class* __jsb_cocos2dx_AnimationCache_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_getAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_getAnimation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationCache_getAnimation : Error processing arguments");
        cocos2d::Animation* result = cobj->getAnimation(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Animation>((cocos2d::Animation*)result, __jsb_cocos2dx_Animation_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_addAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_addAnimation : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Animation* arg0 = nullptr;
        std::string arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationCache_addAnimation : Error processing arguments");
        cobj->addAnimation(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_addAnimationsWithDictionary, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_addAnimationsWithDictionary : Invalid Native Object");
    if (argc == 2) {
        cocos2d::ValueMap arg0;
        std::string arg1;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationCache_addAnimationsWithDictionary : Error processing arguments");
        cobj->addAnimationsWithDictionary(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_removeAnimation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_removeAnimation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationCache_removeAnimation : Error processing arguments");
        cobj->removeAnimation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_addAnimationsWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_AnimationCache_addAnimationsWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_AnimationCache_addAnimationsWithFile : Error processing arguments");
        cobj->addAnimationsWithFile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_destroyInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::AnimationCache::destroyInstance();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_AnimationCache_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::AnimationCache::getInstance();
        se::Object* obj = nullptr;
        if (result->_scriptObject == nullptr)
        {
            obj = se::Object::createObjectWithClass(__jsb_cocos2dx_AnimationCache_class, true);
            obj->setPrivateData(result);
            result->_scriptObject = obj;
        }
        else
        {
            obj = se::Object::getObjectWithPtr(result);
        }
        assert(obj);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_AnimationCache_finalize)

SE_CTOR_BEGIN(js_cocos2dx_AnimationCache_constructor, __jsb_cocos2dx_AnimationCache_class, js_cocos2dx_AnimationCache_finalize)
{
    cocos2d::AnimationCache* cobj = new (std::nothrow) cocos2d::AnimationCache();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_AnimationCache_ctor, __jsb_cocos2dx_AnimationCache_class, js_cocos2dx_AnimationCache_finalize)
{
    cocos2d::AnimationCache* cobj = new (std::nothrow) cocos2d::AnimationCache();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_AnimationCache_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::AnimationCache)", nativeThisObject);
    cocos2d::AnimationCache* cobj = (cocos2d::AnimationCache*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_AnimationCache(se::Object* obj)
{
    auto cls = se::Class::create("AnimationCache", obj, nullptr, js_cocos2dx_AnimationCache_constructor);

    cls->defineFunction("getAnimation", js_cocos2dx_AnimationCache_getAnimation);
    cls->defineFunction("addAnimation", js_cocos2dx_AnimationCache_addAnimation);
    cls->defineFunction("init", js_cocos2dx_AnimationCache_init);
    cls->defineFunction("addAnimationsWithDictionary", js_cocos2dx_AnimationCache_addAnimationsWithDictionary);
    cls->defineFunction("removeAnimation", js_cocos2dx_AnimationCache_removeAnimation);
    cls->defineFunction("addAnimations", js_cocos2dx_AnimationCache_addAnimationsWithFile);
    cls->defineFunction("ctor", js_cocos2dx_AnimationCache_ctor);
    cls->defineStaticFunction("destroyInstance", js_cocos2dx_AnimationCache_destroyInstance);
    cls->defineStaticFunction("getInstance", js_cocos2dx_AnimationCache_getInstance);
    cls->defineFinalizedFunction(js_cocos2dx_AnimationCache_finalize);
    cls->install();

    __jsb_cocos2dx_AnimationCache_proto = cls->getProto();
    __jsb_cocos2dx_AnimationCache_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.AnimationCache.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SpriteBatchNode_proto = nullptr;
se::Class* __jsb_cocos2dx_SpriteBatchNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_appendChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_appendChild : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_appendChild : Error processing arguments");
        cobj->appendChild(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_reorderBatch, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_reorderBatch : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_reorderBatch : Error processing arguments");
        cobj->reorderBatch(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_getTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_getTexture : Invalid Native Object");
    if (argc == 0) {
        cocos2d::Texture2D* result = cobj->getTexture();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Texture2D>((cocos2d::Texture2D*)result, __jsb_cocos2dx_Texture2D_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_setTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_setTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_setTexture : Error processing arguments");
        cobj->setTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_removeChildAtIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_removeChildAtIndex : Invalid Native Object");
    if (argc == 2) {
        ssize_t arg0 = 0;
        bool arg1;
        ok &= seval_to_ssize(args[0], &arg0);
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_removeChildAtIndex : Error processing arguments");
        cobj->removeChildAtIndex(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas : Error processing arguments");
        cobj->removeSpriteFromAtlas(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad : Invalid Native Object");
    if (argc == 3) {
        cocos2d::Sprite* arg0 = nullptr;
        int arg1 = 0;
        int arg2 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad : Error processing arguments");
        cocos2d::SpriteBatchNode* result = cobj->addSpriteWithoutQuad(arg0, arg1, arg2);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteBatchNode>((cocos2d::SpriteBatchNode*)result, __jsb_cocos2dx_SpriteBatchNode_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_atlasIndexForChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_atlasIndexForChild : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Sprite* arg0 = nullptr;
        int arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_atlasIndexForChild : Error processing arguments");
        ssize_t result = cobj->atlasIndexForChild(arg0, arg1);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_increaseAtlasCapacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_increaseAtlasCapacity : Invalid Native Object");
    if (argc == 0) {
        cobj->increaseAtlasCapacity();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild : Error processing arguments");
        ssize_t result = cobj->lowestAtlasIndexInChild(arg0);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_getBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::BlendFunc& result = cobj->getBlendFunc();
        se::Value jsret;
        ok &= blendfunc_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_initWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_initWithTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_initWithTexture : Error processing arguments");
        bool result = cobj->initWithTexture(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        ssize_t arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_initWithTexture : Error processing arguments");
        bool result = cobj->initWithTexture(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_setTextureAtlas, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_setTextureAtlas : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TextureAtlas* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_setTextureAtlas : Error processing arguments");
        cobj->setTextureAtlas(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_reserveCapacity, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_reserveCapacity : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= seval_to_ssize(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_reserveCapacity : Error processing arguments");
        cobj->reserveCapacity(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_insertQuadFromSprite, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_insertQuadFromSprite : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Sprite* arg0 = nullptr;
        ssize_t arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_insertQuadFromSprite : Error processing arguments");
        cobj->insertQuadFromSprite(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_initWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_initWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_initWithFile : Error processing arguments");
        bool result = cobj->initWithFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        std::string arg0;
        ssize_t arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_initWithFile : Error processing arguments");
        bool result = cobj->initWithFile(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_setBlendFunc, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        cocos2d::BlendFunc arg0;
        ok &= seval_to_blendfunc(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_rebuildIndexInOrder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_rebuildIndexInOrder : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Sprite* arg0 = nullptr;
        ssize_t arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_rebuildIndexInOrder : Error processing arguments");
        ssize_t result = cobj->rebuildIndexInOrder(arg0, arg1);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Sprite* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild : Error processing arguments");
        ssize_t result = cobj->highestAtlasIndexInChild(arg0);
        se::Value jsret;
        ok &= ssize_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_create : Error processing arguments");
        auto result = cocos2d::SpriteBatchNode::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpriteBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        std::string arg0;
        ssize_t arg1 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_create : Error processing arguments");
        auto result = cocos2d::SpriteBatchNode::create(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpriteBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_createWithTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_createWithTexture : Error processing arguments");
        auto result = cocos2d::SpriteBatchNode::createWithTexture(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpriteBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
    if (argc == 2) {
        cocos2d::Texture2D* arg0 = nullptr;
        ssize_t arg1 = 0;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_ssize(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteBatchNode_createWithTexture : Error processing arguments");
        auto result = cocos2d::SpriteBatchNode::createWithTexture(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpriteBatchNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_SpriteBatchNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_SpriteBatchNode_constructor, __jsb_cocos2dx_SpriteBatchNode_class, js_cocos2dx_SpriteBatchNode_finalize)
{
    cocos2d::SpriteBatchNode* cobj = new (std::nothrow) cocos2d::SpriteBatchNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_SpriteBatchNode_ctor, __jsb_cocos2dx_SpriteBatchNode_class, js_cocos2dx_SpriteBatchNode_finalize)
{
    cocos2d::SpriteBatchNode* cobj = new (std::nothrow) cocos2d::SpriteBatchNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_SpriteBatchNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::SpriteBatchNode)", nativeThisObject);
    cocos2d::SpriteBatchNode* cobj = (cocos2d::SpriteBatchNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_SpriteBatchNode(se::Object* obj)
{
    auto cls = se::Class::create("SpriteBatchNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_SpriteBatchNode_constructor);

    cls->defineFunction("appendChild", js_cocos2dx_SpriteBatchNode_appendChild);
    cls->defineFunction("reorderBatch", js_cocos2dx_SpriteBatchNode_reorderBatch);
    cls->defineFunction("getTexture", js_cocos2dx_SpriteBatchNode_getTexture);
    cls->defineFunction("setTexture", js_cocos2dx_SpriteBatchNode_setTexture);
    cls->defineFunction("removeChildAtIndex", js_cocos2dx_SpriteBatchNode_removeChildAtIndex);
    cls->defineFunction("removeSpriteFromAtlas", js_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas);
    cls->defineFunction("addSpriteWithoutQuad", js_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad);
    cls->defineFunction("atlasIndexForChild", js_cocos2dx_SpriteBatchNode_atlasIndexForChild);
    cls->defineFunction("increaseAtlasCapacity", js_cocos2dx_SpriteBatchNode_increaseAtlasCapacity);
    cls->defineFunction("lowestAtlasIndexInChild", js_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild);
    cls->defineFunction("getBlendFunc", js_cocos2dx_SpriteBatchNode_getBlendFunc);
    cls->defineFunction("initWithTexture", js_cocos2dx_SpriteBatchNode_initWithTexture);
    cls->defineFunction("setTextureAtlas", js_cocos2dx_SpriteBatchNode_setTextureAtlas);
    cls->defineFunction("reserveCapacity", js_cocos2dx_SpriteBatchNode_reserveCapacity);
    cls->defineFunction("insertQuadFromSprite", js_cocos2dx_SpriteBatchNode_insertQuadFromSprite);
    cls->defineFunction("initWithFile", js_cocos2dx_SpriteBatchNode_initWithFile);
    cls->defineFunction("setBlendFunc", js_cocos2dx_SpriteBatchNode_setBlendFunc);
    cls->defineFunction("rebuildIndexInOrder", js_cocos2dx_SpriteBatchNode_rebuildIndexInOrder);
    cls->defineFunction("highestAtlasIndexInChild", js_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild);
    cls->defineFunction("ctor", js_cocos2dx_SpriteBatchNode_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_SpriteBatchNode_create);
    cls->defineStaticFunction("createWithTexture", js_cocos2dx_SpriteBatchNode_createWithTexture);
    cls->defineFinalizedFunction(js_cocos2dx_SpriteBatchNode_finalize);
    cls->install();

    __jsb_cocos2dx_SpriteBatchNode_proto = cls->getProto();
    __jsb_cocos2dx_SpriteBatchNode_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.SpriteBatchNode.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SpriteFrameCache_proto = nullptr;
se::Class* __jsb_cocos2dx_SpriteFrameCache_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_reloadTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_reloadTexture : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_reloadTexture : Error processing arguments");
        bool result = cobj->reloadTexture(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        cocos2d::Texture2D* arg1 = nullptr;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent : Error processing arguments");
        cobj->addSpriteFramesWithFileContent(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_addSpriteFrame, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_addSpriteFrame : Invalid Native Object");
    if (argc == 2) {
        cocos2d::SpriteFrame* arg0 = nullptr;
        std::string arg1;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_addSpriteFrame : Error processing arguments");
        cobj->addSpriteFrame(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile : Invalid Native Object");

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0);
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Texture2D* arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_getSpriteFrameByName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_getSpriteFrameByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_getSpriteFrameByName : Error processing arguments");
        cocos2d::SpriteFrame* result = cobj->getSpriteFrameByName(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::SpriteFrame>((cocos2d::SpriteFrame*)result, __jsb_cocos2dx_SpriteFrame_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile : Error processing arguments");
        cobj->removeSpriteFramesFromFile(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_init, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_init : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->init();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeSpriteFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFrames : Invalid Native Object");
    if (argc == 0) {
        cobj->removeSpriteFrames();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames : Invalid Native Object");
    if (argc == 0) {
        cobj->removeUnusedSpriteFrames();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent : Error processing arguments");
        cobj->removeSpriteFramesFromFileContent(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeSpriteFrameByName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFrameByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFrameByName : Error processing arguments");
        cobj->removeSpriteFrameByName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_isSpriteFramesWithFileLoaded, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_isSpriteFramesWithFileLoaded : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_isSpriteFramesWithFileLoaded : Error processing arguments");
        bool result = cobj->isSpriteFramesWithFileLoaded(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::SpriteFrameCache* cobj = (cocos2d::SpriteFrameCache*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Texture2D* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture : Error processing arguments");
        cobj->removeSpriteFramesFromTexture(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_destroyInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        cocos2d::SpriteFrameCache::destroyInstance();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SpriteFrameCache_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::SpriteFrameCache::getInstance();
        se::Object* obj = nullptr;
        if (result->_scriptObject == nullptr)
        {
            obj = se::Object::createObjectWithClass(__jsb_cocos2dx_SpriteFrameCache_class, true);
            obj->setPrivateData(result);
            result->_scriptObject = obj;
        }
        else
        {
            obj = se::Object::getObjectWithPtr(result);
        }
        assert(obj);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

bool js_register_cocos2dx_SpriteFrameCache(se::Object* obj)
{
    auto cls = se::Class::create("SpriteFrameCache", obj, nullptr, nullptr);

    cls->defineFunction("reloadTexture", js_cocos2dx_SpriteFrameCache_reloadTexture);
    cls->defineFunction("addSpriteFramesWithFileContent", js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent);
    cls->defineFunction("addSpriteFrame", js_cocos2dx_SpriteFrameCache_addSpriteFrame);
    cls->defineFunction("addSpriteFrames", js_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile);
    cls->defineFunction("getSpriteFrame", js_cocos2dx_SpriteFrameCache_getSpriteFrameByName);
    cls->defineFunction("removeSpriteFramesFromFile", js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile);
    cls->defineFunction("init", js_cocos2dx_SpriteFrameCache_init);
    cls->defineFunction("removeSpriteFrames", js_cocos2dx_SpriteFrameCache_removeSpriteFrames);
    cls->defineFunction("removeUnusedSpriteFrames", js_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames);
    cls->defineFunction("removeSpriteFramesFromFileContent", js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent);
    cls->defineFunction("removeSpriteFrameByName", js_cocos2dx_SpriteFrameCache_removeSpriteFrameByName);
    cls->defineFunction("isSpriteFramesWithFileLoaded", js_cocos2dx_SpriteFrameCache_isSpriteFramesWithFileLoaded);
    cls->defineFunction("removeSpriteFramesFromTexture", js_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture);
    cls->defineStaticFunction("destroyInstance", js_cocos2dx_SpriteFrameCache_destroyInstance);
    cls->defineStaticFunction("getInstance", js_cocos2dx_SpriteFrameCache_getInstance);
    cls->install();

    __jsb_cocos2dx_SpriteFrameCache_proto = cls->getProto();
    __jsb_cocos2dx_SpriteFrameCache_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TextFieldTTF_proto = nullptr;
se::Class* __jsb_cocos2dx_TextFieldTTF_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_getCharCount, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_getCharCount : Invalid Native Object");
    if (argc == 0) {
        unsigned long result = cobj->getCharCount();
        se::Value jsret;
        ok &= ulong_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setCursorChar, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setCursorChar : Invalid Native Object");
    if (argc == 1) {
        int8_t arg0;
        ok &= seval_to_int8(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setCursorChar : Error processing arguments");
        cobj->setCursorChar(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setSecureTextEntry, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setSecureTextEntry : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setSecureTextEntry : Error processing arguments");
        cobj->setSecureTextEntry(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setCursorEnabled, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setCursorEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setCursorEnabled : Error processing arguments");
        cobj->setCursorEnabled(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_getColorSpaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_getColorSpaceHolder : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Color4B& result = cobj->getColorSpaceHolder();
        se::Value jsret;
        ok &= Color4B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_initWithPlaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TextFieldTTF_initWithPlaceHolder : Invalid Native Object");

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithPlaceHolder(arg0, arg1, arg2);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg1;
            ok &= seval_to_Size(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            bool result = cobj->initWithPlaceHolder(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_appendString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_appendString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_appendString : Error processing arguments");
        cobj->appendString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_getPasswordTextStyle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_getPasswordTextStyle : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getPasswordTextStyle();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setPasswordTextStyle, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setPasswordTextStyle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setPasswordTextStyle : Error processing arguments");
        cobj->setPasswordTextStyle(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setColorSpaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TextFieldTTF_setColorSpaceHolder : Invalid Native Object");

    do {
        if (argc == 1) {
            cocos2d::Color4B arg0;
            ok &= seval_to_Color4B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setColorSpaceHolder(arg0);
        }
    } while(0);

    do {
        if (argc == 1) {
            cocos2d::Color3B arg0;
            ok &= seval_to_Color3B(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cobj->setColorSpaceHolder(arg0);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_detachWithIME, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_detachWithIME : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->detachWithIME();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setPlaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setPlaceHolder : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setPlaceHolder : Error processing arguments");
        cobj->setPlaceHolder(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setCursorFromPoint, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setCursorFromPoint : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Vec2 arg0;
        const cocos2d::Camera* arg1 = nullptr;
        ok &= seval_to_Vec2(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setCursorFromPoint : Error processing arguments");
        cobj->setCursorFromPoint(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_isSecureTextEntry, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_isSecureTextEntry : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isSecureTextEntry();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_getPlaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_getPlaceHolder : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getPlaceHolder();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_setCursorPosition, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_setCursorPosition : Invalid Native Object");
    if (argc == 1) {
        unsigned long arg0 = 0;
        ok &= seval_to_ulong(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TextFieldTTF_setCursorPosition : Error processing arguments");
        cobj->setCursorPosition(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_attachWithIME, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TextFieldTTF_attachWithIME : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->attachWithIME();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_textFieldWithPlaceHolder, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= seval_to_std_string(args[1], &arg1);
            if (!ok) { ok = true; break; }
            float arg2 = 0;
            ok &= seval_to_float(args[2], &arg2);
            if (!ok) { ok = true; break; }
            cocos2d::TextFieldTTF* result = cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg0, arg1, arg2);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TextFieldTTF>((cocos2d::TextFieldTTF*)result, __jsb_cocos2dx_TextFieldTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
    
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= seval_to_std_string(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Size arg1;
            ok &= seval_to_Size(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TextHAlignment arg2;
            ok &= seval_to_int32(args[2], (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            std::string arg3;
            ok &= seval_to_std_string(args[3], &arg3);
            if (!ok) { ok = true; break; }
            float arg4 = 0;
            ok &= seval_to_float(args[4], &arg4);
            if (!ok) { ok = true; break; }
            cocos2d::TextFieldTTF* result = cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg0, arg1, arg2, arg3, arg4);
            se::Value jsret;
            ok &= native_ptr_to_seval<cocos2d::TextFieldTTF>((cocos2d::TextFieldTTF*)result, __jsb_cocos2dx_TextFieldTTF_class, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while (0);
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TextFieldTTF_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TextFieldTTF_constructor, __jsb_cocos2dx_TextFieldTTF_class, js_cocos2dx_TextFieldTTF_finalize)
{
    cocos2d::TextFieldTTF* cobj = new (std::nothrow) cocos2d::TextFieldTTF();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TextFieldTTF_ctor, __jsb_cocos2dx_TextFieldTTF_class, js_cocos2dx_TextFieldTTF_finalize)
{
    cocos2d::TextFieldTTF* cobj = new (std::nothrow) cocos2d::TextFieldTTF();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TextFieldTTF_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TextFieldTTF)", nativeThisObject);
    cocos2d::TextFieldTTF* cobj = (cocos2d::TextFieldTTF*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TextFieldTTF(se::Object* obj)
{
    auto cls = se::Class::create("TextFieldTTF", obj, __jsb_cocos2dx_Label_proto, js_cocos2dx_TextFieldTTF_constructor);

    cls->defineFunction("getCharCount", js_cocos2dx_TextFieldTTF_getCharCount);
    cls->defineFunction("setCursorChar", js_cocos2dx_TextFieldTTF_setCursorChar);
    cls->defineFunction("setSecureTextEntry", js_cocos2dx_TextFieldTTF_setSecureTextEntry);
    cls->defineFunction("setCursorEnabled", js_cocos2dx_TextFieldTTF_setCursorEnabled);
    cls->defineFunction("getColorSpaceHolder", js_cocos2dx_TextFieldTTF_getColorSpaceHolder);
    cls->defineFunction("initWithPlaceHolder", js_cocos2dx_TextFieldTTF_initWithPlaceHolder);
    cls->defineFunction("appendString", js_cocos2dx_TextFieldTTF_appendString);
    cls->defineFunction("getPasswordTextStyle", js_cocos2dx_TextFieldTTF_getPasswordTextStyle);
    cls->defineFunction("setPasswordTextStyle", js_cocos2dx_TextFieldTTF_setPasswordTextStyle);
    cls->defineFunction("setColorSpaceHolder", js_cocos2dx_TextFieldTTF_setColorSpaceHolder);
    cls->defineFunction("detachWithIME", js_cocos2dx_TextFieldTTF_detachWithIME);
    cls->defineFunction("setPlaceHolder", js_cocos2dx_TextFieldTTF_setPlaceHolder);
    cls->defineFunction("setCursorFromPoint", js_cocos2dx_TextFieldTTF_setCursorFromPoint);
    cls->defineFunction("isSecureTextEntry", js_cocos2dx_TextFieldTTF_isSecureTextEntry);
    cls->defineFunction("getPlaceHolder", js_cocos2dx_TextFieldTTF_getPlaceHolder);
    cls->defineFunction("setCursorPosition", js_cocos2dx_TextFieldTTF_setCursorPosition);
    cls->defineFunction("attachWithIME", js_cocos2dx_TextFieldTTF_attachWithIME);
    cls->defineFunction("ctor", js_cocos2dx_TextFieldTTF_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TextFieldTTF_textFieldWithPlaceHolder);
    cls->defineFinalizedFunction(js_cocos2dx_TextFieldTTF_finalize);
    cls->install();

    __jsb_cocos2dx_TextFieldTTF_proto = cls->getProto();
    __jsb_cocos2dx_TextFieldTTF_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TextFieldTTF.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_ParallaxNode_proto = nullptr;
se::Class* __jsb_cocos2dx_ParallaxNode_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_getParallaxArray, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParallaxNode* cobj = (cocos2d::ParallaxNode*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_ParallaxNode_getParallaxArray : Invalid Native Object");

    do {
        if (argc == 0) {
            const cocos2d::_ccArray* result = cobj->getParallaxArray();
            se::Value jsret;
            #pragma warning NO CONVERSION FROM NATIVE FOR _ccArray*;
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            cocos2d::_ccArray* result = cobj->getParallaxArray();
            se::Value jsret;
            #pragma warning NO CONVERSION FROM NATIVE FOR _ccArray*;
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_addChild, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParallaxNode* cobj = (cocos2d::ParallaxNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParallaxNode_addChild : Invalid Native Object");
    if (argc == 4) {
        cocos2d::Node* arg0 = nullptr;
        int arg1 = 0;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_int32(args[1], (int32_t *)&arg1);
        ok &= seval_to_Vec2(args[2], &arg2);
        ok &= seval_to_Vec2(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParallaxNode_addChild : Error processing arguments");
        cobj->addChild(arg0, arg1, arg2, arg3);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParallaxNode* cobj = (cocos2d::ParallaxNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup : Error processing arguments");
        cobj->removeAllChildrenWithCleanup(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_setParallaxArray, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::ParallaxNode* cobj = (cocos2d::ParallaxNode*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_ParallaxNode_setParallaxArray : Invalid Native Object");
    if (argc == 1) {
        cocos2d::_ccArray* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccArray*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_ParallaxNode_setParallaxArray : Error processing arguments");
        cobj->setParallaxArray(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        auto result = cocos2d::ParallaxNode::create();
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_ParallaxNode_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_ParallaxNode_finalize)

SE_CTOR_BEGIN(js_cocos2dx_ParallaxNode_constructor, __jsb_cocos2dx_ParallaxNode_class, js_cocos2dx_ParallaxNode_finalize)
{
    cocos2d::ParallaxNode* cobj = new (std::nothrow) cocos2d::ParallaxNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_ParallaxNode_ctor, __jsb_cocos2dx_ParallaxNode_class, js_cocos2dx_ParallaxNode_finalize)
{
    cocos2d::ParallaxNode* cobj = new (std::nothrow) cocos2d::ParallaxNode();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_ParallaxNode_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::ParallaxNode)", nativeThisObject);
    cocos2d::ParallaxNode* cobj = (cocos2d::ParallaxNode*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_ParallaxNode(se::Object* obj)
{
    auto cls = se::Class::create("ParallaxNode", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_ParallaxNode_constructor);

    cls->defineFunction("getParallaxArray", js_cocos2dx_ParallaxNode_getParallaxArray);
    cls->defineFunction("addChild", js_cocos2dx_ParallaxNode_addChild);
    cls->defineFunction("removeAllChildrenWithCleanup", js_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup);
    cls->defineFunction("setParallaxArray", js_cocos2dx_ParallaxNode_setParallaxArray);
    cls->defineFunction("ctor", js_cocos2dx_ParallaxNode_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_ParallaxNode_create);
    cls->defineFinalizedFunction(js_cocos2dx_ParallaxNode_finalize);
    cls->install();

    __jsb_cocos2dx_ParallaxNode_proto = cls->getProto();
    __jsb_cocos2dx_ParallaxNode_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.ParallaxNode.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TMXObjectGroup_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXObjectGroup_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_setPositionOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_setPositionOffset : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_setPositionOffset : Error processing arguments");
        cobj->setPositionOffset(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getProperty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_getProperty : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_getProperty : Error processing arguments");
        cocos2d::Value result = cobj->getProperty(arg0);
        se::Value jsret;
        ok &= ccvalue_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getPositionOffset, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_getPositionOffset : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Vec2& result = cobj->getPositionOffset();
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getObject, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_getObject : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_getObject : Error processing arguments");
        cocos2d::ValueMap result = cobj->getObject(arg0);
        se::Value jsret;
        ok &= ccvaluemap_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getObjects, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXObjectGroup_getObjects : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::ValueVector& result = cobj->getObjects();
            se::Value jsret;
            ok &= ccvaluevector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::ValueVector& result = cobj->getObjects();
            se::Value jsret;
            ok &= ccvaluevector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_setGroupName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_setGroupName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_setGroupName : Error processing arguments");
        cobj->setGroupName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXObjectGroup_getProperties : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_getGroupName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_getGroupName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getGroupName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_setProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_setProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_setProperties : Error processing arguments");
        cobj->setProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_setObjects, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXObjectGroup_setObjects : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueVector arg0;
        ok &= seval_to_ccvaluevector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXObjectGroup_setObjects : Error processing arguments");
        cobj->setObjects(arg0);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXObjectGroup_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXObjectGroup_constructor, __jsb_cocos2dx_TMXObjectGroup_class, js_cocos2dx_TMXObjectGroup_finalize)
{
    cocos2d::TMXObjectGroup* cobj = new (std::nothrow) cocos2d::TMXObjectGroup();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXObjectGroup_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXObjectGroup)", nativeThisObject);
    cocos2d::TMXObjectGroup* cobj = (cocos2d::TMXObjectGroup*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_TMXObjectGroup(se::Object* obj)
{
    auto cls = se::Class::create("TMXObjectGroup", obj, nullptr, js_cocos2dx_TMXObjectGroup_constructor);

    cls->defineFunction("setPositionOffset", js_cocos2dx_TMXObjectGroup_setPositionOffset);
    cls->defineFunction("getProperty", js_cocos2dx_TMXObjectGroup_getProperty);
    cls->defineFunction("getPositionOffset", js_cocos2dx_TMXObjectGroup_getPositionOffset);
    cls->defineFunction("getObject", js_cocos2dx_TMXObjectGroup_getObject);
    cls->defineFunction("getObjects", js_cocos2dx_TMXObjectGroup_getObjects);
    cls->defineFunction("setGroupName", js_cocos2dx_TMXObjectGroup_setGroupName);
    cls->defineFunction("getProperties", js_cocos2dx_TMXObjectGroup_getProperties);
    cls->defineFunction("getGroupName", js_cocos2dx_TMXObjectGroup_getGroupName);
    cls->defineFunction("setProperties", js_cocos2dx_TMXObjectGroup_setProperties);
    cls->defineFunction("setObjects", js_cocos2dx_TMXObjectGroup_setObjects);
    cls->defineFinalizedFunction(js_cocos2dx_TMXObjectGroup_finalize);
    cls->install();

    __jsb_cocos2dx_TMXObjectGroup_proto = cls->getProto();
    __jsb_cocos2dx_TMXObjectGroup_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TMXLayerInfo_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXLayerInfo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXLayerInfo_setProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayerInfo* cobj = (cocos2d::TMXLayerInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayerInfo_setProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayerInfo_setProperties : Error processing arguments");
        cobj->setProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayerInfo_getProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayerInfo* cobj = (cocos2d::TMXLayerInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayerInfo_getProperties : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ValueMap& result = cobj->getProperties();
        se::Value jsret;
        ok &= ccvaluemap_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXLayerInfo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXLayerInfo_constructor, __jsb_cocos2dx_TMXLayerInfo_class, js_cocos2dx_TMXLayerInfo_finalize)
{
    cocos2d::TMXLayerInfo* cobj = new (std::nothrow) cocos2d::TMXLayerInfo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXLayerInfo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXLayerInfo)", nativeThisObject);
    cocos2d::TMXLayerInfo* cobj = (cocos2d::TMXLayerInfo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_TMXLayerInfo(se::Object* obj)
{
    auto cls = se::Class::create("TMXLayerInfo", obj, nullptr, js_cocos2dx_TMXLayerInfo_constructor);

    cls->defineFunction("setProperties", js_cocos2dx_TMXLayerInfo_setProperties);
    cls->defineFunction("getProperties", js_cocos2dx_TMXLayerInfo_getProperties);
    cls->defineFinalizedFunction(js_cocos2dx_TMXLayerInfo_finalize);
    cls->install();

    __jsb_cocos2dx_TMXLayerInfo_proto = cls->getProto();
    __jsb_cocos2dx_TMXLayerInfo_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TMXTilesetInfo_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXTilesetInfo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXTilesetInfo_getRectForGID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTilesetInfo* cobj = (cocos2d::TMXTilesetInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTilesetInfo_getRectForGID : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTilesetInfo_getRectForGID : Error processing arguments");
        cocos2d::Rect result = cobj->getRectForGID(arg0);
        se::Value jsret;
        ok &= Rect_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXTilesetInfo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXTilesetInfo_constructor, __jsb_cocos2dx_TMXTilesetInfo_class, js_cocos2dx_TMXTilesetInfo_finalize)
{
    cocos2d::TMXTilesetInfo* cobj = new (std::nothrow) cocos2d::TMXTilesetInfo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXTilesetInfo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXTilesetInfo)", nativeThisObject);
    cocos2d::TMXTilesetInfo* cobj = (cocos2d::TMXTilesetInfo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END

bool js_register_cocos2dx_TMXTilesetInfo(se::Object* obj)
{
    auto cls = se::Class::create("TMXTilesetInfo", obj, nullptr, js_cocos2dx_TMXTilesetInfo_constructor);

    cls->defineFunction("getRectForGID", js_cocos2dx_TMXTilesetInfo_getRectForGID);
    cls->defineFinalizedFunction(js_cocos2dx_TMXTilesetInfo_finalize);
    cls->install();

    __jsb_cocos2dx_TMXTilesetInfo_proto = cls->getProto();
    __jsb_cocos2dx_TMXTilesetInfo_class = cls;

    return true;
}

se::Object* __jsb_cocos2dx_TMXMapInfo_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXMapInfo_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setCurrentString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setCurrentString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setCurrentString : Error processing arguments");
        cobj->setCurrentString(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getHexSideLength, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getHexSideLength : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getHexSideLength();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setTileSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setTileSize : Error processing arguments");
        cobj->setTileSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_initWithTMXFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_initWithTMXFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_initWithTMXFile : Error processing arguments");
        bool result = cobj->initWithTMXFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getOrientation : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getOrientation();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setObjectGroups, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setObjectGroups : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::TMXObjectGroup *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setObjectGroups : Error processing arguments");
        cobj->setObjectGroups(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setLayers, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setLayers : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::TMXLayerInfo *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setLayers : Error processing arguments");
        cobj->setLayers(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_parseXMLFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_parseXMLFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_parseXMLFile : Error processing arguments");
        bool result = cobj->parseXMLFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getParentElement, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getParentElement : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getParentElement();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setTMXFileName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setTMXFileName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setTMXFileName : Error processing arguments");
        cobj->setTMXFileName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_parseXMLString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_parseXMLString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_parseXMLString : Error processing arguments");
        bool result = cobj->parseXMLString(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getLayers, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXMapInfo_getLayers : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::Vector<cocos2d::TMXLayerInfo *>& result = cobj->getLayers();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Vector<cocos2d::TMXLayerInfo *>& result = cobj->getLayers();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getStaggerAxis, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getStaggerAxis : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getStaggerAxis();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setHexSideLength, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setHexSideLength : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setHexSideLength : Error processing arguments");
        cobj->setHexSideLength(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getTilesets, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXMapInfo_getTilesets : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::Vector<cocos2d::TMXTilesetInfo *>& result = cobj->getTilesets();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Vector<cocos2d::TMXTilesetInfo *>& result = cobj->getTilesets();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getParentGID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getParentGID : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getParentGID();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setParentElement, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setParentElement : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setParentElement : Error processing arguments");
        cobj->setParentElement(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_initWithXML, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_initWithXML : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_initWithXML : Error processing arguments");
        bool result = cobj->initWithXML(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setParentGID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setParentGID : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setParentGID : Error processing arguments");
        cobj->setParentGID(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getLayerAttribs, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getLayerAttribs : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getLayerAttribs();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getTileSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getTileSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getTileProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getTileProperties : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ValueMapIntKey& result = cobj->getTileProperties();
        se::Value jsret;
        ok &= ccvaluemapintkey_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_isStoringCharacters, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_isStoringCharacters : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isStoringCharacters();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getExternalTilesetFileName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getExternalTilesetFileName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getExternalTilesetFileName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getObjectGroups, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXMapInfo_getObjectGroups : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::Vector<cocos2d::TMXObjectGroup *>& result = cobj->getObjectGroups();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Vector<cocos2d::TMXObjectGroup *>& result = cobj->getObjectGroups();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getTMXFileName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getTMXFileName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getTMXFileName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setStaggerIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setStaggerIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setStaggerIndex : Error processing arguments");
        cobj->setStaggerIndex(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setProperties : Error processing arguments");
        cobj->setProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setOrientation : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setOrientation : Error processing arguments");
        cobj->setOrientation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setTileProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setTileProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMapIntKey arg0;
        ok &= seval_to_ccvaluemapintkey(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setTileProperties : Error processing arguments");
        cobj->setTileProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setMapSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setMapSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setMapSize : Error processing arguments");
        cobj->setMapSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getCurrentString, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getCurrentString : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getCurrentString();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setStoringCharacters, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setStoringCharacters : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setStoringCharacters : Error processing arguments");
        cobj->setStoringCharacters(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setStaggerAxis, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setStaggerAxis : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setStaggerAxis : Error processing arguments");
        cobj->setStaggerAxis(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getMapSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getMapSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getMapSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setTilesets, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setTilesets : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::TMXTilesetInfo *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setTilesets : Error processing arguments");
        cobj->setTilesets(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXMapInfo_getProperties : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_getStaggerIndex, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_getStaggerIndex : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getStaggerIndex();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_setLayerAttribs, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXMapInfo_setLayerAttribs : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_setLayerAttribs : Error processing arguments");
        cobj->setLayerAttribs(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_create : Error processing arguments");
        auto result = cocos2d::TMXMapInfo::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TMXMapInfo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_createWithXML, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXMapInfo_createWithXML : Error processing arguments");
        auto result = cocos2d::TMXMapInfo::createWithXML(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TMXMapInfo_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXMapInfo_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXMapInfo_constructor, __jsb_cocos2dx_TMXMapInfo_class, js_cocos2dx_TMXMapInfo_finalize)
{
    cocos2d::TMXMapInfo* cobj = new (std::nothrow) cocos2d::TMXMapInfo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TMXMapInfo_ctor, __jsb_cocos2dx_TMXMapInfo_class, js_cocos2dx_TMXMapInfo_finalize)
{
    cocos2d::TMXMapInfo* cobj = new (std::nothrow) cocos2d::TMXMapInfo();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXMapInfo_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXMapInfo)", nativeThisObject);
    cocos2d::TMXMapInfo* cobj = (cocos2d::TMXMapInfo*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TMXMapInfo(se::Object* obj)
{
    auto cls = se::Class::create("TMXMapInfo", obj, nullptr, js_cocos2dx_TMXMapInfo_constructor);

    cls->defineFunction("setCurrentString", js_cocos2dx_TMXMapInfo_setCurrentString);
    cls->defineFunction("getHexSideLength", js_cocos2dx_TMXMapInfo_getHexSideLength);
    cls->defineFunction("setTileSize", js_cocos2dx_TMXMapInfo_setTileSize);
    cls->defineFunction("initWithTMXFile", js_cocos2dx_TMXMapInfo_initWithTMXFile);
    cls->defineFunction("getOrientation", js_cocos2dx_TMXMapInfo_getOrientation);
    cls->defineFunction("setObjectGroups", js_cocos2dx_TMXMapInfo_setObjectGroups);
    cls->defineFunction("setLayers", js_cocos2dx_TMXMapInfo_setLayers);
    cls->defineFunction("parseXMLFile", js_cocos2dx_TMXMapInfo_parseXMLFile);
    cls->defineFunction("getParentElement", js_cocos2dx_TMXMapInfo_getParentElement);
    cls->defineFunction("setTMXFileName", js_cocos2dx_TMXMapInfo_setTMXFileName);
    cls->defineFunction("parseXMLString", js_cocos2dx_TMXMapInfo_parseXMLString);
    cls->defineFunction("getLayers", js_cocos2dx_TMXMapInfo_getLayers);
    cls->defineFunction("getStaggerAxis", js_cocos2dx_TMXMapInfo_getStaggerAxis);
    cls->defineFunction("setHexSideLength", js_cocos2dx_TMXMapInfo_setHexSideLength);
    cls->defineFunction("getTilesets", js_cocos2dx_TMXMapInfo_getTilesets);
    cls->defineFunction("getParentGID", js_cocos2dx_TMXMapInfo_getParentGID);
    cls->defineFunction("setParentElement", js_cocos2dx_TMXMapInfo_setParentElement);
    cls->defineFunction("initWithXML", js_cocos2dx_TMXMapInfo_initWithXML);
    cls->defineFunction("setParentGID", js_cocos2dx_TMXMapInfo_setParentGID);
    cls->defineFunction("getLayerAttribs", js_cocos2dx_TMXMapInfo_getLayerAttribs);
    cls->defineFunction("getTileSize", js_cocos2dx_TMXMapInfo_getTileSize);
    cls->defineFunction("getTileProperties", js_cocos2dx_TMXMapInfo_getTileProperties);
    cls->defineFunction("isStoringCharacters", js_cocos2dx_TMXMapInfo_isStoringCharacters);
    cls->defineFunction("getExternalTilesetFileName", js_cocos2dx_TMXMapInfo_getExternalTilesetFileName);
    cls->defineFunction("getObjectGroups", js_cocos2dx_TMXMapInfo_getObjectGroups);
    cls->defineFunction("getTMXFileName", js_cocos2dx_TMXMapInfo_getTMXFileName);
    cls->defineFunction("setStaggerIndex", js_cocos2dx_TMXMapInfo_setStaggerIndex);
    cls->defineFunction("setProperties", js_cocos2dx_TMXMapInfo_setProperties);
    cls->defineFunction("setOrientation", js_cocos2dx_TMXMapInfo_setOrientation);
    cls->defineFunction("setTileProperties", js_cocos2dx_TMXMapInfo_setTileProperties);
    cls->defineFunction("setMapSize", js_cocos2dx_TMXMapInfo_setMapSize);
    cls->defineFunction("getCurrentString", js_cocos2dx_TMXMapInfo_getCurrentString);
    cls->defineFunction("setStoringCharacters", js_cocos2dx_TMXMapInfo_setStoringCharacters);
    cls->defineFunction("setStaggerAxis", js_cocos2dx_TMXMapInfo_setStaggerAxis);
    cls->defineFunction("getMapSize", js_cocos2dx_TMXMapInfo_getMapSize);
    cls->defineFunction("setTilesets", js_cocos2dx_TMXMapInfo_setTilesets);
    cls->defineFunction("getProperties", js_cocos2dx_TMXMapInfo_getProperties);
    cls->defineFunction("getStaggerIndex", js_cocos2dx_TMXMapInfo_getStaggerIndex);
    cls->defineFunction("setLayerAttribs", js_cocos2dx_TMXMapInfo_setLayerAttribs);
    cls->defineFunction("ctor", js_cocos2dx_TMXMapInfo_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TMXMapInfo_create);
    cls->defineStaticFunction("createWithXML", js_cocos2dx_TMXMapInfo_createWithXML);
    cls->defineFinalizedFunction(js_cocos2dx_TMXMapInfo_finalize);
    cls->install();

    __jsb_cocos2dx_TMXMapInfo_proto = cls->getProto();
    __jsb_cocos2dx_TMXMapInfo_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TMXMapInfo.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TMXLayer_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXLayer_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getTileGIDAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getTileGIDAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_getTileGIDAt : Error processing arguments");
        unsigned int result = cobj->getTileGIDAt(arg0);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        cocos2d::Vec2 arg0;
        cocos2d::TMXTileFlags_* arg1 = nullptr;
        ok &= seval_to_Vec2(args[0], &arg0);
        uint32_t tempData;arg1=(cocos2d::TMXTileFlags_*)&tempData;ok &= seval_to_uint32(args[1], (uint32_t *)&arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_getTileGIDAt : Error processing arguments");
        unsigned int result = cobj->getTileGIDAt(arg0, arg1);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getPositionAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getPositionAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_getPositionAt : Error processing arguments");
        cocos2d::Vec2 result = cobj->getPositionAt(arg0);
        se::Value jsret;
        ok &= Vec2_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setLayerOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setLayerOrientation : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setLayerOrientation : Error processing arguments");
        cobj->setLayerOrientation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_releaseMap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_releaseMap : Invalid Native Object");
    if (argc == 0) {
        cobj->releaseMap();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setTiles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setTiles : Invalid Native Object");
    if (argc == 1) {
        unsigned int* arg0 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned int*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setTiles : Error processing arguments");
        cobj->setTiles(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getLayerSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getLayerSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getLayerSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setMapTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setMapTileSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setMapTileSize : Error processing arguments");
        cobj->setMapTileSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getLayerOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getLayerOrientation : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getLayerOrientation();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setProperties : Error processing arguments");
        cobj->setProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setLayerName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setLayerName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setLayerName : Error processing arguments");
        cobj->setLayerName(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_removeTileAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_removeTileAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_removeTileAt : Error processing arguments");
        cobj->removeTileAt(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_initWithTilesetInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_initWithTilesetInfo : Invalid Native Object");
    if (argc == 3) {
        cocos2d::TMXTilesetInfo* arg0 = nullptr;
        cocos2d::TMXLayerInfo* arg1 = nullptr;
        cocos2d::TMXMapInfo* arg2 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_native_ptr(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_initWithTilesetInfo : Error processing arguments");
        bool result = cobj->initWithTilesetInfo(arg0, arg1, arg2);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setupTiles, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setupTiles : Invalid Native Object");
    if (argc == 0) {
        cobj->setupTiles();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setTileGID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXLayer_setTileGID : Invalid Native Object");

    do {
        if (argc == 3) {
            unsigned int arg0 = 0;
            ok &= seval_to_uint32(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cocos2d::TMXTileFlags_ arg2;
            ok &= seval_to_uint32(args[2], (uint32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cobj->setTileGID(arg0, arg1, arg2);
        }
    } while(0);

    do {
        if (argc == 2) {
            unsigned int arg0 = 0;
            ok &= seval_to_uint32(args[0], &arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Vec2 arg1;
            ok &= seval_to_Vec2(args[1], &arg1);
            if (!ok) { ok = true; break; }
            cobj->setTileGID(arg0, arg1);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getMapTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getMapTileSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getMapTileSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getProperty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getProperty : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_getProperty : Error processing arguments");
        cocos2d::Value result = cobj->getProperty(arg0);
        se::Value jsret;
        ok &= ccvalue_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setLayerSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setLayerSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setLayerSize : Error processing arguments");
        cobj->setLayerSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getLayerName, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getLayerName : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getLayerName();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_setTileSet, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_setTileSet : Invalid Native Object");
    if (argc == 1) {
        cocos2d::TMXTilesetInfo* arg0 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_setTileSet : Error processing arguments");
        cobj->setTileSet(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getTileSet, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getTileSet : Invalid Native Object");
    if (argc == 0) {
        cocos2d::TMXTilesetInfo* result = cobj->getTileSet();
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::TMXTilesetInfo>((cocos2d::TMXTilesetInfo*)result, __jsb_cocos2dx_TMXTilesetInfo_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXLayer_getProperties : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::ValueMap& result = cobj->getProperties();
            se::Value jsret;
            ok &= ccvaluemap_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_getTileAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXLayer_getTileAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_getTileAt : Error processing arguments");
        cocos2d::Sprite* result = cobj->getTileAt(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::Sprite>((cocos2d::Sprite*)result, __jsb_cocos2dx_Sprite_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXLayer_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 3) {
        cocos2d::TMXTilesetInfo* arg0 = nullptr;
        cocos2d::TMXLayerInfo* arg1 = nullptr;
        cocos2d::TMXMapInfo* arg2 = nullptr;
        ok &= seval_to_native_ptr(args[0], &arg0);
        ok &= seval_to_native_ptr(args[1], &arg1);
        ok &= seval_to_native_ptr(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXLayer_create : Error processing arguments");
        auto result = cocos2d::TMXLayer::create(arg0, arg1, arg2);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TMXLayer_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXLayer_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXLayer_constructor, __jsb_cocos2dx_TMXLayer_class, js_cocos2dx_TMXLayer_finalize)
{
    cocos2d::TMXLayer* cobj = new (std::nothrow) cocos2d::TMXLayer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TMXLayer_ctor, __jsb_cocos2dx_TMXLayer_class, js_cocos2dx_TMXLayer_finalize)
{
    cocos2d::TMXLayer* cobj = new (std::nothrow) cocos2d::TMXLayer();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXLayer_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXLayer)", nativeThisObject);
    cocos2d::TMXLayer* cobj = (cocos2d::TMXLayer*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TMXLayer(se::Object* obj)
{
    auto cls = se::Class::create("TMXLayer", obj, __jsb_cocos2dx_SpriteBatchNode_proto, js_cocos2dx_TMXLayer_constructor);

    cls->defineFunction("getTileGIDAt", js_cocos2dx_TMXLayer_getTileGIDAt);
    cls->defineFunction("getPositionAt", js_cocos2dx_TMXLayer_getPositionAt);
    cls->defineFunction("setLayerOrientation", js_cocos2dx_TMXLayer_setLayerOrientation);
    cls->defineFunction("releaseMap", js_cocos2dx_TMXLayer_releaseMap);
    cls->defineFunction("setTiles", js_cocos2dx_TMXLayer_setTiles);
    cls->defineFunction("getLayerSize", js_cocos2dx_TMXLayer_getLayerSize);
    cls->defineFunction("setMapTileSize", js_cocos2dx_TMXLayer_setMapTileSize);
    cls->defineFunction("getLayerOrientation", js_cocos2dx_TMXLayer_getLayerOrientation);
    cls->defineFunction("setProperties", js_cocos2dx_TMXLayer_setProperties);
    cls->defineFunction("setLayerName", js_cocos2dx_TMXLayer_setLayerName);
    cls->defineFunction("removeTileAt", js_cocos2dx_TMXLayer_removeTileAt);
    cls->defineFunction("initWithTilesetInfo", js_cocos2dx_TMXLayer_initWithTilesetInfo);
    cls->defineFunction("setupTiles", js_cocos2dx_TMXLayer_setupTiles);
    cls->defineFunction("setTileGID", js_cocos2dx_TMXLayer_setTileGID);
    cls->defineFunction("getMapTileSize", js_cocos2dx_TMXLayer_getMapTileSize);
    cls->defineFunction("getProperty", js_cocos2dx_TMXLayer_getProperty);
    cls->defineFunction("setLayerSize", js_cocos2dx_TMXLayer_setLayerSize);
    cls->defineFunction("getLayerName", js_cocos2dx_TMXLayer_getLayerName);
    cls->defineFunction("setTileSet", js_cocos2dx_TMXLayer_setTileSet);
    cls->defineFunction("getTileSet", js_cocos2dx_TMXLayer_getTileSet);
    cls->defineFunction("getProperties", js_cocos2dx_TMXLayer_getProperties);
    cls->defineFunction("getTileAt", js_cocos2dx_TMXLayer_getTileAt);
    cls->defineFunction("ctor", js_cocos2dx_TMXLayer_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TMXLayer_create);
    cls->defineFinalizedFunction(js_cocos2dx_TMXLayer_finalize);
    cls->install();

    __jsb_cocos2dx_TMXLayer_proto = cls->getProto();
    __jsb_cocos2dx_TMXLayer_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TMXLayer.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TMXTiledMap_proto = nullptr;
se::Class* __jsb_cocos2dx_TMXTiledMap_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_setObjectGroups, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_setObjectGroups : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vector<cocos2d::TMXObjectGroup *> arg0;
        ok &= seval_to_Vector(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_setObjectGroups : Error processing arguments");
        cobj->setObjectGroups(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getProperty, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getProperty : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_getProperty : Error processing arguments");
        cocos2d::Value result = cobj->getProperty(arg0);
        se::Value jsret;
        ok &= ccvalue_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getLayerNum, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getLayerNum : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getLayerNum();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_setMapSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_setMapSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_setMapSize : Error processing arguments");
        cobj->setMapSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getObjectGroup, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getObjectGroup : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_getObjectGroup : Error processing arguments");
        cocos2d::TMXObjectGroup* result = cobj->getObjectGroup(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::TMXObjectGroup>((cocos2d::TMXObjectGroup*)result, __jsb_cocos2dx_TMXObjectGroup_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getObjectGroups, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXTiledMap_getObjectGroups : Invalid Native Object");

    do {
        if (argc == 0) {
            cocos2d::Vector<cocos2d::TMXObjectGroup *>& result = cobj->getObjectGroups();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 0) {
            const cocos2d::Vector<cocos2d::TMXObjectGroup *>& result = cobj->getObjectGroups();
            se::Value jsret;
            ok &= Vector_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getResourceFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getResourceFile : Invalid Native Object");
    if (argc == 0) {
        const std::string& result = cobj->getResourceFile();
        se::Value jsret;
        ok &= std_string_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_initWithTMXFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_initWithTMXFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_initWithTMXFile : Error processing arguments");
        bool result = cobj->initWithTMXFile(arg0);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getTileSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getTileSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getMapSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getMapSize : Invalid Native Object");
    if (argc == 0) {
        const cocos2d::Size& result = cobj->getMapSize();
        se::Value jsret;
        ok &= Size_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_initWithXML, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_initWithXML : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_initWithXML : Error processing arguments");
        bool result = cobj->initWithXML(arg0, arg1);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getProperties : Invalid Native Object");
    if (argc == 0) {
        cocos2d::ValueMap& result = cobj->getProperties();
        se::Value jsret;
        ok &= ccvaluemap_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getPropertiesForGID, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)(nativeThisObject);
    JSB_PRECONDITION2( cobj, false, "js_cocos2dx_TMXTiledMap_getPropertiesForGID : Invalid Native Object");

    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Value** arg1 = nullptr;
            ok &= seval_to_native_ptr(args[1], &arg1);
            if (!ok) { ok = true; break; }
            bool result = cobj->getPropertiesForGID(arg0, arg1);
            se::Value jsret;
            ok &= boolean_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

    do {
        if (argc == 1) {
            int arg0 = 0;
            ok &= seval_to_int32(args[0], (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            cocos2d::Value result = cobj->getPropertiesForGID(arg0);
            se::Value jsret;
            ok &= ccvalue_to_seval(result, &jsret);
            SE_SET_RVAL(jsret);
        }
    } while(0);

}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_setTileSize, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_setTileSize : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Size arg0;
        ok &= seval_to_Size(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_setTileSize : Error processing arguments");
        cobj->setTileSize(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_setProperties, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_setProperties : Invalid Native Object");
    if (argc == 1) {
        cocos2d::ValueMap arg0;
        ok &= seval_to_ccvaluemap(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_setProperties : Error processing arguments");
        cobj->setProperties(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getLayer, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getLayer : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_getLayer : Error processing arguments");
        cocos2d::TMXLayer* result = cobj->getLayer(arg0);
        se::Value jsret;
        ok &= native_ptr_to_seval<cocos2d::TMXLayer>((cocos2d::TMXLayer*)result, __jsb_cocos2dx_TMXLayer_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_getMapOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_getMapOrientation : Invalid Native Object");
    if (argc == 0) {
        int result = cobj->getMapOrientation();
        se::Value jsret;
        ok &= int32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_setMapOrientation, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TMXTiledMap_setMapOrientation : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= seval_to_int32(args[0], (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_setMapOrientation : Error processing arguments");
        cobj->setMapOrientation(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= seval_to_std_string(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_create : Error processing arguments");
        auto result = cocos2d::TMXTiledMap::create(arg0);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TMXTiledMap_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_createWithXML, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TMXTiledMap_createWithXML : Error processing arguments");
        auto result = cocos2d::TMXTiledMap::createWithXML(arg0, arg1);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TMXTiledMap_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TMXTiledMap_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TMXTiledMap_constructor, __jsb_cocos2dx_TMXTiledMap_class, js_cocos2dx_TMXTiledMap_finalize)
{
    cocos2d::TMXTiledMap* cobj = new (std::nothrow) cocos2d::TMXTiledMap();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TMXTiledMap_ctor, __jsb_cocos2dx_TMXTiledMap_class, js_cocos2dx_TMXTiledMap_finalize)
{
    cocos2d::TMXTiledMap* cobj = new (std::nothrow) cocos2d::TMXTiledMap();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TMXTiledMap_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TMXTiledMap)", nativeThisObject);
    cocos2d::TMXTiledMap* cobj = (cocos2d::TMXTiledMap*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TMXTiledMap(se::Object* obj)
{
    auto cls = se::Class::create("TMXTiledMap", obj, __jsb_cocos2dx_Node_proto, js_cocos2dx_TMXTiledMap_constructor);

    cls->defineFunction("setObjectGroups", js_cocos2dx_TMXTiledMap_setObjectGroups);
    cls->defineFunction("getProperty", js_cocos2dx_TMXTiledMap_getProperty);
    cls->defineFunction("getLayerNum", js_cocos2dx_TMXTiledMap_getLayerNum);
    cls->defineFunction("setMapSize", js_cocos2dx_TMXTiledMap_setMapSize);
    cls->defineFunction("getObjectGroup", js_cocos2dx_TMXTiledMap_getObjectGroup);
    cls->defineFunction("getObjectGroups", js_cocos2dx_TMXTiledMap_getObjectGroups);
    cls->defineFunction("getResourceFile", js_cocos2dx_TMXTiledMap_getResourceFile);
    cls->defineFunction("initWithTMXFile", js_cocos2dx_TMXTiledMap_initWithTMXFile);
    cls->defineFunction("getTileSize", js_cocos2dx_TMXTiledMap_getTileSize);
    cls->defineFunction("getMapSize", js_cocos2dx_TMXTiledMap_getMapSize);
    cls->defineFunction("initWithXML", js_cocos2dx_TMXTiledMap_initWithXML);
    cls->defineFunction("getProperties", js_cocos2dx_TMXTiledMap_getProperties);
    cls->defineFunction("getPropertiesForGID", js_cocos2dx_TMXTiledMap_getPropertiesForGID);
    cls->defineFunction("setTileSize", js_cocos2dx_TMXTiledMap_setTileSize);
    cls->defineFunction("setProperties", js_cocos2dx_TMXTiledMap_setProperties);
    cls->defineFunction("getLayer", js_cocos2dx_TMXTiledMap_getLayer);
    cls->defineFunction("getMapOrientation", js_cocos2dx_TMXTiledMap_getMapOrientation);
    cls->defineFunction("setMapOrientation", js_cocos2dx_TMXTiledMap_setMapOrientation);
    cls->defineFunction("ctor", js_cocos2dx_TMXTiledMap_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TMXTiledMap_create);
    cls->defineStaticFunction("createWithXML", js_cocos2dx_TMXTiledMap_createWithXML);
    cls->defineFinalizedFunction(js_cocos2dx_TMXTiledMap_finalize);
    cls->install();

    __jsb_cocos2dx_TMXTiledMap_proto = cls->getProto();
    __jsb_cocos2dx_TMXTiledMap_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TMXTiledMap.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_TileMapAtlas_proto = nullptr;
se::Class* __jsb_cocos2dx_TileMapAtlas_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_initWithTileFile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_initWithTileFile : Invalid Native Object");
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TileMapAtlas_initWithTileFile : Error processing arguments");
        bool result = cobj->initWithTileFile(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_releaseMap, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_releaseMap : Invalid Native Object");
    if (argc == 0) {
        cobj->releaseMap();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_getTGAInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_getTGAInfo : Invalid Native Object");
    if (argc == 0) {
        cocos2d::sImageTGA* result = cobj->getTGAInfo();
        se::Value jsret;
        #pragma warning NO CONVERSION FROM NATIVE FOR sImageTGA*;
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_getTileAt, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_getTileAt : Invalid Native Object");
    if (argc == 1) {
        cocos2d::Vec2 arg0;
        ok &= seval_to_Vec2(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TileMapAtlas_getTileAt : Error processing arguments");
        cocos2d::Color3B result = cobj->getTileAt(arg0);
        se::Value jsret;
        ok &= Color3B_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_setTile, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_setTile : Invalid Native Object");
    if (argc == 2) {
        cocos2d::Color3B arg0;
        cocos2d::Vec2 arg1;
        ok &= seval_to_Color3B(args[0], &arg0);
        ok &= seval_to_Vec2(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TileMapAtlas_setTile : Error processing arguments");
        cobj->setTile(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_setTGAInfo, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_TileMapAtlas_setTGAInfo : Invalid Native Object");
    if (argc == 1) {
        cocos2d::sImageTGA* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR sImageTGA*
		ok = false;
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TileMapAtlas_setTGAInfo : Error processing arguments");
        cobj->setTGAInfo(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_create, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        int arg2 = 0;
        int arg3 = 0;
        ok &= seval_to_std_string(args[0], &arg0);
        ok &= seval_to_std_string(args[1], &arg1);
        ok &= seval_to_int32(args[2], (int32_t *)&arg2);
        ok &= seval_to_int32(args[3], (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_TileMapAtlas_create : Error processing arguments");
        auto result = cocos2d::TileMapAtlas::create(arg0, arg1, arg2, arg3);
        result->retain();
        auto obj = se::Object::createObjectWithClass(__jsb_cocos2dx_TileMapAtlas_class, false);
        obj->setPrivateData(result);
        SE_SET_RVAL(se::Value(obj));
    }
}
SE_FUNC_END

SE_DECLARE_FINALIZE_FUNC(js_cocos2dx_TileMapAtlas_finalize)

SE_CTOR_BEGIN(js_cocos2dx_TileMapAtlas_constructor, __jsb_cocos2dx_TileMapAtlas_class, js_cocos2dx_TileMapAtlas_finalize)
{
    cocos2d::TileMapAtlas* cobj = new (std::nothrow) cocos2d::TileMapAtlas();
    thisObject->setPrivateData(cobj);
}
SE_CTOR_END

SE_CTOR2_BEGIN(js_cocos2dx_TileMapAtlas_ctor, __jsb_cocos2dx_TileMapAtlas_class, js_cocos2dx_TileMapAtlas_finalize)
{
    cocos2d::TileMapAtlas* cobj = new (std::nothrow) cocos2d::TileMapAtlas();
    thisObject->setPrivateData(cobj);
}
SE_CTOR2_END

SE_FINALIZE_FUNC_BEGIN(js_cocos2dx_TileMapAtlas_finalize)
{
    CCLOG("jsbindings: finalizing JS object %p (cocos2d::TileMapAtlas)", nativeThisObject);
    cocos2d::TileMapAtlas* cobj = (cocos2d::TileMapAtlas*)nativeThisObject;
    cobj->release();
}
SE_FINALIZE_FUNC_END
    

bool js_register_cocos2dx_TileMapAtlas(se::Object* obj)
{
    auto cls = se::Class::create("TileMapAtlas", obj, __jsb_cocos2dx_AtlasNode_proto, js_cocos2dx_TileMapAtlas_constructor);

    cls->defineFunction("initWithTileFile", js_cocos2dx_TileMapAtlas_initWithTileFile);
    cls->defineFunction("releaseMap", js_cocos2dx_TileMapAtlas_releaseMap);
    cls->defineFunction("getTGAInfo", js_cocos2dx_TileMapAtlas_getTGAInfo);
    cls->defineFunction("getTileAt", js_cocos2dx_TileMapAtlas_getTileAt);
    cls->defineFunction("setTile", js_cocos2dx_TileMapAtlas_setTile);
    cls->defineFunction("setTGAInfo", js_cocos2dx_TileMapAtlas_setTGAInfo);
    cls->defineFunction("ctor", js_cocos2dx_TileMapAtlas_ctor);
    cls->defineStaticFunction("create", js_cocos2dx_TileMapAtlas_create);
    cls->defineFinalizedFunction(js_cocos2dx_TileMapAtlas_finalize);
    cls->install();

    __jsb_cocos2dx_TileMapAtlas_proto = cls->getProto();
    __jsb_cocos2dx_TileMapAtlas_class = cls;

    se::ScriptEngine::getInstance()->executeScriptBuffer("(function () { cc.TileMapAtlas.extend = cc.Class.extend; })()");
    return true;
}

se::Object* __jsb_cocos2dx_SimpleAudioEngine_proto = nullptr;
se::Class* __jsb_cocos2dx_SimpleAudioEngine_class = nullptr;

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic : Error processing arguments");
        cobj->preloadBackgroundMusic(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_stopBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_stopBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->stopBackgroundMusic();
    }
    if (argc == 1) {
        bool arg0;
        ok &= seval_to_boolean(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_stopBackgroundMusic : Error processing arguments");
        cobj->stopBackgroundMusic(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_stopAllEffects, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_stopAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAllEffects();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getBackgroundMusicVolume();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeBackgroundMusic();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume : Error processing arguments");
        cobj->setBackgroundMusicVolume(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_preloadEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_preloadEffect : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_preloadEffect : Error processing arguments");
        cobj->preloadEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->isBackgroundMusicPlaying();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_getEffectsVolume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_getEffectsVolume : Invalid Native Object");
    if (argc == 0) {
        float result = cobj->getEffectsVolume();
        se::Value jsret;
        ok &= float_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        bool result = cobj->willPlayBackgroundMusic();
        se::Value jsret;
        ok &= boolean_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_pauseEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_pauseEffect : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_pauseEffect : Error processing arguments");
        cobj->pauseEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_playEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Error processing arguments");
        unsigned int result = cobj->playEffect(arg0);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 2) {
        const char* arg0 = nullptr;
        bool arg1;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Error processing arguments");
        unsigned int result = cobj->playEffect(arg0, arg1);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 3) {
        const char* arg0 = nullptr;
        bool arg1;
        float arg2 = 0;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Error processing arguments");
        unsigned int result = cobj->playEffect(arg0, arg1, arg2);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 4) {
        const char* arg0 = nullptr;
        bool arg1;
        float arg2 = 0;
        float arg3 = 0;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Error processing arguments");
        unsigned int result = cobj->playEffect(arg0, arg1, arg2, arg3);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
    if (argc == 5) {
        const char* arg0 = nullptr;
        bool arg1;
        float arg2 = 0;
        float arg3 = 0;
        float arg4 = 0;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        ok &= seval_to_float(args[2], &arg2);
        ok &= seval_to_float(args[3], &arg3);
        ok &= seval_to_float(args[4], &arg4);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playEffect : Error processing arguments");
        unsigned int result = cobj->playEffect(arg0, arg1, arg2, arg3, arg4);
        se::Value jsret;
        ok &= uint32_to_seval(result, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->rewindBackgroundMusic();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_playBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_playBackgroundMusic : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playBackgroundMusic : Error processing arguments");
        cobj->playBackgroundMusic(arg0);
    }
    if (argc == 2) {
        const char* arg0 = nullptr;
        bool arg1;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= seval_to_boolean(args[1], &arg1);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_playBackgroundMusic : Error processing arguments");
        cobj->playBackgroundMusic(arg0, arg1);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_resumeAllEffects, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_resumeAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeAllEffects();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_setEffectsVolume, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_setEffectsVolume : Invalid Native Object");
    if (argc == 1) {
        float arg0 = 0;
        ok &= seval_to_float(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_setEffectsVolume : Error processing arguments");
        cobj->setEffectsVolume(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_stopEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_stopEffect : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_stopEffect : Error processing arguments");
        cobj->stopEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseBackgroundMusic();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_pauseAllEffects, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_pauseAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseAllEffects();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_unloadEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_unloadEffect : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= seval_to_std_string(args[0], &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_unloadEffect : Error processing arguments");
        cobj->unloadEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_resumeEffect, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine*)nativeThisObject;
    JSB_PRECONDITION2(cobj, false, "js_cocos2dx_SimpleAudioEngine_resumeEffect : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= seval_to_uint32(args[0], &arg0);
        JSB_PRECONDITION2(ok, false, "js_cocos2dx_SimpleAudioEngine_resumeEffect : Error processing arguments");
        cobj->resumeEffect(arg0);
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_end, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        CocosDenshion::SimpleAudioEngine::end();
    }
}
SE_FUNC_END

SE_FUNC_BEGIN(js_cocos2dx_SimpleAudioEngine_getInstance, se::NEED_THIS) //FIXME: bindings-generator should support configrue NEED_THIS flag
{
    bool ok = true;
    if (argc == 0) {
        CocosDenshion::SimpleAudioEngine* result = CocosDenshion::SimpleAudioEngine::getInstance();
        se::Value jsret;
        ok &= native_ptr_to_seval<CocosDenshion::SimpleAudioEngine>((CocosDenshion::SimpleAudioEngine*)result, __jsb_cocos2dx_SimpleAudioEngine_class, &jsret);
        SE_SET_RVAL(jsret);
    }
}
SE_FUNC_END

bool js_register_cocos2dx_SimpleAudioEngine(se::Object* obj)
{
    auto cls = se::Class::create("AudioEngine", obj, nullptr, nullptr);

    cls->defineFunction("preloadMusic", js_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic);
    cls->defineFunction("stopMusic", js_cocos2dx_SimpleAudioEngine_stopBackgroundMusic);
    cls->defineFunction("stopAllEffects", js_cocos2dx_SimpleAudioEngine_stopAllEffects);
    cls->defineFunction("getMusicVolume", js_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume);
    cls->defineFunction("resumeMusic", js_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic);
    cls->defineFunction("setMusicVolume", js_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume);
    cls->defineFunction("preloadEffect", js_cocos2dx_SimpleAudioEngine_preloadEffect);
    cls->defineFunction("isMusicPlaying", js_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying);
    cls->defineFunction("getEffectsVolume", js_cocos2dx_SimpleAudioEngine_getEffectsVolume);
    cls->defineFunction("willPlayMusic", js_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic);
    cls->defineFunction("pauseEffect", js_cocos2dx_SimpleAudioEngine_pauseEffect);
    cls->defineFunction("playEffect", js_cocos2dx_SimpleAudioEngine_playEffect);
    cls->defineFunction("rewindMusic", js_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic);
    cls->defineFunction("playMusic", js_cocos2dx_SimpleAudioEngine_playBackgroundMusic);
    cls->defineFunction("resumeAllEffects", js_cocos2dx_SimpleAudioEngine_resumeAllEffects);
    cls->defineFunction("setEffectsVolume", js_cocos2dx_SimpleAudioEngine_setEffectsVolume);
    cls->defineFunction("stopEffect", js_cocos2dx_SimpleAudioEngine_stopEffect);
    cls->defineFunction("pauseMusic", js_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic);
    cls->defineFunction("pauseAllEffects", js_cocos2dx_SimpleAudioEngine_pauseAllEffects);
    cls->defineFunction("unloadEffect", js_cocos2dx_SimpleAudioEngine_unloadEffect);
    cls->defineFunction("resumeEffect", js_cocos2dx_SimpleAudioEngine_resumeEffect);
    cls->defineStaticFunction("end", js_cocos2dx_SimpleAudioEngine_end);
    cls->defineStaticFunction("getInstance", js_cocos2dx_SimpleAudioEngine_getInstance);
    cls->install();

    __jsb_cocos2dx_SimpleAudioEngine_proto = cls->getProto();
    __jsb_cocos2dx_SimpleAudioEngine_class = cls;

    return true;
}

bool register_all_cocos2dx(se::Object* obj)
{
    // Get the ns
    se::Value nsVal;
    obj->getProperty("cc", &nsVal);
    se::Object* ns = nsVal.toObject();

    js_register_cocos2dx_RenderState(ns);
    js_register_cocos2dx_Material(ns);
    js_register_cocos2dx_Action(ns);
    js_register_cocos2dx_FiniteTimeAction(ns);
    js_register_cocos2dx_ActionInstant(ns);
    js_register_cocos2dx_Hide(ns);
    js_register_cocos2dx_Node(ns);
    js_register_cocos2dx_Scene(ns);
    js_register_cocos2dx_TransitionScene(ns);
    js_register_cocos2dx_TransitionEaseScene(ns);
    js_register_cocos2dx_TransitionMoveInL(ns);
    js_register_cocos2dx_TransitionMoveInB(ns);
    js_register_cocos2dx_Layer(ns);
    js_register_cocos2dx___LayerRGBA(ns);
    js_register_cocos2dx_AtlasNode(ns);
    js_register_cocos2dx_TileMapAtlas(ns);
    js_register_cocos2dx_TransitionMoveInT(ns);
    js_register_cocos2dx_TMXTilesetInfo(ns);
    js_register_cocos2dx_TransitionMoveInR(ns);
    js_register_cocos2dx_ParticleSystem(ns);
    js_register_cocos2dx_ParticleSystemQuad(ns);
    js_register_cocos2dx_ParticleSpiral(ns);
    js_register_cocos2dx_GridBase(ns);
    js_register_cocos2dx_AnimationCache(ns);
    js_register_cocos2dx_ActionInterval(ns);
    js_register_cocos2dx_ActionCamera(ns);
    js_register_cocos2dx_ProgressFromTo(ns);
    js_register_cocos2dx_MoveBy(ns);
    js_register_cocos2dx_MoveTo(ns);
    js_register_cocos2dx_JumpBy(ns);
    js_register_cocos2dx_EventListener(ns);
    js_register_cocos2dx_EventListenerKeyboard(ns);
    js_register_cocos2dx_ActionEase(ns);
    js_register_cocos2dx_EaseBounceIn(ns);
    js_register_cocos2dx_ComponentContainer(ns);
    js_register_cocos2dx_Director(ns);
    js_register_cocos2dx_Scheduler(ns);
    js_register_cocos2dx_EaseElastic(ns);
    js_register_cocos2dx_EaseElasticOut(ns);
    js_register_cocos2dx_EaseQuadraticActionInOut(ns);
    js_register_cocos2dx_EaseBackOut(ns);
    js_register_cocos2dx_Texture2D(ns);
    js_register_cocos2dx_TransitionSceneOriented(ns);
    js_register_cocos2dx_TransitionFlipX(ns);
    js_register_cocos2dx_CameraBackgroundBrush(ns);
    js_register_cocos2dx_CameraBackgroundDepthBrush(ns);
    js_register_cocos2dx_CameraBackgroundColorBrush(ns);
    js_register_cocos2dx_GridAction(ns);
    js_register_cocos2dx_TiledGrid3DAction(ns);
    js_register_cocos2dx_FadeOutTRTiles(ns);
    js_register_cocos2dx_FadeOutUpTiles(ns);
    js_register_cocos2dx_FadeOutDownTiles(ns);
    js_register_cocos2dx_StopGrid(ns);
    js_register_cocos2dx_Technique(ns);
    js_register_cocos2dx_SkewTo(ns);
    js_register_cocos2dx_SkewBy(ns);
    js_register_cocos2dx_EaseQuadraticActionOut(ns);
    js_register_cocos2dx_TransitionProgress(ns);
    js_register_cocos2dx_TransitionProgressVertical(ns);
    js_register_cocos2dx_TMXTiledMap(ns);
    js_register_cocos2dx_Grid3DAction(ns);
    js_register_cocos2dx_BaseLight(ns);
    js_register_cocos2dx_SpotLight(ns);
    js_register_cocos2dx_FadeTo(ns);
    js_register_cocos2dx_FadeIn(ns);
    js_register_cocos2dx_DirectionLight(ns);
    js_register_cocos2dx_ShakyTiles3D(ns);
    js_register_cocos2dx_EventListenerCustom(ns);
    js_register_cocos2dx_FlipX3D(ns);
    js_register_cocos2dx_FlipY3D(ns);
    js_register_cocos2dx_EaseSineInOut(ns);
    js_register_cocos2dx_TransitionFlipAngular(ns);
    js_register_cocos2dx_SimpleAudioEngine(ns);
    js_register_cocos2dx_EaseElasticInOut(ns);
    js_register_cocos2dx_EaseBounce(ns);
    js_register_cocos2dx_Show(ns);
    js_register_cocos2dx_FadeOut(ns);
    js_register_cocos2dx_CallFunc(ns);
    js_register_cocos2dx_Event(ns);
    js_register_cocos2dx_EventMouse(ns);
    js_register_cocos2dx_GLView(ns);
    js_register_cocos2dx_EaseBezierAction(ns);
    js_register_cocos2dx_ParticleFireworks(ns);
    js_register_cocos2dx_MenuItem(ns);
    js_register_cocos2dx_MenuItemSprite(ns);
    js_register_cocos2dx_MenuItemImage(ns);
    js_register_cocos2dx_ParticleFire(ns);
    js_register_cocos2dx_ProgressTo(ns);
    js_register_cocos2dx_ParticleSmoke(ns);
    js_register_cocos2dx_TransitionZoomFlipAngular(ns);
    js_register_cocos2dx_EaseRateAction(ns);
    js_register_cocos2dx_EaseIn(ns);
    js_register_cocos2dx_EaseExponentialInOut(ns);
    js_register_cocos2dx_CardinalSplineTo(ns);
    js_register_cocos2dx_CatmullRomTo(ns);
    js_register_cocos2dx_Waves3D(ns);
    js_register_cocos2dx_EaseExponentialOut(ns);
    js_register_cocos2dx_Label(ns);
    js_register_cocos2dx_Application(ns);
    js_register_cocos2dx_DelayTime(ns);
    js_register_cocos2dx_LabelAtlas(ns);
    js_register_cocos2dx_LabelBMFont(ns);
    js_register_cocos2dx_AsyncTaskPool(ns);
    js_register_cocos2dx_ParticleSnow(ns);
    js_register_cocos2dx_EaseElasticIn(ns);
    js_register_cocos2dx_EaseCircleActionInOut(ns);
    js_register_cocos2dx_TransitionFadeTR(ns);
    js_register_cocos2dx_EaseQuarticActionOut(ns);
    js_register_cocos2dx_EventAcceleration(ns);
    js_register_cocos2dx_EaseCubicActionIn(ns);
    js_register_cocos2dx_TextureCache(ns);
    js_register_cocos2dx_SpriteBatchNode(ns);
    js_register_cocos2dx_TMXLayer(ns);
    js_register_cocos2dx_Configuration(ns);
    js_register_cocos2dx_ActionTween(ns);
    js_register_cocos2dx_TransitionFadeDown(ns);
    js_register_cocos2dx_ParticleSun(ns);
    js_register_cocos2dx_TransitionProgressHorizontal(ns);
    js_register_cocos2dx_TMXObjectGroup(ns);
    js_register_cocos2dx_CameraBackgroundSkyBoxBrush(ns);
    js_register_cocos2dx_FlipX(ns);
    js_register_cocos2dx_FlipY(ns);
    js_register_cocos2dx_TransitionSplitCols(ns);
    js_register_cocos2dx_RepeatForever(ns);
    js_register_cocos2dx_Place(ns);
    js_register_cocos2dx_EventListenerAcceleration(ns);
    js_register_cocos2dx_TiledGrid3D(ns);
    js_register_cocos2dx_EaseBounceOut(ns);
    js_register_cocos2dx_RenderTexture(ns);
    js_register_cocos2dx_TintBy(ns);
    js_register_cocos2dx_TransitionShrinkGrow(ns);
    js_register_cocos2dx_LabelTTF(ns);
    js_register_cocos2dx_ClippingNode(ns);
    js_register_cocos2dx_ActionFloat(ns);
    js_register_cocos2dx_ParticleFlower(ns);
    js_register_cocos2dx_EaseCircleActionIn(ns);
    js_register_cocos2dx_Image(ns);
    js_register_cocos2dx_LayerMultiplex(ns);
    js_register_cocos2dx_Blink(ns);
    js_register_cocos2dx_JumpTo(ns);
    js_register_cocos2dx_ParticleExplosion(ns);
    js_register_cocos2dx_TransitionJumpZoom(ns);
    js_register_cocos2dx_Pass(ns);
    js_register_cocos2dx_Touch(ns);
    js_register_cocos2dx_SAXParser(ns);
    js_register_cocos2dx_CardinalSplineBy(ns);
    js_register_cocos2dx_CatmullRomBy(ns);
    js_register_cocos2dx_NodeGrid(ns);
    js_register_cocos2dx_TMXLayerInfo(ns);
    js_register_cocos2dx_EaseSineIn(ns);
    js_register_cocos2dx_EventListenerMouse(ns);
    js_register_cocos2dx_Camera(ns);
    js_register_cocos2dx_GLProgram(ns);
    js_register_cocos2dx_ParticleGalaxy(ns);
    js_register_cocos2dx_Twirl(ns);
    js_register_cocos2dx_MenuItemLabel(ns);
    js_register_cocos2dx_EaseQuinticActionIn(ns);
    js_register_cocos2dx_LayerColor(ns);
    js_register_cocos2dx_FadeOutBLTiles(ns);
    js_register_cocos2dx_LayerGradient(ns);
    js_register_cocos2dx_EventListenerTouchAllAtOnce(ns);
    js_register_cocos2dx_ToggleVisibility(ns);
    js_register_cocos2dx_Repeat(ns);
    js_register_cocos2dx_TransitionFlipY(ns);
    js_register_cocos2dx_TurnOffTiles(ns);
    js_register_cocos2dx_TintTo(ns);
    js_register_cocos2dx_EaseBackInOut(ns);
    js_register_cocos2dx_TransitionFadeBL(ns);
    js_register_cocos2dx_TargetedAction(ns);
    js_register_cocos2dx_DrawNode(ns);
    js_register_cocos2dx_TransitionTurnOffTiles(ns);
    js_register_cocos2dx_RotateTo(ns);
    js_register_cocos2dx_TransitionSplitRows(ns);
    js_register_cocos2dx_Device(ns);
    js_register_cocos2dx_TransitionProgressRadialCCW(ns);
    js_register_cocos2dx_EventListenerFocus(ns);
    js_register_cocos2dx_TransitionPageTurn(ns);
    js_register_cocos2dx_Properties(ns);
    js_register_cocos2dx_BezierBy(ns);
    js_register_cocos2dx_BezierTo(ns);
    js_register_cocos2dx_ParticleMeteor(ns);
    js_register_cocos2dx_SpriteFrame(ns);
    js_register_cocos2dx_Liquid(ns);
    js_register_cocos2dx_ParticleBatchNode(ns);
    js_register_cocos2dx_TransitionZoomFlipX(ns);
    js_register_cocos2dx_EventFocus(ns);
    js_register_cocos2dx_EaseQuinticActionInOut(ns);
    js_register_cocos2dx_TransitionRotoZoom(ns);
    js_register_cocos2dx_SpriteFrameCache(ns);
    js_register_cocos2dx_PointLight(ns);
    js_register_cocos2dx_TransitionCrossFade(ns);
    js_register_cocos2dx_Ripple3D(ns);
    js_register_cocos2dx_Lens3D(ns);
    js_register_cocos2dx_ScaleTo(ns);
    js_register_cocos2dx_Spawn(ns);
    js_register_cocos2dx_EaseQuarticActionInOut(ns);
    js_register_cocos2dx_GLProgramState(ns);
    js_register_cocos2dx_PageTurn3D(ns);
    js_register_cocos2dx_TransitionSlideInL(ns);
    js_register_cocos2dx_TransitionSlideInT(ns);
    js_register_cocos2dx_Grid3D(ns);
    js_register_cocos2dx_EaseCircleActionOut(ns);
    js_register_cocos2dx_TransitionProgressInOut(ns);
    js_register_cocos2dx_EaseCubicActionInOut(ns);
    js_register_cocos2dx_EaseBackIn(ns);
    js_register_cocos2dx_SplitRows(ns);
    js_register_cocos2dx_Follow(ns);
    js_register_cocos2dx_Animate(ns);
    js_register_cocos2dx_ShuffleTiles(ns);
    js_register_cocos2dx_ReverseTime(ns);
    js_register_cocos2dx_ProgressTimer(ns);
    js_register_cocos2dx_EaseQuarticActionIn(ns);
    js_register_cocos2dx_Menu(ns);
    js_register_cocos2dx_EaseInOut(ns);
    js_register_cocos2dx_TransitionZoomFlipY(ns);
    js_register_cocos2dx_ScaleBy(ns);
    js_register_cocos2dx_EventTouch(ns);
    js_register_cocos2dx_Animation(ns);
    js_register_cocos2dx_TMXMapInfo(ns);
    js_register_cocos2dx_EaseExponentialIn(ns);
    js_register_cocos2dx_ReuseGrid(ns);
    js_register_cocos2dx_EaseQuinticActionOut(ns);
    js_register_cocos2dx_EventDispatcher(ns);
    js_register_cocos2dx_MenuItemAtlasFont(ns);
    js_register_cocos2dx_ActionManager(ns);
    js_register_cocos2dx_OrbitCamera(ns);
    js_register_cocos2dx_ParallaxNode(ns);
    js_register_cocos2dx_TransitionFade(ns);
    js_register_cocos2dx_Component(ns);
    js_register_cocos2dx_EaseCubicActionOut(ns);
    js_register_cocos2dx_EventListenerTouchOneByOne(ns);
    js_register_cocos2dx_TextFieldTTF(ns);
    js_register_cocos2dx_ParticleRain(ns);
    js_register_cocos2dx_Waves(ns);
    js_register_cocos2dx_EaseOut(ns);
    js_register_cocos2dx_MenuItemFont(ns);
    js_register_cocos2dx_TransitionFadeUp(ns);
    js_register_cocos2dx_EaseSineOut(ns);
    js_register_cocos2dx_JumpTiles3D(ns);
    js_register_cocos2dx_MenuItemToggle(ns);
    js_register_cocos2dx_RemoveSelf(ns);
    js_register_cocos2dx_SplitCols(ns);
    js_register_cocos2dx_ProtectedNode(ns);
    js_register_cocos2dx_MotionStreak(ns);
    js_register_cocos2dx_RotateBy(ns);
    js_register_cocos2dx_FileUtils(ns);
    js_register_cocos2dx_Sprite(ns);
    js_register_cocos2dx_CallFuncN(ns);
    js_register_cocos2dx_TransitionProgressOutIn(ns);
    js_register_cocos2dx_AnimationFrame(ns);
    js_register_cocos2dx_Sequence(ns);
    js_register_cocos2dx_Shaky3D(ns);
    js_register_cocos2dx_TransitionProgressRadialCW(ns);
    js_register_cocos2dx_EaseBounceInOut(ns);
    js_register_cocos2dx_TransitionSlideInR(ns);
    js_register_cocos2dx___NodeRGBA(ns);
    js_register_cocos2dx_AmbientLight(ns);
    js_register_cocos2dx_GLProgramCache(ns);
    js_register_cocos2dx_EaseQuadraticActionIn(ns);
    js_register_cocos2dx_WavesTiles3D(ns);
    js_register_cocos2dx_TransitionSlideInB(ns);
    js_register_cocos2dx_Speed(ns);
    js_register_cocos2dx_EventCustom(ns);
    js_register_cocos2dx_ShatteredTiles3D(ns);
    return true;
}

